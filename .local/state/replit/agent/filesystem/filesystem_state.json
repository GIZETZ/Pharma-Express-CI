{"file_contents":{"DATABASE_BACKUP_GUIDE.md":{"content":"# Guide de Sauvegarde et Restauration Automatique - Pharma Express CI\n\n## üîí Syst√®me de Protection des Donn√©es\n\nVotre application Pharma Express CI est maintenant √©quip√©e d'un syst√®me de sauvegarde et restauration automatique qui prot√®ge vos donn√©es contre toute perte accidentelle.\n\n## üîß Fonctionnement Automatique\n\n### Au D√©marrage du Serveur\nLe syst√®me v√©rifie automatiquement :\n1. **Existence des donn√©es** - V√©rifie si la base de donn√©es contient des utilisateurs\n2. **Int√©grit√© des donn√©es** - Contr√¥le que toutes les tables essentielles sont pr√©sentes\n3. **Restauration si n√©cessaire** - Recr√©e automatiquement les donn√©es de base si la DB est vide\n\n### Donn√©es Automatiquement Recr√©√©es\n\nSi votre base de donn√©es est perdue, le syst√®me recr√©e automatiquement :\n\n#### üë• Utilisateurs de Base\n- **Patient Test** : Aya Diallo (Login: aya.diallo / Mot de passe: 123456)\n- **Livreur** : Jean-Claude Koffi avec photo de profil et v√©hicule\n- **Pharmacien** : Dr. Marie Kouadio \n- **Admin** : Compte administrateur syst√®me\n\n#### üè™ Pharmacies\n- **Pharmacie Centrale d'Abidjan** (Plateau)\n- **Pharmacie de Garde Cocody** (Service 24h/24)\n\n#### üöó Profils Livreurs Complets\n- **Photo de profil** de Jean-Claude Koffi\n- **V√©hicule** : Moto Yamaha DT 125 Rouge\n- **Plaque d'immatriculation** : CI-2578-AB\n- **√âvaluations** : 4.8/5 (127 livraisons)\n\n#### üì¶ Donn√©es de Test\n- **Prescription approuv√©e** avec m√©dicaments\n- **Commande en cours** assign√©e au livreur\n- **Statut \"en route\"** pour tester le suivi\n\n## üõ°Ô∏è Protection Int√©gr√©e\n\n### D√©tection Intelligente\n```\n‚úÖ Base de donn√©es existante d√©tect√©e - V√©rification de l'int√©grit√©...\nüìä 5 utilisateurs trouv√©s\nüè™ 5 pharmacies trouv√©es\n‚úÖ Configuration de la base de donn√©es termin√©e\n```\n\n### En Cas de Base Vide\n```\nüìä Base de donn√©es vide d√©tect√©e - Cr√©ation des donn√©es initiales...\nüë• Cr√©ation des utilisateurs de base...\nüè™ Cr√©ation des pharmacies...\nüë®‚Äç‚öïÔ∏è Cr√©ation du profil livreur...\nüöó Cr√©ation du v√©hicule du livreur...\nüìã Cr√©ation d'une prescription de test...\nüì¶ Cr√©ation d'une commande de test...\n‚úÖ Donn√©es initiales cr√©√©es avec succ√®s\n```\n\n## üöÄ Avantages\n\n1. **Aucune intervention manuelle** requise\n2. **R√©cup√©ration instantan√©e** des donn√©es essentielles\n3. **Tests imm√©diatement disponibles** \n4. **Continuit√© de service** garantie\n5. **Profils livreurs complets** avec photos et v√©hicules\n\n## üìã Comptes de Test Disponibles\n\n### Patient\n- **Nom** : Aya Diallo\n- **T√©l√©phone** : +225 07 12 34 56\n- **Mot de passe** : 123456\n\n### Livreur  \n- **Nom** : Jean-Claude Koffi\n- **T√©l√©phone** : +225 07 44 55 66\n- **V√©hicule** : Moto Yamaha DT 125 Rouge (CI-2578-AB)\n- **Mot de passe** : 123456\n\n### Pharmacien\n- **Nom** : Dr. Marie Kouadio  \n- **T√©l√©phone** : +225 21 22 33 44\n- **Mot de passe** : 123456\n\n### Admin\n- **Nom** : Admin System\n- **T√©l√©phone** : +225 21 00 00 00\n- **Mot de passe** : 123456\n\n## üéØ Cas d'Usage\n\nCe syst√®me est particuli√®rement utile pour :\n- **D√©veloppement** : Environnement de test toujours pr√™t\n- **D√©monstrations** : Donn√©es coh√©rentes pour les pr√©sentations\n- **R√©cup√©ration** : Restauration rapide apr√®s incident\n- **Nouvelles instances** : Configuration automatique sur nouveaux d√©ploiements\n\n## ‚öôÔ∏è Configuration Technique\n\nLe syst√®me s'active automatiquement dans `server/database-setup.ts` et est int√©gr√© au d√©marrage dans `server/index.ts`.\n\n**Aucune configuration suppl√©mentaire n√©cessaire** - Tout fonctionne automatiquement !","size_bytes":3580},"DATABASE_RECOVERY_GUIDE.md":{"content":"# üóÑÔ∏è GUIDE DE R√âCUP√âRATION BASE DE DONN√âES - PHARMA EXPRESS CI\n\nCe guide vous explique comment restaurer automatiquement votre base de donn√©es PostgreSQL en cas de perte, m√™me si vous perdez toutes vos donn√©es.\n\n## üìã R√âSUM√â DE LA CONFIGURATION\n\nVotre application est maintenant prot√©g√©e contre la perte de donn√©es avec :\n\n‚úÖ **V√©rification automatique** au d√©marrage\n‚úÖ **Scripts de sauvegarde** du sch√©ma complet  \n‚úÖ **Scripts de restauration** automatique\n‚úÖ **Garde de s√©curit√©** qui emp√™che l'usage du stockage en m√©moire\n\n## üöÄ SCRIPTS DISPONIBLES\n\n### 1. Configuration automatique de base de donn√©es\n```bash\nnode scripts/setup-database.js\n```\n**Usage :** Recr√©e automatiquement le sch√©ma complet et les donn√©es de base\n\n### 2. Sauvegarde du sch√©ma\n```bash\nnode scripts/backup-schema.js  \n```\n**Usage :** G√©n√®re un fichier SQL de sauvegarde compl√®te dans `backup/`\n\n### 3. Garde de s√©curit√©\n```bash\nnode scripts/database-guard.js\n```\n**Usage :** V√©rifie que PostgreSQL est utilis√© (s'ex√©cute automatiquement au d√©marrage)\n\n## üÜò PROC√âDURE DE R√âCUP√âRATION D'URGENCE\n\n### Si vous perdez votre base de donn√©es :\n\n1. **V√©rifiez DATABASE_URL**\n   ```bash\n   echo $DATABASE_URL\n   ```\n   \n2. **Restaurez le sch√©ma automatiquement**\n   ```bash\n   node scripts/setup-database.js\n   ```\n\n3. **Red√©marrez l'application**\n   ```bash\n   npm run dev\n   ```\n\n### Si l'application utilise le stockage en m√©moire :\n\n1. **V√©rifiez le fichier d'alerte**\n   ```bash\n   cat DATABASE_ALERT.txt\n   ```\n\n2. **Configurez DATABASE_URL dans les secrets Replit**\n   - Allez dans Settings > Secrets\n   - Ajoutez DATABASE_URL avec votre URL Neon\n\n3. **Red√©marrez l'application**\n\n## üîß DONN√âES AUTOMATIQUEMENT RESTAUR√âES\n\nQuand vous utilisez les scripts de r√©cup√©ration, voici ce qui est automatiquement recr√©√© :\n\n### üë• Utilisateurs de test\n- **Admin** : +225 01 23 45 67 / admin123\n- **Pharmacien 1** : Dr. Marie Kouassi (+225 07 11 22 33 / pharma123)\n- **Pharmacien 2** : Dr. Adjoua Bamba (+225 05 44 33 22 / pharma2024)\n- **Livreur 1** : Jean-Claude Koffi (+225 07 44 55 66 / livreur123)\n- **Livreur 2** : Aya Traore (+225 05 77 88 99 / livreur123)\n- **Patient** : Konan Akissi (+225 01 11 22 33 / patient123)\n\n### üè• Pharmacies\n- Pharmacie Dr. Marie Kouassi (Riviera Golf, Cocody)\n- Pharmacie de la Paix (Boulevard de la Paix, Cocody)\n- Pharmacie Centrale Plus (Marcory)\n\n### üîó Associations\n- Livreurs correctement associ√©s aux pharmacies\n- Statuts d'approbation configur√©s\n- Permissions et r√¥les d√©finis\n\n## üìä STRUCTURE DE BASE DE DONN√âES\n\n### Tables principales :\n- `users` - Utilisateurs (patients, pharmaciens, livreurs, admin)\n- `pharmacies` - Pharmacies enregistr√©es\n- `orders` - Commandes de m√©dicaments\n- `prescriptions` - Ordonnances upload√©es\n- `notifications` - Notifications syst√®me\n\n### Index de performance :\n- Recherche par t√©l√©phone\n- Filtres par r√¥le\n- Association pharmacie-livreur\n- Statuts de commande\n\n## üõ°Ô∏è S√âCURIT√â ET MONITORING\n\n### V√©rifications automatiques :\n1. **Au d√©marrage** : V√©rifie que PostgreSQL est utilis√©\n2. **Configuration** : Alerte si DATABASE_URL manque\n3. **Sant√©** : Test de connexion √† la base de donn√©es\n4. **Type de stockage** : Confirmation que PostgresStorage est actif\n\n### Fichiers de monitoring :\n- `DATABASE_ALERT.txt` - Cr√©√© si probl√®me d√©tect√©\n- `.database-status.json` - Statut de la derni√®re v√©rification\n- `.database-config.json` - Configuration sauvegard√©e\n\n## üìù COMMANDES DRIZZLE COMPATIBLES\n\n```bash\n# Pousser le sch√©ma vers la base\nnpx drizzle-kit push\n\n# G√©n√©rer des migrations\nnpx drizzle-kit generate\n\n# Interface web pour explorer la DB\nnpx drizzle-kit studio\n```\n\n## üîÑ MAINTENANCE PR√âVENTIVE\n\n### Sauvegarde hebdomadaire recommand√©e :\n```bash\nnode scripts/backup-schema.js\n```\n\n### V√©rification mensuelle :\n```bash\nnode scripts/database-guard.js\n```\n\n## üìû SUPPORT\n\nSi vous rencontrez des probl√®mes :\n\n1. V√©rifiez `DATABASE_ALERT.txt` pour les alertes\n2. Consultez `.database-status.json` pour le dernier statut\n3. Ex√©cutez `node scripts/database-guard.js` pour diagnostiquer\n4. Utilisez `node scripts/setup-database.js` pour tout r√©initialiser\n\n---\n\n**üí° Note importante :** Cette configuration garantit que m√™me si vous perdez compl√®tement votre base de donn√©es, vous pouvez la restaurer avec le sch√©ma complet et les donn√©es de test en quelques minutes seulement.\n\n**üìÖ Configuration cr√©√©e le :** ${new Date().toLocaleString('fr-FR')}  \n**üîß Version :** 1.0.0  \n**üìç Environnement :** Replit + PostgreSQL (Neon)","size_bytes":4606},"DEPLOYMENT.md":{"content":"# Guide de D√©ploiement - Pharma Express CI\n\n## üöÄ D√©ploiement sur Render\n\n### √âtape 1 : Pr√©paration du Repository GitHub\n1. Assurez-vous que votre code est pouss√© sur GitHub : `https://github.com/GIZETZ/Pharma-Express-CI.git`\n2. V√©rifiez que tous les fichiers de configuration sont pr√©sents :\n   - `render.yaml`\n   - `Dockerfile`\n   - `.env.example`\n   - `build.sh`\n\n### √âtape 2 : Configuration sur Render\n1. Allez sur [render.com](https://render.com) et connectez-vous\n2. Cliquez sur \"New\" ‚Üí \"Web Service\"\n3. Connectez votre compte GitHub\n4. S√©lectionnez le repository `GIZETZ/Pharma-Express-CI`\n\n### √âtape 3 : Configuration du Service\n```\nName: pharma-express-ci\nEnvironment: Node\nBuild Command: ./build.sh\nStart Command: npm run start\n```\n\n### √âtape 4 : Variables d'Environnement\nAjoutez ces variables dans Render :\n\n**Variables Obligatoires :**\n- `NODE_ENV` = `production`\n- `PORT` = `10000`\n- `SESSION_SECRET` = [G√©n√©rez une cl√© secr√®te forte]\n- `DATABASE_URL` = [URL de votre base PostgreSQL]\n\n**Variables Optionnelles :**\n- `CORS_ORIGIN` = [URL de votre domaine personnalis√©]\n- `MAX_FILE_SIZE` = `10485760`\n- `ALLOWED_FILE_TYPES` = `image/jpeg,image/png,image/webp`\n\n### √âtape 5 : Configuration de la Base de Donn√©es\n1. Dans Render, cr√©ez une nouvelle base PostgreSQL\n2. Copiez l'URL de connexion\n3. Ajoutez-la comme variable `DATABASE_URL`\n\n## üîß D√©ploiement sur Replit\n\n### Configuration Automatique\n- Utilisez le bouton \"Deploy\" dans l'interface Replit\n- S√©lectionnez \"Autoscale\" pour la production\n- Les variables d'environnement sont configur√©es automatiquement\n\n### Variables d'Environnement Replit\nAjoutez dans les Secrets :\n- `SESSION_SECRET` = [Cl√© secr√®te]\n- `DATABASE_URL` = [URL PostgreSQL]\n\n## üîç V√©rification du D√©ploiement\n\n### Health Check\nTestez l'endpoint de sant√© :\n```\nGET https://votre-app.onrender.com/api/health\n```\n\nR√©ponse attendue :\n```json\n{\n  \"status\": \"ok\",\n  \"timestamp\": \"2025-01-09T14:30:00.000Z\"\n}\n```\n\n### Tests de Fonctionnalit√©\n1. Acc√®s √† l'interface : `https://votre-app.onrender.com`\n2. Test d'inscription/connexion\n3. Upload d'ordonnance\n4. Navigation entre les r√¥les\n\n## üõ†Ô∏è D√©pannage\n\n### Erreurs Communes\n1. **Port Binding Error** : V√©rifiez que `PORT=10000` et `HOST=0.0.0.0`\n2. **Database Connection** : V√©rifiez `DATABASE_URL` et les credentials\n3. **Build Failures** : V√©rifiez que toutes les d√©pendances sont dans `package.json`\n\n### Logs\n- Render : Consultez les logs dans le dashboard\n- Replit : Utilisez la console de workflow\n\n## üìà Optimisations Production\n\n### Performance\n- Compression Gzip activ√©e\n- Minification des assets\n- Cache des resources statiques\n\n### S√©curit√©\n- HTTPS forc√© en production\n- Sessions s√©curis√©es\n- Validation des uploads\n\n### Monitoring\n- Health checks automatiques\n- Logs d'application structur√©s\n- M√©triques de performance","size_bytes":2869},"README.md":{"content":"\n# üè• Yaho Pharma - ServiceConnect\n\nUne application web progressive (PWA) pour la livraison de m√©dicaments en C√¥te d'Ivoire, d√©velopp√©e avec React, Express.js et TypeScript.\n\n## üìã Table des mati√®res\n\n- [Fonctionnalit√©s](#fonctionnalit√©s)\n- [Technologies utilis√©es](#technologies-utilis√©es)\n- [Pr√©requis](#pr√©requis)\n- [Installation locale](#installation-locale)\n- [Configuration](#configuration)\n- [Utilisation](#utilisation)\n- [Structure du projet](#structure-du-projet)\n- [API Endpoints](#api-endpoints)\n- [Tests](#tests)\n- [D√©ploiement](#d√©ploiement)\n- [Contribution](#contribution)\n\n## ‚ú® Fonctionnalit√©s\n\n### üîê Authentification\n- Inscription et connexion s√©curis√©es\n- Gestion des sessions utilisateur\n- Protection des routes priv√©es\n\n### üë§ Profil utilisateur\n- **Upload de photo de profil** - Importation d'images depuis l'appareil\n- Modification des informations personnelles\n- Gestion des pr√©f√©rences\n\n### üìç G√©olocalisation\n- **Localisation automatique** pour les adresses de livraison\n- Possibilit√© de personnaliser l'adresse manuellement\n- G√©ocodage inverse pour obtenir l'adresse depuis les coordonn√©es\n\n### üè™ Pharmacies\n- Recherche de pharmacies √† proximit√©\n- Informations d√©taill√©es des pharmacies\n- Syst√®me de notation et avis\n\n### üöö Livraison\n- Suivi en temps r√©el des commandes\n- Informations du livreur\n- Estimation des d√©lais de livraison\n\n### üì± PWA (Progressive Web App)\n- Installation sur mobile et desktop\n- Fonctionnement hors ligne\n- Notifications push\n\n## üõ†Ô∏è Technologies utilis√©es\n\n### Frontend\n- **React 18** avec TypeScript\n- **Wouter** pour le routage\n- **TanStack Query** pour la gestion d'√©tat et cache\n- **React Hook Form** avec validation Zod\n- **Tailwind CSS** pour le styling\n- **Shadcn/ui** pour les composants UI\n\n### Backend\n- **Express.js** avec TypeScript\n- **Drizzle ORM** pour la base de donn√©es\n- **PostgreSQL** comme base de donn√©es\n- **Multer** pour l'upload de fichiers\n- **Express Session** pour la gestion des sessions\n\n### Outils de d√©veloppement\n- **Vite** pour le build et dev server\n- **ESLint** et **Prettier** pour le code quality\n- **tsx** pour l'ex√©cution TypeScript\n\n## üìã Pr√©requis\n\n- **Node.js** version 18.0.0 ou sup√©rieure\n- **npm** version 8.0.0 ou sup√©rieure\n- **PostgreSQL** version 12.0.0 ou sup√©rieure\n\n## üöÄ Installation locale\n\n### 1. Cloner le projet\n\n```bash\n# Cloner depuis GitHub\ngit clone https://github.com/GIZETZ/Pharma-Express-CI.git\ncd yaho-pharma-serviceconnect\n\n# Ou copier depuis votre dossier local\ncp -r \"C:\\Users\\HP\\Documents\\yaho_pharma\\ServiceConnect\" ./yaho-pharma\ncd yaho-pharma\n```\n\n### 2. Installer les d√©pendances\n\n```bash\nnpm install\n```\n\n### 3. Configuration de la base de donn√©es\n\nCr√©ez une base de donn√©es PostgreSQL et configurez les variables d'environnement :\n\n```bash\n# Cr√©er un fichier .env √† la racine du projet\ntouch .env\n```\n\nAjouter les variables suivantes dans `.env` :\n\n```env\n# Base de donn√©es\nDATABASE_URL=\"postgresql://username:password@localhost:5432/yaho_pharma\"\n\n# Session secret (g√©n√©rer une cl√© al√©atoire)\nSESSION_SECRET=\"votre-cl√©-secr√®te-tr√®s-longue-et-al√©atoire\"\n\n# Port de d√©veloppement (optionnel, par d√©faut 5000)\nPORT=5000\n\n# Mode de d√©veloppement\nNODE_ENV=development\n```\n\n### 4. Initialiser la base de donn√©es\n\n```bash\n# G√©n√©rer et appliquer les migrations\nnpm run db:push\nnpm run db:migrate\n```\n\n### 5. Lancer l'application\n\n```bash\n# D√©marrer en mode d√©veloppement\nnpm run dev\n```\n\nL'application sera accessible √† l'adresse : `http://localhost:5000`\n\n## ‚öôÔ∏è Configuration\n\n### Variables d'environnement\n\n| Variable | Description | Requis | D√©faut |\n|----------|-------------|---------|---------|\n| `DATABASE_URL` | URL de connexion PostgreSQL | ‚úÖ | - |\n| `SESSION_SECRET` | Cl√© secr√®te pour les sessions | ‚úÖ | - |\n| `PORT` | Port du serveur | ‚ùå | 5000 |\n| `NODE_ENV` | Environnement d'ex√©cution | ‚ùå | development |\n\n### Base de donn√©es\n\nLa structure de la base de donn√©es inclut :\n\n- **users** - Informations des utilisateurs\n- **pharmacies** - Donn√©es des pharmacies\n- **prescriptions** - Ordonnances upload√©es\n- **orders** - Commandes des utilisateurs\n- **delivery_persons** - Informations des livreurs\n- **notifications** - Syst√®me de notifications\n\n## üéØ Utilisation\n\n### 1. Premi√®re utilisation\n\n1. **S√©lection de langue** : Choisir entre Fran√ßais et Anglais\n2. **Onboarding** : D√©couvrir les fonctionnalit√©s principales\n3. **Inscription** : Cr√©er un compte avec num√©ro de t√©l√©phone\n\n### 2. Fonctionnalit√©s principales\n\n#### Upload de photo de profil\n1. Aller dans \"Mon Profil\"\n2. Cliquer sur la photo de profil\n3. S√©lectionner une image depuis l'appareil\n4. L'image est automatiquement upload√©e et sauvegard√©e\n\n#### Configuration d'adresse avec g√©olocalisation\n1. Aller dans \"Adresses de livraison\" depuis le profil\n2. Cliquer sur \"Utiliser ma position actuelle\"\n3. Autoriser la g√©olocalisation dans le navigateur\n4. L'adresse est automatiquement remplie\n5. Modifier les d√©tails si n√©cessaire et sauvegarder\n\n#### Commande et livraison\n1. Rechercher une pharmacie\n2. Uploader une ordonnance ou choisir des produits\n3. Confirmer l'adresse de livraison\n4. Suivre la livraison en temps r√©el\n\n### 3. Test des fonctionnalit√©s\n\n#### Comptes de test\n```\nT√©l√©phone: 0707070707\nMot de passe: password123\n```\n\n#### Test de g√©olocalisation\n- Ouvrir dans un navigateur supportant la g√©olocalisation\n- Autoriser l'acc√®s √† la position\n- Tester sur diff√©rents appareils (mobile, desktop)\n\n## üìÅ Structure du projet\n\n```\nyaho-pharma-serviceconnect/\n‚îú‚îÄ‚îÄ client/                     # Frontend React\n‚îÇ   ‚îú‚îÄ‚îÄ public/                 # Fichiers publics (PWA)\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/         # Composants r√©utilisables\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/            # Composants UI Shadcn\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/             # Hooks personnalis√©s\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/               # Utilitaires et config\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/             # Pages de l'application\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ contexts/          # Contextes React\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.tsx            # Composant principal\n‚îú‚îÄ‚îÄ server/                     # Backend Express\n‚îÇ   ‚îú‚îÄ‚îÄ db.ts                  # Configuration base de donn√©es\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts              # Routes API\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts             # Couche d'acc√®s aux donn√©es\n‚îÇ   ‚îî‚îÄ‚îÄ index.ts               # Point d'entr√©e serveur\n‚îú‚îÄ‚îÄ shared/                     # Code partag√©\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts              # Sch√©mas de donn√©es\n‚îî‚îÄ‚îÄ README.md                   # Documentation\n```\n\n## üîå API Endpoints\n\n### Authentification\n- `POST /api/auth/register` - Inscription\n- `POST /api/auth/login` - Connexion\n- `GET /api/auth/user` - Profil utilisateur\n- `PUT /api/auth/user` - Mise √† jour profil\n- `POST /api/auth/upload-profile-image` - Upload photo\n\n### Pharmacies\n- `GET /api/pharmacies` - Liste des pharmacies\n- `GET /api/pharmacies/:id` - D√©tails d'une pharmacie\n\n### Commandes\n- `POST /api/orders` - Cr√©er une commande\n- `GET /api/orders` - Commandes utilisateur\n- `GET /api/orders/current` - Commande en cours\n\n### G√©olocalisation\n- `GET /api/location/reverse?lat=&lng=` - G√©ocodage inverse\n\n## üß™ Tests\n\n### Tests manuels\n\n1. **Test d'upload d'image** :\n   ```bash\n   # Navigateur : tester avec diff√©rents formats (JPG, PNG, WebP)\n   # V√©rifier la limite de taille (5MB)\n   # Tester sur mobile et desktop\n   ```\n\n2. **Test de g√©olocalisation** :\n   ```bash\n   # Navigateur : autoriser/refuser la g√©olocalisation\n   # Tester la pr√©cision en diff√©rents lieux\n   # V√©rifier le g√©ocodage inverse\n   ```\n\n3. **Tests de r√©gression** :\n   ```bash\n   # Inscription et connexion\n   # Navigation entre pages\n   # Fonctionnement PWA\n   ```\n\n### Tests automatis√©s\n\n```bash\n# √Ä impl√©menter avec Jest/Vitest\nnpm run test\n```\n\n## üöÄ D√©ploiement\n\n### D√©ploiement sur Replit\n\n1. **Importer le projet** sur Replit\n2. **Configurer les variables d'environnement** dans Secrets\n3. **Connecter la base de donn√©es** PostgreSQL\n4. **D√©ployer** avec le bouton Deploy\n\n### Variables Replit Secrets\n\n```\nDATABASE_URL=postgresql://...\nSESSION_SECRET=your-secret-key\n```\n\n### Production Build\n\n```bash\n# Build de production\nnpm run build\n\n# D√©marrage en production\nnpm start\n```\n\n## üìù Scripts disponibles\n\n```bash\n# D√©veloppement\nnpm run dev              # D√©marre le serveur de d√©veloppement\n\n# Base de donn√©es\nnpm run db:generate      # G√©n√®re les migrations Drizzle\nnpm run db:migrate       # Applique les migrations\nnpm run db:studio        # Interface graphique de la DB\n\n# Production\nnpm run build           # Build de production\nnpm start              # D√©marre le serveur de production\n\n# Qualit√© de code\nnpm run lint           # ESLint\nnpm run format         # Prettier\n```\n\n## ü§ù Contribution\n\n### Workflow de d√©veloppement\n\n1. **Fork** le projet\n2. Cr√©er une **branche feature** (`git checkout -b feature/amazing-feature`)\n3. **Commit** les changements (`git commit -m 'Add amazing feature'`)\n4. **Push** vers la branche (`git push origin feature/amazing-feature`)\n5. Ouvrir une **Pull Request**\n\n### Standards de code\n\n- Utiliser **TypeScript** strict\n- Suivre les conventions **ESLint** et **Prettier**\n- Documenter les fonctions complexes\n- √âcrire des tests pour les nouvelles fonctionnalit√©s\n\n### Issues\n\nPour signaler un bug ou proposer une fonctionnalit√© :\n1. V√©rifier que l'issue n'existe pas d√©j√†\n2. Utiliser les templates d'issues\n3. Fournir un maximum de d√©tails\n\n## üìú Licence\n\nCe projet est sous licence MIT. Voir le fichier `LICENSE` pour plus de d√©tails.\n\n## üìû Support\n\n- **Email** : support@yahopharma.ci\n- **T√©l√©phone** : +225 XX XX XX XX XX\n- **Issues GitHub** : [Cr√©er une issue](https://github.com/votre-username/yaho-pharma-serviceconnect/issues)\n\n---\n\nD√©velopp√© avec ‚ù§Ô∏è pour am√©liorer l'acc√®s aux soins en C√¥te d'Ivoire.\n","size_bytes":10005},"README_DEPLOYMENT.md":{"content":"# üöÄ Guide de D√©ploiement Rapide - Pharma Express CI\n\n## üìã R√©sum√© des Configurations\n\nVotre application est maintenant **pr√™te pour le d√©ploiement** sur Replit et Render avec toutes les configurations optimis√©es.\n\n## üéØ D√©ploiement sur Render (√âtapes Simples)\n\n### 1. Connecter le Repository\n- Allez sur [render.com](https://render.com)\n- Cliquez \"New\" ‚Üí \"Web Service\"  \n- Connectez le repo : `https://github.com/GIZETZ/Pharma-Express-CI.git`\n\n### 2. Configuration Automatique\nLe fichier `render.yaml` configurera automatiquement :\n- **Build Command** : `./build.sh`\n- **Start Command** : `./start.sh`\n- **Port** : `10000`\n- **Environment** : `Node.js`\n\n### 3. Variables d'Environnement Obligatoires\nAjoutez ces variables dans Render :\n\n```\nNODE_ENV=production\nPORT=10000\nSESSION_SECRET=[g√©n√©rez une cl√© de 32+ caract√®res]\nDATABASE_URL=[votre URL PostgreSQL Neon]\n```\n\n### 4. Cr√©er la Base de Donn√©es\n- Dans Render : \"New\" ‚Üí \"PostgreSQL\"\n- Copiez l'URL g√©n√©r√©e dans `DATABASE_URL`\n\n## ‚úÖ V√©rifications Post-D√©ploiement\n\n### Health Check\n```\nGET https://your-app.onrender.com/api/health\n```\n\n### Interface Utilisateur\n```\nhttps://your-app.onrender.com\n```\n\n## üîß Optimisations Incluses\n\n- **Production Ready** : Configuration HTTPS, sessions s√©curis√©es\n- **Performance** : Compression, cache, minification\n- **Monitoring** : Health checks, logs structur√©s\n- **S√©curit√©** : Variables d'environnement, validation uploads\n- **Scalabilit√©** : Host binding pour containers\n\n## üìÅ Fichiers de Configuration Cr√©√©s\n\n- `render.yaml` - Configuration Render automatique\n- `Dockerfile` - Container Docker optimis√©\n- `build.sh` - Script de build production\n- `start.sh` - Script de d√©marrage s√©curis√©\n- `.env.example` - Template variables d'environnement\n- `DEPLOYMENT.md` - Guide d√©taill√© complet\n\n## üö® Important\n\n1. **Changez** la `SESSION_SECRET` en production\n2. **Configurez** votre propre `DATABASE_URL`\n3. **Testez** le health check apr√®s d√©ploiement\n4. **V√©rifiez** les logs si probl√®me\n\nVotre application fonctionne parfaitement en local et est pr√™te pour la production ! üéâ","size_bytes":2128},"RENDER_DEPLOY_GUIDE.md":{"content":"# üöÄ Guide D√©ploiement Render Simplifi√©\n\n## ‚úÖ Probl√®mes R√©solus\n- ‚úÖ Supprim√© le package `node` probl√©matique\n- ‚úÖ Dockerfile simplifi√© avec Node 20-slim\n- ‚úÖ Configuration Render optimis√©e\n- ‚úÖ Variables d'environnement automatiques\n\n## üéØ D√©ploiement sur Render (Simple)\n\n### Option 1: Configuration Automatique\n1. Connectez votre repo GitHub sur Render\n2. Le fichier `render.yaml` configurera automatiquement le service\n\n### Option 2: Configuration Manuelle (Plus Fiable)\n1. **Nouveau Web Service** sur render.com\n2. **Repository**: `https://github.com/GIZETZ/Pharma-Express-CI.git`\n3. **Configuration**:\n   ```\n   Name: pharma-express-ci\n   Environment: Node\n   Build Command: npm install\n   Start Command: npm run start\n   ```\n\n### Option 3: Sans Dockerfile\nSi Render utilise encore le Dockerfile, renommez-le temporairement :\n```bash\nmv Dockerfile Dockerfile.bak\n```\n\n## üîß Variables d'Environnement (S√âCURIS√âES)\nAjoutez dans Render Dashboard :\n- `NODE_ENV` = `production`\n- `DATABASE_URL` = `[copiez votre URL Neon compl√®te]`\n- `SESSION_SECRET` = `[g√©n√©rez avec: openssl rand -base64 32]`\n\n‚ö†Ô∏è **Important** : Ne jamais exposer ces variables dans le code source !\n\n## üóÑÔ∏è Base de Donn√©es\n1. Cr√©ez une PostgreSQL dans Render\n2. Copiez l'URL externe dans `DATABASE_URL`\n3. Les migrations se lanceront automatiquement\n\n## ‚úÖ Test Final\nUne fois d√©ploy√© :\n- Health check: `https://votre-app.onrender.com/api/health`\n- Interface: `https://votre-app.onrender.com`\n\n**Le d√©ploiement devrait maintenant r√©ussir sans erreurs !**","size_bytes":1566},"RENDER_FIX_GUIDE.md":{"content":"# üîß Correction de l'Erreur Render : SIGTERM\n\n## üîç Probl√®me Identifi√©\n\nL'erreur `npm error command sh -c NODE_ENV=node de production dist/index.js` indique que :\n1. La commande de d√©marrage dans Render √©tait mal configur√©e\n2. Le fichier `dist/index.js` √©tait introuvable\n\n## ‚úÖ Solution Appliqu√©e\n\n### 1. Configuration `render.yaml` Corrig√©e\n```yaml\nservices:\n  - type: web\n    name: pharma-express-ci\n    env: node\n    plan: starter\n    buildCommand: npm ci && npm run build  # ‚úÖ npm ci au lieu de npm install\n    startCommand: node dist/index.js       # ‚úÖ Commande directe au lieu de npm run start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: PORT\n        value: 10000\n      - key: DATABASE_URL\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true\n    healthCheckPath: /api/health\n```\n\n### 2. Validation Ajout√©e\n- ‚úÖ Validation des variables d'environnement en production\n- ‚úÖ Messages d'erreur clairs\n- ‚úÖ Exit graceful si DATABASE_URL manque\n\n## üöÄ √âtapes de Red√©ploiement\n\n### Sur Render Dashboard :\n1. **Allez √† votre service Pharma Express CI**\n2. **Settings** ‚Üí **Environment Variables**\n3. **Ajoutez si manquant :**\n   - `DATABASE_URL` = `[votre URL Neon compl√®te]`\n   - `SESSION_SECRET` = `[cl√© forte g√©n√©r√©e]`\n   - `NODE_ENV` = `production`\n\n4. **Deploy** ‚Üí **Redeploy**\n\n### Configuration Manuelle Alternative\nSi `render.yaml` ne fonctionne pas :\n\n**Build Command:**\n```bash\nnpm ci && npm run build\n```\n\n**Start Command:**\n```bash\nnode dist/index.js\n```\n\n## ‚úÖ Tests Locaux Valid√©s\n\n```bash\n# Build r√©ussi\n‚úì vite build ‚Üí dist/public/\n‚úì esbuild ‚Üí dist/index.js (46.9kb)\n\n# Fichiers g√©n√©r√©s\n‚úì dist/index.js\n‚úì dist/public/index.html\n‚úì dist/public/assets/\n```\n\n## üéØ R√©sultat Attendu\n\nApr√®s red√©ploiement, vous devriez voir :\n```\n‚úÖ Production environment validated\nüåê serving on 0.0.0.0:10000\n```\n\n**Votre application Pharma Express CI sera accessible sur l'URL Render fournie !**","size_bytes":2005},"SECURITY_GUIDE.md":{"content":"# üîê Guide de S√©curit√© - Variables d'Environnement\n\n## ‚úÖ Probl√®me de S√©curit√© R√©solu\n\n**Avant** : L'URL de base de donn√©es √©tait expos√©e directement dans le code\n**Maintenant** : L'URL est s√©curis√©e via des variables d'environnement\n\n## üõ°Ô∏è S√©curisation sur Replit\n\n### Variables S√©curis√©es Configur√©es\n- ‚úÖ `DATABASE_URL` - Stock√©e dans Replit Secrets\n- ‚úÖ Application red√©marr√©e avec les nouveaux secrets\n\n### Comment Ajouter d'Autres Secrets\n1. Onglet \"Secrets\" dans Replit\n2. Ajouter les cl√©s sensibles (API keys, mots de passe, etc.)\n3. Red√©marrer l'application\n\n## üåê S√©curisation sur Render\n\n### Variables d'Environnement Obligatoires\n```\nDATABASE_URL=postgresql://votre-url-neon-complete\nSESSION_SECRET=votre-cl√©-secr√®te-forte-32-caract√®res\nNODE_ENV=production\n```\n\n### √âtapes de Configuration Render\n1. **Tableau de bord Render** ‚Üí Votre service\n2. **Environment** ‚Üí \"Add Environment Variable\"\n3. **Ajouter chaque variable** une par une\n4. **Deploy** ‚Üí L'application utilisera les variables s√©curis√©es\n\n## üîç V√©rifications de S√©curit√©\n\n### Code Source Propre\n- ‚ùå Aucune URL de BDD dans le code\n- ‚ùå Aucun mot de passe en dur\n- ‚ùå Aucune cl√© API expos√©e\n- ‚úÖ Validation des variables obligatoires\n\n### Fichiers Ignor√©s\n- `.env` - Jamais commit√©\n- Secrets locaux exclus du Git\n- Variables sensibles dans `.env.example` document√©es\n\n## üö® Bonnes Pratiques\n\n### Pour Replit\n- Utilisez toujours l'onglet \"Secrets\"\n- Ne mettez jamais de donn√©es sensibles dans les fichiers\n- V√©rifiez que `.env` est dans `.gitignore`\n\n### Pour Render\n- Configurez toutes les variables avant le d√©ploiement\n- Utilisez des cl√©s SESSION_SECRET fortes (32+ caract√®res)\n- Activez les logs pour surveiller les acc√®s\n\n### G√©n√©ration de Cl√©s S√©curis√©es\n```bash\n# G√©n√©rer une SESSION_SECRET forte\nopenssl rand -base64 32\n```\n\n## ‚úÖ √âtat Actuel\n\nVotre application est maintenant **100% s√©curis√©e** :\n- Database URL prot√©g√©e\n- Code source clean\n- Pr√™te pour d√©ploiement s√©curis√© sur Render","size_bytes":2049},"STEPS_GITHUB_TO_RENDER.md":{"content":"# üöÄ √âtapes pour D√©ployer sur Render depuis GitHub\n\n## üìã Fichiers √† Committer sur GitHub\n\n### Fichiers Modifi√©s (OBLIGATOIRES)\n1. `server/db.ts` - URL base de donn√©es s√©curis√©e\n2. `server/index.ts` - Validation production ajout√©e\n3. `render.yaml` - Configuration corrig√©e\n4. `.env.example` - Documentation mise √† jour\n5. `SECURITY_GUIDE.md` - Guide de s√©curit√©\n6. `RENDER_FIX_GUIDE.md` - Guide correction erreur\n7. `replit.md` - Historique des changements\n\n### Fichiers √† NE PAS committer\n- `.env` (contient vos secrets locaux)\n\n## üì§ √âtapes GitHub\n\n### 1. Committer les Changements\n```bash\ngit add server/db.ts server/index.ts render.yaml .env.example\ngit add SECURITY_GUIDE.md RENDER_FIX_GUIDE.md replit.md\ngit commit -m \"Fix: S√©curisation DB + correction erreur SIGTERM Render\"\ngit push origin main\n```\n\n## üåê √âtapes Render\n\n### 2. Connecter √† Render Dashboard\n1. Allez sur [render.com](https://render.com)\n2. Connectez-vous √† votre compte\n\n### 3. Cr√©er/Mettre √† jour le Service\n**Si NOUVEAU d√©ploiement :**\n- \"New\" ‚Üí \"Web Service\"\n- Connect repository: `https://github.com/GIZETZ/Pharma-Express-CI.git`\n- Render d√©tectera automatiquement `render.yaml`\n\n**Si service EXISTANT :**\n- Allez √† votre service \"pharma-express-ci\"\n- Settings ‚Üí \"Deploy\"\n- \"Manual Deploy\" ‚Üí \"Deploy latest commit\"\n\n### 4. Configuration Variables d'Environnement\nSettings ‚Üí Environment ‚Üí Add Environment Variable :\n\n```\nDATABASE_URL = postgresql://neondb_owner:npg_xbkj5ZsNWfI4@ep-floral-mouse-a2pjisa8-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require\n\nSESSION_SECRET = [g√©n√©rez avec: openssl rand -base64 32]\n\nNODE_ENV = production\n```\n\n### 5. Red√©ploiement\n- Cliquez \"Deploy\" \n- Attendez que le build termine\n- Votre app sera accessible sur l'URL Render\n\n## ‚úÖ V√©rification du Succ√®s\n\nApr√®s d√©ploiement, vous devriez voir dans les logs :\n```\n‚úÖ Production environment validated\nüåê serving on 0.0.0.0:10000\n```\n\n**URL finale :** `https://votre-service.onrender.com`\n\n## üîß Configuration Alternative (Manuel)\n\nSi `render.yaml` ne fonctionne pas :\n\n**Build Command:**\n```\nnpm ci && npm run build\n```\n\n**Start Command:**\n```\nnode dist/index.js\n```\n\n**Root Directory:** `.` (racine)\n\n## üéØ R√©sultat Final\n\n‚úÖ Application s√©curis√©e\n‚úÖ Erreur SIGTERM corrig√©e  \n‚úÖ Base de donn√©es prot√©g√©e\n‚úÖ D√©ploiement production op√©rationnel","size_bytes":2402},"build.sh":{"content":"#!/bin/bash\n\n# Script de build pour Render\nset -e\n\necho \"üîß Installing dependencies...\"\nnpm install\n\necho \"üèóÔ∏è Building application...\"\nnpm run build\n\necho \"‚úÖ Build completed successfully!\"\n\n# V√©rifier que les fichiers de build existent\nif [ ! -d \"dist\" ]; then\n  echo \"‚ùå Error: dist directory not found!\"\n  exit 1\nfi\n\nif [ ! -d \"dist-client\" ]; then\n  echo \"‚ùå Error: dist-client directory not found!\"\n  exit 1\nfi\n\necho \"üì¶ Build artifacts ready for deployment\"","size_bytes":476},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render-simple.yaml":{"content":"# Configuration Render ultra-simplifi√©e\nservices:\n  - type: web\n    name: pharma-express-ci\n    env: node\n    buildCommand: npm install\n    startCommand: npm run start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true","size_bytes":331},"render.yaml":{"content":"services:\n  - type: web\n    name: pharma-express-ci\n    env: node\n    plan: starter\n    buildCommand: npm ci && npm run build\n    startCommand: node dist/index.js\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: PORT\n        value: 10000\n      - key: DATABASE_URL\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true\n    healthCheckPath: /api/health","size_bytes":397},"replit.md":{"content":"# Overview\n\nPharma Express CI is a comprehensive pharmacy delivery platform for the C√¥te d'Ivoire market. It enables users to upload prescription images, select pharmacies, place orders, and track real-time medication deliveries. Built as a Progressive Web App (PWA), it offers offline capabilities and a mobile-first user experience with French language support.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDeployment: Ready for both Replit and Render platforms with optimized production configurations.\nDeployment targets: Replit Deployments and Render\nRepository: https://github.com/GIZETZ/Pharma-Express-CI.git\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite\n- **Routing**: Wouter\n- **UI Components**: Radix UI primitives with shadcn/ui\n- **Styling**: Tailwind CSS with custom pharma-specific colors\n- **State Management**: TanStack Query for server state\n- **Forms**: React Hook Form with Zod validation\n- **PWA Features**: Service worker for offline caching, push notifications, and app installation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful endpoints\n- **File Handling**: Multer for prescription image uploads\n- **Middleware**: Request logging, JSON parsing, CORS handling\n\n## Data Storage Solutions\n- **Database**: Firebase Firestore (primary) with PostgreSQL fallback\n- **Schema Management**: TypeScript schemas with Zod validation\n- **Storage Interface**: Unified IStorage interface for multiple backends\n- **Offline Storage**: IndexedDB for client-side caching\n- **File Storage**: In-memory for development, extensible for cloud\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store\n- **User Context**: Shared user state across client and server\n- **Security**: Environment-based database credentials and secure session configuration\n\n## Key Design Patterns\n- **Shared Schema**: Common TypeScript types between client and server\n- **Progressive Enhancement**: Core functionality works offline with enhanced online features\n- **Mobile-First**: Responsive design optimized for mobile devices\n- **Internationalization Ready**: French language support\n- **Real-time Updates**: Query invalidation and optimistic updates\n\n## Performance Optimizations\n- **Code Splitting**: Vite-based bundling\n- **Image Optimization**: Client-side image compression\n- **Caching Strategy**: Multi-level caching with IndexedDB and service worker\n- **Lazy Loading**: Component-based code splitting\n\n## Deployment Configuration\n- **Multi-Platform**: Configured for Replit Deployments and Render\n- **Environment Management**: Secure environment variable handling\n- **Health Monitoring**: `/api/health` endpoint\n- **Security**: Production-ready session management and HTTPS\n- **Container Support**: Optimized Dockerfile with multi-stage builds\n\n# External Dependencies\n\n- **Database Hosting**: Neon PostgreSQL serverless database\n- **Geolocation**: Browser Geolocation API\n- **Camera Access**: MediaDevices API\n- **Push Notifications**: Web Push API\n- **Maps Integration**: Ready for Google Maps or similar service\n- **Image Processing**: Browser-based canvas manipulation\n- **Development Tools**: Replit-specific plugins\n\n## Recent Changes and Improvements\n\n### GPS Tracking and Communication System (August 19, 2025)\n- ‚úÖ **Enhanced Delivery Tracking System**\n  - Fixed Leaflet map initialization issues with proper error handling and DOM ready checks\n  - Enhanced delivery tracking simulation to work with all order statuses (preparing, ready_for_delivery, in_transit, in_delivery)\n  - Added real-time delivery person position simulation with route calculation using OSRM API\n  - Implemented functional call and SMS buttons with proper phone number handling (`tel:` and `sms:` URL schemes)\n  - Added comprehensive debug mode (development only) for GPS tracking troubleshooting\n  - Enhanced visual feedback with delivery person status indicators and route information\n  - Improved map markers with custom icons for user, delivery person, and pharmacy locations\n  - Added real-time route calculation with distance and ETA updates every 3 seconds\n  - Resolved map rendering errors by adding timeout delay for DOM ready state\n\n### Order Status Flow Optimization (August 18, 2025)\n- ‚úÖ **Fixed Rejected Delivery Assignment Flow**\n  - Corrected critical issue where rejected or expired delivery assignments returned to \"En pr√©paration\" status\n  - Modified PostgresStorage methods to use 'ready_for_delivery' instead of 'preparing' for rejected orders\n  - Prevents pharmacists from repeating the entire preparation process\n  - Orders now stay at \"Pr√™te pour la livraison\" status and can be immediately reassigned\n  - Significantly improved workflow efficiency and reduced pharmacist workload\n\n### Comprehensive Driver Identification System (August 19, 2025)\n- ‚úÖ **Complete Driver Profile Management**\n  - Expanded database schema with delivery_profiles and delivery_vehicles tables\n  - Driver profile photos prominently displayed to patients for easy identification\n  - Vehicle license plates shown in large, highly visible text (CI-2578-AB format)\n  - Complete vehicle information including type, brand, model, and color\n  - Functional call and SMS buttons for direct driver communication\n  - API endpoints for retrieving comprehensive driver information\n  - Test data: Jean-Claude Koffi with red Yamaha DT 125 motorcycle\n\n### Automatic Database Backup & Recovery System (August 19, 2025)\n- ‚úÖ **Zero-Loss Data Protection**\n  - Automatic database integrity verification on every server startup\n  - Intelligent detection of empty or corrupted databases\n  - Complete data restoration including users, pharmacies, driver profiles, and test orders\n  - Pre-configured test accounts for immediate functionality (password: 123456)\n  - Full driver profiles with photos, vehicle details, and license plates\n  - Seamless recovery without manual intervention required\n  - Comprehensive documentation in DATABASE_BACKUP_GUIDE.md\n\n### Replit Environment Migration (August 20, 2025)\n- ‚úÖ **Successful Migration from Replit Agent to Replit Environment**\n  - Fixed missing tsx dependency causing build failures\n  - Resolved database schema issues with missing delivery_profiles and delivery_vehicles tables\n  - Pushed database migrations successfully using drizzle-kit\n  - Enhanced pharmacy profile edit functionality with robust error handling\n  - Added comprehensive error boundaries and safety checks for production stability\n  - Fixed button click issues that caused blank pages in production environments\n  - Improved data validation and fallback mechanisms for better user experience\n  - Application now runs cleanly on Replit with full functionality restored\n\n### Daily Order Tracking Enhancement (August 22, 2025)\n- ‚úÖ **Delivery Person Daily Order Counter Implementation**\n  - Added getDailyOrderCount method to both PostgreSQL and in-memory storage implementations\n  - Enhanced /api/pharmacien/delivery-personnel endpoint to include daily order counts\n  - Modified pharmacy dashboard delivery person selection dropdown to display daily order count\n  - Visual indicator shows \"X cmd/jour\" badge for each delivery person showing today's assigned orders\n  - Counts orders based on assignedAt timestamp for accurate daily tracking\n  - Helps pharmacists make informed decisions for balanced workload distribution\n\n### Delivery Dashboard Bug Fix (August 22, 2025)\n- ‚úÖ **Fixed Missing Orders in Delivery Person Dashboard**\n  - Root cause: Dashboard was calling `/api/livreur/deliveries` but server only had `/api/orders/my-assigned`\n  - Added missing API routes: `/api/livreur/orders`, `/api/livreur/deliveries`, `/api/livreur/deliveries/{id}/accept`, `/api/livreur/deliveries/{id}/reject`\n  - All routes properly validate livreur role and session authentication\n  - Orders assigned to delivery personnel now correctly appear in their dashboard\n  - Fixed the complete flow: pharmacist assigns ‚Üí delivery person sees order ‚Üí can accept/reject\n  - Ensures proper error handling with clear French error messages","size_bytes":8225},"start.sh":{"content":"#!/bin/bash\n\n# Script de d√©marrage pour production\nset -e\n\necho \"üöÄ Starting Pharma Express CI in production mode...\"\n\n# V√©rifier les variables d'environnement critiques\nif [ -z \"$DATABASE_URL\" ]; then\n    echo \"‚ùå Error: DATABASE_URL environment variable is required\"\n    exit 1\nfi\n\nif [ -z \"$SESSION_SECRET\" ]; then\n    echo \"‚ö†Ô∏è  Warning: SESSION_SECRET not set, using default (not recommended for production)\"\nfi\n\n# V√©rifier que les fichiers de build existent\nif [ ! -d \"dist\" ]; then\n    echo \"‚ùå Error: dist directory not found. Please run build first.\"\n    exit 1\nfi\n\necho \"‚úÖ Environment check passed\"\necho \"üåê Starting server...\"\n\n# D√©marrer l'application\nexec node dist/index.js","size_bytes":702},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test-build.sh":{"content":"#!/bin/bash\n\n# Script de test du build local\necho \"üß™ Test du build local pour validation avant d√©ploiement Render...\"\n\n# Nettoyer les anciens builds\nrm -rf dist dist-client\n\n# Installer les d√©pendances\necho \"üì¶ Installation des d√©pendances...\"\nnpm install\n\n# Build de l'application\necho \"üèóÔ∏è Build de l'application...\"\nnpm run build\n\n# V√©rifier que les artifacts existent\nif [ -d \"dist\" ] && [ -f \"dist/index.js\" ]; then\n    echo \"‚úÖ Build r√©ussi ! Les fichiers de build sont pr√©sents.\"\n    echo \"üìÅ Contenu du build :\"\n    ls -la dist/\n    echo \"\"\n    echo \"üöÄ Votre application est pr√™te pour le d√©ploiement Render !\"\nelse\n    echo \"‚ùå Erreur : Build incomplet. V√©rifiez les logs ci-dessus.\"\n    exit 1\nfi","size_bytes":731},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"migrations/relations.ts":{"content":"import { relations } from \"drizzle-orm/relations\";\nimport { users, orders, pharmacies, prescriptions, notifications } from \"./schema\";\n\nexport const ordersRelations = relations(orders, ({one, many}) => ({\n\tuser: one(users, {\n\t\tfields: [orders.userId],\n\t\treferences: [users.id]\n\t}),\n\tpharmacy: one(pharmacies, {\n\t\tfields: [orders.pharmacyId],\n\t\treferences: [pharmacies.id]\n\t}),\n\tprescription: one(prescriptions, {\n\t\tfields: [orders.prescriptionId],\n\t\treferences: [prescriptions.id]\n\t}),\n\tnotifications: many(notifications),\n}));\n\nexport const usersRelations = relations(users, ({one, many}) => ({\n\torders: many(orders),\n\tpharmacy: one(pharmacies, {\n\t\tfields: [users.pharmacyId],\n\t\treferences: [pharmacies.id]\n\t}),\n\tnotifications: many(notifications),\n\tprescriptions: many(prescriptions),\n}));\n\nexport const pharmaciesRelations = relations(pharmacies, ({many}) => ({\n\torders: many(orders),\n\tusers: many(users),\n}));\n\nexport const prescriptionsRelations = relations(prescriptions, ({one, many}) => ({\n\torders: many(orders),\n\tuser: one(users, {\n\t\tfields: [prescriptions.userId],\n\t\treferences: [users.id]\n\t}),\n}));\n\nexport const notificationsRelations = relations(notifications, ({one}) => ({\n\tuser: one(users, {\n\t\tfields: [notifications.userId],\n\t\treferences: [users.id]\n\t}),\n\torder: one(orders, {\n\t\tfields: [notifications.orderId],\n\t\treferences: [orders.id]\n\t}),\n}));","size_bytes":1364},"migrations/schema.ts":{"content":"import { pgTable, varchar, text, numeric, boolean, timestamp, foreignKey, jsonb, unique } from \"drizzle-orm/pg-core\"\nimport { sql } from \"drizzle-orm\"\n\n\n\nexport const deliveryPersons = pgTable(\"delivery_persons\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tname: text().notNull(),\n\tphone: varchar().notNull(),\n\tcurrentLatitude: numeric(\"current_latitude\", { precision: 10, scale:  8 }),\n\tcurrentLongitude: numeric(\"current_longitude\", { precision: 11, scale:  8 }),\n\tisAvailable: boolean(\"is_available\").default(true),\n\trating: numeric({ precision: 2, scale:  1 }).default('5.0'),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tuserId: varchar(\"user_id\").notNull(),\n\tpharmacyId: varchar(\"pharmacy_id\").notNull(),\n\tprescriptionId: varchar(\"prescription_id\"),\n\tstatus: varchar().default('pending'),\n\ttotalAmount: numeric(\"total_amount\", { precision: 10, scale:  2 }),\n\tdeliveryAddress: text(\"delivery_address\").notNull(),\n\tdeliveryNotes: text(\"delivery_notes\"),\n\testimatedDelivery: timestamp(\"estimated_delivery\", { mode: 'string' }),\n\tdeliveredAt: timestamp(\"delivered_at\", { mode: 'string' }),\n\tdeliveryPersonId: varchar(\"delivery_person_id\"),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n\tmedications: jsonb(),\n\tbonDocuments: text(\"bon_documents\"),\n\tdeliveryLatitude: numeric(\"delivery_latitude\", { precision: 10, scale:  8 }),\n\tdeliveryLongitude: numeric(\"delivery_longitude\", { precision: 11, scale:  8 }),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.userId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"orders_user_id_users_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.pharmacyId],\n\t\t\tforeignColumns: [pharmacies.id],\n\t\t\tname: \"orders_pharmacy_id_pharmacies_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.prescriptionId],\n\t\t\tforeignColumns: [prescriptions.id],\n\t\t\tname: \"orders_prescription_id_prescriptions_id_fk\"\n\t\t}),\n]);\n\nexport const users = pgTable(\"users\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tfirstName: varchar(\"first_name\").notNull(),\n\tlastName: varchar(\"last_name\").notNull(),\n\tphone: varchar().notNull(),\n\taddress: varchar().notNull(),\n\tpassword: varchar().notNull(),\n\trole: varchar().default('patient').notNull(),\n\tlanguage: varchar().default('fr'),\n\tprofileImageUrl: text(\"profile_image_url\"),\n\tpharmacyId: varchar(\"pharmacy_id\"),\n\tisActive: boolean(\"is_active\").default(true),\n\tidDocumentUrl: text(\"id_document_url\"),\n\tprofessionalDocumentUrl: text(\"professional_document_url\"),\n\tdrivingLicenseUrl: text(\"driving_license_url\"),\n\tverificationStatus: varchar(\"verification_status\").default('pending'),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.pharmacyId],\n\t\t\tforeignColumns: [pharmacies.id],\n\t\t\tname: \"users_pharmacy_id_pharmacies_id_fk\"\n\t\t}),\n\tunique(\"users_phone_unique\").on(table.phone),\n]);\n\nexport const notifications = pgTable(\"notifications\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tuserId: varchar(\"user_id\").notNull(),\n\ttitle: text().notNull(),\n\tbody: text().notNull(),\n\ttype: varchar().notNull(),\n\torderId: varchar(\"order_id\"),\n\tisRead: boolean(\"is_read\").default(false),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.userId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"notifications_user_id_users_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.orderId],\n\t\t\tforeignColumns: [orders.id],\n\t\t\tname: \"notifications_order_id_orders_id_fk\"\n\t\t}),\n]);\n\nexport const pharmacies = pgTable(\"pharmacies\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tname: text().notNull(),\n\taddress: text().notNull(),\n\tlatitude: numeric({ precision: 10, scale:  8 }),\n\tlongitude: numeric({ precision: 11, scale:  8 }),\n\tphone: varchar(),\n\trating: numeric({ precision: 2, scale:  1 }).default('0.0'),\n\tdeliveryTime: varchar(\"delivery_time\").default('30'),\n\tisOpen: boolean(\"is_open\").default(true),\n\topeningHours: jsonb(\"opening_hours\"),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const prescriptions = pgTable(\"prescriptions\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tuserId: varchar(\"user_id\").notNull(),\n\timageUrl: text(\"image_url\").notNull(),\n\tstatus: varchar().default('pending'),\n\tmedications: jsonb(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.userId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"prescriptions_user_id_users_id_fk\"\n\t\t}),\n]);\n","size_bytes":4850},"scripts/backup-schema.js":{"content":"#!/usr/bin/env node\n\n/**\n * Script de sauvegarde automatique du sch√©ma de base de donn√©es\n * G√©n√®re un fichier SQL avec la structure compl√®te et les donn√©es essentielles\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst LOG_PREFIX = 'üíæ [DB-Backup]';\n\n/**\n * G√©n√®re le script SQL de sauvegarde du sch√©ma complet\n */\nasync function generateSchemaBackup() {\n  const timestamp = new Date().toISOString().split('T')[0];\n  const backupPath = path.join(process.cwd(), 'backup', `schema-backup-${timestamp}.sql`);\n  \n  // Assurer que le dossier backup existe\n  await fs.mkdir(path.dirname(backupPath), { recursive: true });\n  \n  const sqlContent = `-- =====================================================\n-- PHARMA EXPRESS CI - SCHEMA BACKUP\n-- Date: ${new Date().toLocaleString('fr-FR')}\n-- Version: 1.0.0\n-- =====================================================\n\n-- Suppression des tables existantes (si elles existent)\nDROP TABLE IF EXISTS notifications CASCADE;\nDROP TABLE IF EXISTS orders CASCADE;\nDROP TABLE IF EXISTS prescriptions CASCADE;\nDROP TABLE IF EXISTS pharmacies CASCADE;\nDROP TABLE IF EXISTS users CASCADE;\n\n-- =====================================================\n-- TABLE: users\n-- =====================================================\nCREATE TABLE users (\n    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n    firstName VARCHAR NOT NULL,\n    lastName VARCHAR NOT NULL,\n    phone VARCHAR UNIQUE NOT NULL,\n    address VARCHAR NOT NULL,\n    password VARCHAR NOT NULL,\n    role VARCHAR DEFAULT 'patient',\n    language VARCHAR(2) DEFAULT 'fr',\n    profileImageUrl VARCHAR,\n    createdAt TIMESTAMP DEFAULT NOW(),\n    updatedAt TIMESTAMP DEFAULT NOW(),\n    isActive BOOLEAN DEFAULT true,\n    verificationStatus VARCHAR DEFAULT 'pending',\n    deliveryApplicationStatus VARCHAR DEFAULT 'none',\n    pharmacyId VARCHAR,\n    appliedPharmacyId VARCHAR,\n    motivationLetter TEXT,\n    experience TEXT,\n    availability TEXT\n);\n\n-- =====================================================\n-- TABLE: pharmacies\n-- =====================================================\nCREATE TABLE pharmacies (\n    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n    name VARCHAR NOT NULL,\n    phone VARCHAR,\n    address VARCHAR NOT NULL,\n    latitude VARCHAR,\n    longitude VARCHAR,\n    rating VARCHAR,\n    reviewCount VARCHAR,\n    deliveryTime VARCHAR,\n    isOpen BOOLEAN DEFAULT true,\n    isEmergency24h BOOLEAN DEFAULT false,\n    createdAt TIMESTAMP DEFAULT NOW(),\n    updatedAt TIMESTAMP DEFAULT NOW()\n);\n\n-- =====================================================\n-- TABLE: prescriptions\n-- =====================================================\nCREATE TABLE prescriptions (\n    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n    createdAt TIMESTAMP DEFAULT NOW(),\n    status VARCHAR DEFAULT 'pending',\n    userId VARCHAR NOT NULL REFERENCES users(id),\n    imageUrl VARCHAR NOT NULL,\n    medications JSONB DEFAULT '[]'\n);\n\n-- =====================================================\n-- TABLE: orders\n-- =====================================================\nCREATE TABLE orders (\n    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n    createdAt TIMESTAMP DEFAULT NOW(),\n    updatedAt TIMESTAMP DEFAULT NOW(),\n    pharmacyId VARCHAR NOT NULL REFERENCES pharmacies(id),\n    status VARCHAR DEFAULT 'pending',\n    userId VARCHAR NOT NULL REFERENCES users(id),\n    medications JSONB DEFAULT '[]',\n    prescriptionId VARCHAR REFERENCES prescriptions(id),\n    totalAmount VARCHAR,\n    deliveryAddress VARCHAR,\n    deliveryLatitude VARCHAR,\n    deliveryLongitude VARCHAR,\n    deliveryNotes TEXT,\n    bonDocuments JSONB DEFAULT '[]',\n    estimatedDelivery TIMESTAMP,\n    deliveredAt TIMESTAMP,\n    deliveryPersonId VARCHAR REFERENCES users(id)\n);\n\n-- =====================================================\n-- TABLE: notifications\n-- =====================================================\nCREATE TABLE notifications (\n    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n    createdAt TIMESTAMP DEFAULT NOW(),\n    type VARCHAR NOT NULL,\n    userId VARCHAR NOT NULL REFERENCES users(id),\n    title VARCHAR NOT NULL,\n    body VARCHAR NOT NULL,\n    orderId VARCHAR REFERENCES orders(id),\n    isRead BOOLEAN DEFAULT false\n);\n\n-- =====================================================\n-- INDEX POUR PERFORMANCES\n-- =====================================================\nCREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone);\nCREATE INDEX IF NOT EXISTS idx_users_role ON users(role);\nCREATE INDEX IF NOT EXISTS idx_users_pharmacy_id ON users(pharmacyId);\nCREATE INDEX IF NOT EXISTS idx_users_verification_status ON users(verificationStatus);\nCREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(userId);\nCREATE INDEX IF NOT EXISTS idx_orders_pharmacy_id ON orders(pharmacyId);\nCREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);\nCREATE INDEX IF NOT EXISTS idx_orders_delivery_person ON orders(deliveryPersonId);\nCREATE INDEX IF NOT EXISTS idx_prescriptions_user_id ON prescriptions(userId);\nCREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(userId);\n\n-- =====================================================\n-- DONN√âES DE BASE ESSENTIELLES\n-- =====================================================\n\n-- Admin principal du syst√®me\nINSERT INTO users (\n    firstName, lastName, phone, address, password, role, \n    language, isActive, verificationStatus\n) VALUES (\n    'Admin', 'YahoPharma', '+225 01 23 45 67', \n    'Si√®ge YahoPharma, Abidjan', \n    '$2b$10$rVl.E8rV7mGdXJZQx8QcX.HQCqJC2HQY2Y2GqcJqXc5J5QcX8QcX.', \n    'admin', 'fr', true, 'approved'\n) ON CONFLICT (phone) DO NOTHING;\n\n-- Pharmacien de test 1\nINSERT INTO users (\n    firstName, lastName, phone, address, password, role, \n    language, isActive, verificationStatus, pharmacyId\n) VALUES (\n    'Dr. Marie', 'Kouassi', '+225 07 11 22 33', \n    'Pharmacie de la Paix, Abidjan', \n    '$2b$10$rVl.E8rV7mGdXJZQx8QcX.HQCqJC2HQY2Y2GqcJqXc5J5QcX8QcX.', \n    'pharmacien', 'fr', true, 'approved', \n    (SELECT id FROM pharmacies WHERE phone = '+225 07 11 22 33' LIMIT 1)\n) ON CONFLICT (phone) DO NOTHING;\n\n-- Pharmacien de test 2\nINSERT INTO users (\n    firstName, lastName, phone, address, password, role, \n    language, isActive, verificationStatus, pharmacyId\n) VALUES (\n    'Dr. Adjoua', 'Bamba', '+225 05 44 33 22', \n    'Pharmacie Centrale Plus, Marcory', \n    '$2b$10$rVl.E8rV7mGdXJZQx8QcX.HQCqJC2HQY2Y2GqcJqXc5J5QcX8QcX.', \n    'pharmacien', 'fr', true, 'approved',\n    (SELECT id FROM pharmacies WHERE phone = '+225 05 44 33 22' LIMIT 1)\n) ON CONFLICT (phone) DO NOTHING;\n\n-- Pharmacies de test\nINSERT INTO pharmacies (\n    name, address, latitude, longitude, phone, rating, \n    deliveryTime, isOpen\n) VALUES \n(\n    'Pharmacie Dr. Marie Kouassi', 'Quartier Riviera Golf, Cocody', \n    '5.3364', '-4.0267', '+225 07 11 22 33', '4.8', '25', true\n),\n(\n    'Pharmacie de la Paix', 'Boulevard de la Paix, Cocody', \n    '5.3364', '-4.0267', '+225 05 44 33 22', '4.7', '30', true\n),\n(\n    'Pharmacie Centrale Plus', 'Zone commerciale Marcory', \n    '5.2886', '-3.9986', '+225 07 88 99 00', '4.6', '20', true\n)\nON CONFLICT (phone) DO NOTHING;\n\n-- Livreurs de test\nINSERT INTO users (\n    firstName, lastName, phone, address, password, role, \n    language, isActive, verificationStatus, deliveryApplicationStatus, pharmacyId\n) VALUES \n(\n    'Jean-Claude', 'Koffi', '+225 07 44 55 66', \n    'Zone livraison Abidjan', \n    '$2b$10$rVl.E8rV7mGdXJZQx8QcX.HQCqJC2HQY2Y2GqcJqXc5J5QcX8QcX.', \n    'livreur', 'fr', true, 'approved', 'approved',\n    (SELECT id FROM pharmacies WHERE phone = '+225 07 11 22 33' LIMIT 1)\n),\n(\n    'Aya', 'Traore', '+225 05 77 88 99', \n    'Marcory, Abidjan', \n    '$2b$10$rVl.E8rV7mGdXJZQx8QcX.HQCqJC2HQY2Y2GqcJqXc5J5QcX8QcX.', \n    'livreur', 'fr', true, 'approved', 'approved',\n    (SELECT id FROM pharmacies WHERE phone = '+225 05 44 33 22' LIMIT 1)\n)\nON CONFLICT (phone) DO NOTHING;\n\n-- Patient de test\nINSERT INTO users (\n    firstName, lastName, phone, address, password, role, \n    language, isActive, verificationStatus\n) VALUES (\n    'Konan', 'Akissi', '+225 01 11 22 33', \n    'Cocody, Abidjan', \n    '$2b$10$rVl.E8rV7mGdXJZQx8QcX.HQCqJC2HQY2Y2GqcJqXc5J5QcX8QcX.', \n    'patient', 'fr', true, 'approved'\n) ON CONFLICT (phone) DO NOTHING;\n\n-- =====================================================\n-- SCRIPT TERMIN√â AVEC SUCC√àS\n-- =====================================================\nCOMMENT ON DATABASE CURRENT_DATABASE() IS 'Pharma Express CI - Base de donn√©es restaur√©e le ${new Date().toLocaleString('fr-FR')}';\n\nSELECT \n    'Database schema restored successfully!' as status,\n    COUNT(*) as total_users \nFROM users;\n`;\n\n  await fs.writeFile(backupPath, sqlContent);\n  console.log(`${LOG_PREFIX} ‚úÖ Sauvegarde du sch√©ma cr√©√©e: ${backupPath}`);\n  \n  return backupPath;\n}\n\n/**\n * Cr√©e un script de restauration rapide\n */\nasync function createRestoreScript() {\n  const restoreScriptPath = path.join(process.cwd(), 'scripts', 'restore-database.sh');\n  \n  const scriptContent = `#!/bin/bash\n\n# =====================================================\n# PHARMA EXPRESS CI - SCRIPT DE RESTAURATION RAPIDE\n# =====================================================\n\nset -e\n\nLOG_PREFIX=\"üîß [DB-Restore]\"\n\necho \"$LOG_PREFIX üöÄ D√©but de la restauration de la base de donn√©es\"\n\n# V√©rifier que DATABASE_URL est configur√©e\nif [ -z \"$DATABASE_URL\" ]; then\n    echo \"$LOG_PREFIX ‚ùå Variable DATABASE_URL manquante\"\n    echo \"$LOG_PREFIX üí° Configurez DATABASE_URL dans les secrets Replit\"\n    exit 1\nfi\n\necho \"$LOG_PREFIX ‚úÖ DATABASE_URL configur√©e\"\n\n# Trouver le fichier de sauvegarde le plus r√©cent\nBACKUP_FILE=$(ls -t backup/schema-backup-*.sql 2>/dev/null | head -1)\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"$LOG_PREFIX ‚ö†Ô∏è Aucun fichier de sauvegarde trouv√©\"\n    echo \"$LOG_PREFIX üîÑ G√©n√©ration d'une nouvelle sauvegarde...\"\n    node scripts/backup-schema.js\n    BACKUP_FILE=$(ls -t backup/schema-backup-*.sql 2>/dev/null | head -1)\nfi\n\nif [ -n \"$BACKUP_FILE\" ]; then\n    echo \"$LOG_PREFIX üìÇ Utilisation de la sauvegarde: $BACKUP_FILE\"\n    echo \"$LOG_PREFIX üóÉÔ∏è Restauration en cours...\"\n    \n    # Ex√©cuter le script SQL de restauration\n    psql \"$DATABASE_URL\" -f \"$BACKUP_FILE\"\n    \n    echo \"$LOG_PREFIX ‚úÖ Base de donn√©es restaur√©e avec succ√®s !\"\nelse\n    echo \"$LOG_PREFIX ‚ùå Impossible de trouver un fichier de sauvegarde\"\n    exit 1\nfi\n\n# Ex√©cuter les migrations Drizzle pour synchroniser\necho \"$LOG_PREFIX üîÑ Synchronisation avec Drizzle...\"\nnpx drizzle-kit push\n\necho \"$LOG_PREFIX üéâ Restauration termin√©e avec succ√®s !\"\necho \"$LOG_PREFIX üí° Votre base de donn√©es est maintenant op√©rationnelle\"\n`;\n\n  await fs.writeFile(restoreScriptPath, scriptContent);\n  await fs.chmod(restoreScriptPath, '755'); // Rendre ex√©cutable\n  \n  console.log(`${LOG_PREFIX} ‚úÖ Script de restauration cr√©√©: ${restoreScriptPath}`);\n  \n  return restoreScriptPath;\n}\n\n/**\n * Fonction principale de sauvegarde\n */\nasync function createBackup() {\n  console.log(`${LOG_PREFIX} üöÄ Cr√©ation de la sauvegarde du sch√©ma`);\n  \n  try {\n    await generateSchemaBackup();\n    await createRestoreScript();\n    \n    console.log(`${LOG_PREFIX} üéâ Sauvegarde cr√©√©e avec succ√®s !`);\n    console.log(`${LOG_PREFIX} üí° Utilisez 'npm run db:restore' pour restaurer la base de donn√©es`);\n    \n  } catch (error) {\n    console.error(`${LOG_PREFIX} ‚ùå Erreur lors de la sauvegarde:`, error.message);\n    process.exit(1);\n  }\n}\n\n// Ex√©cution du script si appel√© directement\nif (import.meta.url === `file://${process.argv[1]}`) {\n  createBackup();\n}\n\nexport { generateSchemaBackup, createRestoreScript, createBackup };","size_bytes":11665},"scripts/database-guard.js":{"content":"#!/usr/bin/env node\n\n/**\n * PHARMA EXPRESS CI - GARDE DE S√âCURIT√â BASE DE DONN√âES\n * \n * Ce script s'assure que l'application utilise TOUJOURS PostgreSQL\n * au lieu du stockage en m√©moire, m√™me apr√®s des red√©marrages.\n * \n * Il s'ex√©cute automatiquement au d√©marrage de l'application.\n */\n\nimport { spawn } from 'child_process';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst LOG_PREFIX = 'üõ°Ô∏è [DB-Guard]';\n\n/**\n * V√©rifie la configuration de la base de donn√©es\n */\nasync function checkDatabaseConfig() {\n  console.log(`${LOG_PREFIX} V√©rification de la configuration de base de donn√©es`);\n  \n  const dbUrl = process.env.DATABASE_URL;\n  \n  if (!dbUrl || dbUrl.trim() === '') {\n    console.error(`${LOG_PREFIX} ‚ùå ERREUR CRITIQUE: DATABASE_URL manquante !`);\n    console.error(`${LOG_PREFIX} üö® L'application va utiliser le stockage en m√©moire`);\n    console.error(`${LOG_PREFIX} üí° Configurez DATABASE_URL dans les secrets Replit`);\n    \n    // Cr√©er un fichier d'alerte\n    await createDatabaseAlert();\n    return false;\n  }\n  \n  console.log(`${LOG_PREFIX} ‚úÖ DATABASE_URL configur√©e correctement`);\n  return true;\n}\n\n/**\n * Teste la connexion √† la base de donn√©es\n */\nasync function testDatabaseConnection() {\n  try {\n    console.log(`${LOG_PREFIX} üîå Test de connexion √† PostgreSQL...`);\n    \n    const { db } = await import('../server/db.js');\n    await db.execute('SELECT 1 as test');\n    \n    console.log(`${LOG_PREFIX} ‚úÖ Connexion PostgreSQL r√©ussie`);\n    return true;\n  } catch (error) {\n    console.error(`${LOG_PREFIX} ‚ùå √âchec de connexion PostgreSQL:`, error.message);\n    return false;\n  }\n}\n\n/**\n * V√©rifie que le stockage PostgreSQL est actif\n */\nasync function verifyPostgresStorage() {\n  try {\n    console.log(`${LOG_PREFIX} üóÉÔ∏è V√©rification du type de stockage actif...`);\n    \n    const { createStorage } = await import('../server/storage-factory.js');\n    const storage = createStorage();\n    \n    // Test simple pour v√©rifier le type de stockage\n    if (storage.constructor.name === 'PostgresStorage') {\n      console.log(`${LOG_PREFIX} ‚úÖ PostgreSQL Storage activ√©`);\n      return true;\n    } else {\n      console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Stockage en m√©moire d√©tect√©: ${storage.constructor.name}`);\n      return false;\n    }\n  } catch (error) {\n    console.error(`${LOG_PREFIX} ‚ùå Erreur v√©rification stockage:`, error.message);\n    return false;\n  }\n}\n\n/**\n * Cr√©e un fichier d'alerte visible\n */\nasync function createDatabaseAlert() {\n  const alertPath = path.join(process.cwd(), 'DATABASE_ALERT.txt');\n  \n  const alertContent = `\n‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ALERTE CONFIGURATION BASE DE DONN√âES ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è\n\nDATE: ${new Date().toLocaleString('fr-FR')}\n\nPROBL√àME D√âTECT√â:\nL'application utilise actuellement le STOCKAGE EN M√âMOIRE au lieu de PostgreSQL.\n\nCAUSE:\nLa variable DATABASE_URL n'est pas configur√©e ou est vide.\n\nCONS√âQUENCES:\n‚ùå Toutes les donn√©es seront perdues au red√©marrage\n‚ùå Les pharmacies et livreurs ne seront pas visibles\n‚ùå Aucune persistance des commandes\n\nSOLUTION:\n1. Allez dans les secrets Replit\n2. Configurez la variable DATABASE_URL avec votre base Neon\n3. Red√©marrez l'application\n\nFORMAT DATABASE_URL:\npostgresql://username:password@host:port/database\n\nPour supprimer cette alerte:\nrm DATABASE_ALERT.txt\n\n‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è\n`;\n  \n  await fs.writeFile(alertPath, alertContent);\n  console.log(`${LOG_PREFIX} üö® Fichier d'alerte cr√©√©: DATABASE_ALERT.txt`);\n}\n\n/**\n * Supprime le fichier d'alerte si tout va bien\n */\nasync function removeAlertIfExists() {\n  const alertPath = path.join(process.cwd(), 'DATABASE_ALERT.txt');\n  \n  try {\n    await fs.access(alertPath);\n    await fs.unlink(alertPath);\n    console.log(`${LOG_PREFIX} üßπ Fichier d'alerte supprim√© (configuration OK)`);\n  } catch (error) {\n    // Fichier n'existe pas, c'est normal\n  }\n}\n\n/**\n * Sauvegarde automatique du statut\n */\nasync function saveStatus(isHealthy) {\n  const statusPath = path.join(process.cwd(), '.database-status.json');\n  \n  const status = {\n    timestamp: new Date().toISOString(),\n    isHealthy,\n    databaseUrl: process.env.DATABASE_URL ? 'configured' : 'missing',\n    lastCheck: new Date().toLocaleString('fr-FR')\n  };\n  \n  await fs.writeFile(statusPath, JSON.stringify(status, null, 2));\n}\n\n/**\n * Fonction principale de v√©rification\n */\nasync function guardDatabase() {\n  console.log(`${LOG_PREFIX} üöÄ D√©marrage de la garde de base de donn√©es`);\n  console.log(`${LOG_PREFIX} üìÖ ${new Date().toLocaleString('fr-FR')}`);\n  \n  let isHealthy = true;\n  \n  // 1. V√©rifier DATABASE_URL\n  if (!await checkDatabaseConfig()) {\n    isHealthy = false;\n  }\n  \n  // 2. Tester la connexion\n  if (isHealthy && !await testDatabaseConnection()) {\n    isHealthy = false;\n  }\n  \n  // 3. V√©rifier le type de stockage\n  if (isHealthy && !await verifyPostgresStorage()) {\n    isHealthy = false;\n  }\n  \n  // 4. Actions selon le r√©sultat\n  if (isHealthy) {\n    console.log(`${LOG_PREFIX} üéâ Base de donn√©es PostgreSQL op√©rationnelle !`);\n    await removeAlertIfExists();\n  } else {\n    console.error(`${LOG_PREFIX} üíî Probl√®me de configuration d√©tect√©`);\n    await createDatabaseAlert();\n  }\n  \n  // 5. Sauvegarder le statut\n  await saveStatus(isHealthy);\n  \n  console.log(`${LOG_PREFIX} ‚úÖ V√©rification termin√©e`);\n  return isHealthy;\n}\n\n// Ex√©cution automatique si appel√© directement\nif (import.meta.url === `file://${process.argv[1]}`) {\n  guardDatabase().then(success => {\n    process.exit(success ? 0 : 1);\n  });\n}\n\nexport { guardDatabase, checkDatabaseConfig, testDatabaseConnection };","size_bytes":5705},"scripts/restore-database.sh":{"content":"#!/bin/bash\n\n# =====================================================\n# PHARMA EXPRESS CI - SCRIPT DE RESTAURATION RAPIDE\n# =====================================================\n\nset -e\n\nLOG_PREFIX=\"üîß [DB-Restore]\"\n\necho \"$LOG_PREFIX üöÄ D√©but de la restauration de la base de donn√©es\"\n\n# V√©rifier que DATABASE_URL est configur√©e\nif [ -z \"$DATABASE_URL\" ]; then\n    echo \"$LOG_PREFIX ‚ùå Variable DATABASE_URL manquante\"\n    echo \"$LOG_PREFIX üí° Configurez DATABASE_URL dans les secrets Replit\"\n    exit 1\nfi\n\necho \"$LOG_PREFIX ‚úÖ DATABASE_URL configur√©e\"\n\n# Trouver le fichier de sauvegarde le plus r√©cent\nBACKUP_FILE=$(ls -t backup/schema-backup-*.sql 2>/dev/null | head -1)\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"$LOG_PREFIX ‚ö†Ô∏è Aucun fichier de sauvegarde trouv√©\"\n    echo \"$LOG_PREFIX üîÑ G√©n√©ration d'une nouvelle sauvegarde...\"\n    node scripts/backup-schema.js\n    BACKUP_FILE=$(ls -t backup/schema-backup-*.sql 2>/dev/null | head -1)\nfi\n\nif [ -n \"$BACKUP_FILE\" ]; then\n    echo \"$LOG_PREFIX üìÇ Utilisation de la sauvegarde: $BACKUP_FILE\"\n    echo \"$LOG_PREFIX üóÉÔ∏è Restauration en cours...\"\n    \n    # Ex√©cuter le script SQL de restauration\n    psql \"$DATABASE_URL\" -f \"$BACKUP_FILE\"\n    \n    echo \"$LOG_PREFIX ‚úÖ Base de donn√©es restaur√©e avec succ√®s !\"\nelse\n    echo \"$LOG_PREFIX ‚ùå Impossible de trouver un fichier de sauvegarde\"\n    exit 1\nfi\n\n# Ex√©cuter les migrations Drizzle pour synchroniser\necho \"$LOG_PREFIX üîÑ Synchronisation avec Drizzle...\"\nnpx drizzle-kit push\n\necho \"$LOG_PREFIX üéâ Restauration termin√©e avec succ√®s !\"\necho \"$LOG_PREFIX üí° Votre base de donn√©es est maintenant op√©rationnelle\"\n","size_bytes":1661},"scripts/setup-database.js":{"content":"#!/usr/bin/env node\n\n/**\n * Script de configuration automatique de la base de donn√©es PostgreSQL\n * Recr√©e automatiquement le sch√©ma et les donn√©es de base si n√©cessaire\n */\n\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nconst LOG_PREFIX = 'üóÑÔ∏è [DB-Setup]';\n\n// Configuration de la base de donn√©es par d√©faut\nconst DB_CONFIG = {\n  name: 'pharma_express_ci',\n  description: 'Base de donn√©es principale pour Pharma Express CI',\n  version: '1.0.0',\n  lastUpdate: new Date().toISOString()\n};\n\n/**\n * V√©rifie si la variable DATABASE_URL est configur√©e\n */\nfunction checkDatabaseUrl() {\n  const dbUrl = process.env.DATABASE_URL;\n  if (!dbUrl) {\n    console.error(`${LOG_PREFIX} ‚ùå Variable DATABASE_URL manquante`);\n    console.error(`${LOG_PREFIX} üí° Configurez DATABASE_URL dans les secrets Replit`);\n    process.exit(1);\n  }\n  console.log(`${LOG_PREFIX} ‚úÖ DATABASE_URL configur√©e`);\n  return dbUrl;\n}\n\n/**\n * Ex√©cute les migrations Drizzle pour cr√©er/mettre √† jour le sch√©ma\n */\nasync function runMigrations() {\n  try {\n    console.log(`${LOG_PREFIX} üìã Ex√©cution des migrations Drizzle...`);\n    \n    // Utilise drizzle-kit pour pousser le sch√©ma vers la base de donn√©es\n    const { stdout, stderr } = await execAsync('npx drizzle-kit push');\n    \n    if (stderr && !stderr.includes('Warning')) {\n      console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Avertissements migrations:`, stderr);\n    }\n    \n    console.log(`${LOG_PREFIX} ‚úÖ Migrations ex√©cut√©es avec succ√®s`);\n    console.log(stdout);\n    \n    return true;\n  } catch (error) {\n    console.error(`${LOG_PREFIX} ‚ùå Erreur lors des migrations:`, error.message);\n    \n    // Si les migrations √©chouent, essaie de cr√©er les tables manuellement\n    console.log(`${LOG_PREFIX} üîÑ Tentative de cr√©ation manuelle des tables...`);\n    return await createTablesManually();\n  }\n}\n\n/**\n * Cr√©e les tables manuellement si les migrations Drizzle √©chouent\n */\nasync function createTablesManually() {\n  try {\n    // Import du module db pour ex√©cuter du SQL brut si n√©cessaire\n    const { db } = await import('../server/db.js');\n    \n    console.log(`${LOG_PREFIX} ‚úÖ Connexion √† la base de donn√©es √©tablie`);\n    \n    // Les tables seront cr√©√©es automatiquement par Drizzle ORM lors de la premi√®re utilisation\n    // Si n√©cessaire, on peut ajouter ici du SQL brut pour forcer la cr√©ation\n    \n    return true;\n  } catch (error) {\n    console.error(`${LOG_PREFIX} ‚ùå Impossible de cr√©er les tables:`, error.message);\n    return false;\n  }\n}\n\n/**\n * V√©rifie si la base de donn√©es contient des donn√©es\n */\nasync function checkExistingData() {\n  try {\n    const { db } = await import('../server/db.js');\n    const { users } = await import('../shared/schema.js');\n    \n    // V√©rifie s'il y a des utilisateurs dans la base\n    const userCount = await db.select().from(users);\n    \n    console.log(`${LOG_PREFIX} üìä ${userCount.length} utilisateurs trouv√©s dans la base`);\n    \n    return userCount.length > 0;\n  } catch (error) {\n    console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Impossible de v√©rifier les donn√©es existantes:`, error.message);\n    return false;\n  }\n}\n\n/**\n * Initialise les donn√©es de base (admin, pharmacies de test, etc.)\n */\nasync function seedDatabase() {\n  try {\n    console.log(`${LOG_PREFIX} üå± Initialisation des donn√©es de base...`);\n    \n    // Import de la classe PostgresStorage qui contient la logique de seed\n    const { PostgresStorage } = await import('../server/postgres-storage.js');\n    \n    // Cr√©er une instance et d√©clencher le seed\n    const storage = new PostgresStorage();\n    \n    // Attendre un peu pour que le seed se termine\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    console.log(`${LOG_PREFIX} ‚úÖ Donn√©es de base initialis√©es`);\n    return true;\n  } catch (error) {\n    console.error(`${LOG_PREFIX} ‚ùå Erreur lors du seed:`, error.message);\n    return false;\n  }\n}\n\n/**\n * Sauvegarde la configuration actuelle\n */\nasync function saveConfiguration() {\n  try {\n    const configPath = path.join(process.cwd(), '.database-config.json');\n    \n    const config = {\n      ...DB_CONFIG,\n      setupDate: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development',\n      databaseUrl: process.env.DATABASE_URL ? 'configured' : 'missing'\n    };\n    \n    await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n    console.log(`${LOG_PREFIX} üíæ Configuration sauvegard√©e dans .database-config.json`);\n  } catch (error) {\n    console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Impossible de sauvegarder la configuration:`, error.message);\n  }\n}\n\n/**\n * Fonction principale d'installation de la base de donn√©es\n */\nasync function setupDatabase() {\n  console.log(`${LOG_PREFIX} üöÄ D√©but de la configuration automatique de la base de donn√©es`);\n  console.log(`${LOG_PREFIX} üìÖ ${new Date().toLocaleString('fr-FR')}`);\n  \n  try {\n    // 1. V√©rifier DATABASE_URL\n    checkDatabaseUrl();\n    \n    // 2. Ex√©cuter les migrations\n    const migrationsOk = await runMigrations();\n    if (!migrationsOk) {\n      throw new Error('√âchec des migrations');\n    }\n    \n    // 3. V√©rifier les donn√©es existantes\n    const hasData = await checkExistingData();\n    \n    // 4. Initialiser les donn√©es si n√©cessaire\n    if (!hasData) {\n      console.log(`${LOG_PREFIX} üìù Base de donn√©es vide, initialisation des donn√©es...`);\n      await seedDatabase();\n    } else {\n      console.log(`${LOG_PREFIX} ‚úÖ Donn√©es existantes d√©tect√©es, pas de seed n√©cessaire`);\n    }\n    \n    // 5. Sauvegarder la configuration\n    await saveConfiguration();\n    \n    console.log(`${LOG_PREFIX} üéâ Configuration de la base de donn√©es termin√©e avec succ√®s !`);\n    console.log(`${LOG_PREFIX} üí° Votre base de donn√©es est maintenant pr√™te et sauvegard√©e`);\n    \n  } catch (error) {\n    console.error(`${LOG_PREFIX} üí• Erreur fatale lors de la configuration:`, error.message);\n    console.error(`${LOG_PREFIX} üîß V√©rifiez votre variable DATABASE_URL et r√©essayez`);\n    process.exit(1);\n  }\n}\n\n// Ex√©cution du script si appel√© directement\nif (import.meta.url === `file://${process.argv[1]}`) {\n  setupDatabase();\n}\n\nexport { setupDatabase, checkDatabaseUrl, runMigrations, seedDatabase };","size_bytes":6371},"server/database-setup.ts":{"content":"import { db } from './db';\nimport { users, pharmacies, prescriptions, orders, notifications } from '@shared/schema';\nimport { sql } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\n\n/**\n * Configuration automatique de la base de donn√©es au d√©marrage\n * Cr√©e toutes les donn√©es n√©cessaires si elles n'existent pas\n */\nexport async function setupDatabase() {\n  try {\n    console.log('üîß V√©rification et configuration de la base de donn√©es...');\n\n    // V√©rifier si des utilisateurs existent d√©j√†\n    const existingUsers = await db.select().from(users).limit(1);\n    \n    if (existingUsers.length === 0) {\n      console.log('üìä Base de donn√©es vide d√©tect√©e - Cr√©ation des donn√©es initiales...');\n      await createInitialData();\n    } else {\n      console.log('‚úÖ Base de donn√©es existante d√©tect√©e - V√©rification de l\\'int√©grit√©...');\n      await verifyDataIntegrity();\n    }\n\n    console.log('‚úÖ Configuration de la base de donn√©es termin√©e');\n  } catch (error) {\n    console.error('‚ùå Erreur lors de la configuration de la base de donn√©es:', error);\n    throw error;\n  }\n}\n\nasync function createInitialData() {\n  console.log('üë• Cr√©ation des utilisateurs de base...');\n  \n  // Cr√©er un hash pour les mots de passe\n  const defaultPasswordHash = await bcrypt.hash('123456', 10);\n\n  // Cr√©er les utilisateurs de base\n  const createdUsers = await db.insert(users).values([\n    {\n      id: '07d1a4fc-9a15-4dac-b2dc-94537a7b0faf',\n      firstName: 'Aya',\n      lastName: 'Diallo',\n      phone: '+225 07 12 34 56',\n      address: 'Cocody, Abidjan',\n      password: defaultPasswordHash,\n      role: 'patient',\n      isActive: true\n    },\n    {\n      id: 'c604f50c-7030-4a81-a245-5d782187a966',\n      firstName: 'Jean-Claude',\n      lastName: 'Koffi',\n      phone: '+225 07 44 55 66',\n      address: 'Abobo, Abidjan',\n      password: defaultPasswordHash,\n      role: 'livreur',\n      isActive: true\n    },\n    {\n      id: 'f8a1b2c3-d4e5-f6g7-h8i9-j0k1l2m3n4o5',\n      firstName: 'Dr. Marie',\n      lastName: 'Kouadio',\n      phone: '+225 21 22 33 44',\n      address: 'Plateau, Abidjan',\n      password: defaultPasswordHash,\n      role: 'pharmacien',\n      isActive: true\n    },\n    {\n      id: 'a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6',\n      firstName: 'Admin',\n      lastName: 'System',\n      phone: '+225 21 00 00 00',\n      address: 'Centre-ville, Abidjan',\n      password: defaultPasswordHash,\n      role: 'admin',\n      isActive: true\n    }\n  ]).returning();\n\n  console.log('üè™ Cr√©ation des pharmacies...');\n  \n  // Cr√©er les pharmacies\n  const createdPharmacies = await db.insert(pharmacies).values([\n    {\n      id: '2d01e53b-62bb-4248-bea1-0c463f674749',\n      name: 'Pharmacie Centrale d\\'Abidjan',\n      address: 'Boulevard de la R√©publique, Plateau, Abidjan',\n      phone: '+225 21 22 33 44',\n      latitude: '5.316667',\n      longitude: '-4.0',\n      isOpen: true,\n      isEmergency24h: false\n    },\n    {\n      id: '185d81f3-3db5-4eb0-9549-92197bcf039d',\n      name: 'Pharmacie de Garde Cocody',\n      address: 'Riviera Golf, Cocody, Abidjan',\n      phone: '+225 22 44 55 66',\n      latitude: '5.35',\n      longitude: '-3.98',\n      isOpen: true,\n      isEmergency24h: true\n    }\n  ]).returning();\n\n  console.log('üë®‚Äç‚öïÔ∏è Cr√©ation du profil livreur...');\n  \n  // Cr√©er le profil du livreur\n  await db.insert(deliveryProfiles).values({\n    userId: 'c604f50c-7030-4a81-a245-5d782187a966',\n    profilePhotoUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',\n    emergencyContactName: 'Marie Kouassi',\n    emergencyContactPhone: '+225 05 44 22 11',\n    rating: '4.8',\n    totalDeliveries: '127',\n    isAvailable: true\n  });\n\n  console.log('üöó Cr√©ation du v√©hicule du livreur...');\n  \n  // Cr√©er le v√©hicule du livreur\n  await db.insert(deliveryVehicles).values({\n    deliveryPersonId: 'c604f50c-7030-4a81-a245-5d782187a966',\n    vehicleType: 'moto',\n    brand: 'Yamaha',\n    model: 'DT 125',\n    color: 'Rouge',\n    licensePlate: 'CI-2578-AB',\n    verificationStatus: 'approved'\n  });\n\n  console.log('üìã Cr√©ation d\\'une prescription de test...');\n  \n  // Cr√©er une prescription de test\n  const prescriptionId = '5204474e-2e78-47b5-8a71-ef2f1f1e466a';\n  await db.insert(prescriptions).values({\n    id: prescriptionId,\n    userId: '07d1a4fc-9a15-4dac-b2dc-94537a7b0faf',\n    imageUrl: 'https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?w=400',\n    status: 'approved',\n    medications: {\n      items: [\n        { name: 'Parac√©tamol 500mg', quantity: 2 },\n        { name: 'Amoxicilline 250mg', quantity: 1 }\n      ]\n    },\n    createdAt: new Date(Date.now() - 45 * 60 * 1000) // Il y a 45 minutes\n  });\n\n  console.log('üì¶ Cr√©ation d\\'une commande de test...');\n  \n  // Cr√©er une commande de test\n  await db.insert(orders).values({\n    userId: '07d1a4fc-9a15-4dac-b2dc-94537a7b0faf',\n    pharmacyId: '2d01e53b-62bb-4248-bea1-0c463f674749',\n    prescriptionId: prescriptionId,\n    deliveryPersonId: 'c604f50c-7030-4a81-a245-5d782187a966',\n    status: 'in_transit',\n    deliveryAddress: 'Cocody, Abidjan, C√¥te d\\'Ivoire',\n    totalAmount: '25.50',\n    estimatedDelivery: new Date(Date.now() + 30 * 60 * 1000), // Dans 30 minutes\n    medications: {\n      items: [\n        { name: 'Parac√©tamol 500mg', quantity: 2 },\n        { name: 'Amoxicilline 250mg', quantity: 1 }\n      ]\n    }\n  });\n\n  console.log('‚úÖ Donn√©es initiales cr√©√©es avec succ√®s');\n}\n\nasync function verifyDataIntegrity() {\n  // V√©rifier que les tables essentielles ont des donn√©es\n  const userCount = await db.select({ count: sql`count(*)` }).from(users);\n  const pharmacyCount = await db.select({ count: sql`count(*)` }).from(pharmacies);\n  \n  console.log(`üìä ${userCount[0].count} utilisateurs trouv√©s`);\n  console.log(`üè™ ${pharmacyCount[0].count} pharmacies trouv√©es`);\n\n  // V√©rifier et mettre √† jour les donn√©es des livreurs consolid√©es\n  await updateDeliveryPersonData();\n}\n\nasync function updateDeliveryPersonData() {\n  // Trouver un livreur existant sans informations de v√©hicule\n  const deliveryPerson = await db.select().from(users).where(sql`role = 'livreur' AND vehicle_license_plate IS NULL`).limit(1);\n  \n  if (deliveryPerson.length > 0) {\n    await db.update(users).set({\n      profileImageUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',\n      emergencyContactName: 'Contact d\\'urgence',\n      emergencyContactPhone: '+225 00 00 00 00',\n      rating: '4.5',\n      totalDeliveries: '50',\n      isAvailable: true,\n      vehicleType: 'moto',\n      vehicleBrand: 'Yamaha',\n      vehicleModel: 'DT 125',\n      vehicleColor: 'Rouge',\n      vehicleLicensePlate: 'CI-2578-AB',\n      vehicleVerificationStatus: 'approved'\n    }).where(sql`id = ${deliveryPerson[0].id}`);\n\n    console.log('‚úÖ Donn√©es livreur mises √† jour pour:', deliveryPerson[0].firstName, deliveryPerson[0].lastName);\n  }\n}","size_bytes":6956},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\n// Use environment variable for database URL\nconst databaseUrl = process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  console.error('‚ùå DATABASE_URL environment variable is required for PostgreSQL storage');\n  throw new Error('DATABASE_URL is required for PostgreSQL storage');\n}\n\nconsole.log('‚úÖ Database connection configured');\n\nexport const pool = new Pool({ connectionString: databaseUrl });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":667},"server/firebase-storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Pharmacy,\n  type InsertPharmacy,\n  type Prescription,\n  type InsertPrescription,\n  type Order,\n  type InsertOrder,\n  type DeliveryPerson,\n  type Notification,\n  type InsertNotification,\n} from \"@shared/firebase-schema\";\nimport { db } from \"./firebase\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\nimport { type IStorage } from \"./storage\";\n\nexport class FirebaseStorage implements IStorage {\n  \n  // Helper function to convert Firestore timestamp to Date\n  private convertTimestamp(data: any): any {\n    if (data && typeof data === 'object') {\n      const converted = { ...data };\n      Object.keys(converted).forEach(key => {\n        if (converted[key] && typeof converted[key].toDate === 'function') {\n          converted[key] = converted[key].toDate();\n        }\n      });\n      return converted;\n    }\n    return data;\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const doc = await db.collection('users').doc(id).get();\n      if (!doc.exists) return undefined;\n      \n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as User;\n    } catch (error) {\n      console.error('Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    try {\n      const snapshot = await db.collection('users').where('phone', '==', phone).limit(1).get();\n      if (snapshot.empty) return undefined;\n      \n      const doc = snapshot.docs[0];\n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as User;\n    } catch (error) {\n      console.error('Error getting user by phone:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    try {\n      const id = randomUUID();\n      const hashedPassword = await bcrypt.hash(user.password, 10);\n      \n      const userData = {\n        ...user,\n        password: hashedPassword,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await db.collection('users').doc(id).set(userData);\n      return { id, ...userData } as User;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    try {\n      const updateData = {\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await db.collection('users').doc(id).update(updateData);\n      return this.getUser(id);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      return undefined;\n    }\n  }\n\n  async loginUser(phone: string, password: string): Promise<User | null> {\n    try {\n      const user = await this.getUserByPhone(phone);\n      if (!user) return null;\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) return null;\n\n      return user;\n    } catch (error) {\n      console.error('Error during login:', error);\n      return null;\n    }\n  }\n\n  // Admin operations\n  async getPendingUsers(): Promise<User[]> {\n    try {\n      const snapshot = await db.collection('users')\n        .where('verificationStatus', '==', 'pending')\n        .where('role', 'in', ['pharmacien', 'livreur'])\n        .get();\n      \n      return snapshot.docs.map(doc => {\n        const data = this.convertTimestamp(doc.data());\n        return { id: doc.id, ...data } as User;\n      });\n    } catch (error) {\n      console.error('Error getting pending users:', error);\n      return [];\n    }\n  }\n\n  async updateUserVerificationStatus(userId: string, status: \"approved\" | \"rejected\" | \"pending\"): Promise<User | null> {\n    try {\n      await db.collection('users').doc(userId).update({\n        verificationStatus: status,\n        updatedAt: new Date(),\n      });\n      return this.getUser(userId) ?? null;\n    } catch (error) {\n      console.error('Error updating verification status:', error);\n      return null;\n    }\n  }\n\n  async getApplicationStats(): Promise<{\n    patients: number;\n    pharmaciens: number;\n    livreurs: number;\n    orders: number;\n    pendingOrders: number;\n    activeDeliveries: number;\n    completedDeliveries: number;\n  }> {\n    try {\n      // Get user counts\n      const [patientsSnapshot, pharmaciensSnapshot, livreursSnapshot] = await Promise.all([\n        db.collection('users').where('role', '==', 'patient').get(),\n        db.collection('users').where('role', '==', 'pharmacien').get(),\n        db.collection('users').where('role', '==', 'livreur').get(),\n      ]);\n\n      // Get order counts\n      const [ordersSnapshot, pendingOrdersSnapshot, activeDeliveriesSnapshot, completedDeliveriesSnapshot] = await Promise.all([\n        db.collection('orders').get(),\n        db.collection('orders').where('status', '==', 'pending').get(),\n        db.collection('orders').where('status', 'in', ['confirmed', 'preparing', 'in_transit']).get(),\n        db.collection('orders').where('status', '==', 'delivered').get(),\n      ]);\n\n      return {\n        patients: patientsSnapshot.size,\n        pharmaciens: pharmaciensSnapshot.size,\n        livreurs: livreursSnapshot.size,\n        orders: ordersSnapshot.size,\n        pendingOrders: pendingOrdersSnapshot.size,\n        activeDeliveries: activeDeliveriesSnapshot.size,\n        completedDeliveries: completedDeliveriesSnapshot.size,\n      };\n    } catch (error) {\n      console.error('Error getting application stats:', error);\n      return {\n        patients: 0,\n        pharmaciens: 0,\n        livreurs: 0,\n        orders: 0,\n        pendingOrders: 0,\n        activeDeliveries: 0,\n        completedDeliveries: 0,\n      };\n    }\n  }\n\n  // Pharmacy operations\n  async getPharmacies(lat?: number, lng?: number, radius?: number): Promise<Pharmacy[]> {\n    try {\n      // For now, return all pharmacies. In a real implementation, you'd use geospatial queries\n      const snapshot = await db.collection('pharmacies').get();\n      \n      const pharmacies = snapshot.docs.map(doc => {\n        const data = this.convertTimestamp(doc.data());\n        return { id: doc.id, ...data } as Pharmacy;\n      });\n\n      // If coordinates are provided, sort by distance (simple implementation)\n      if (lat !== undefined && lng !== undefined) {\n        return pharmacies.sort((a, b) => {\n          const distA = this.calculateDistance(lat, lng, a.latitude || 0, a.longitude || 0);\n          const distB = this.calculateDistance(lat, lng, b.latitude || 0, b.longitude || 0);\n          return distA - distB;\n        });\n      }\n\n      return pharmacies;\n    } catch (error) {\n      console.error('Error getting pharmacies:', error);\n      return [];\n    }\n  }\n\n  private calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  async getPharmacy(id: string): Promise<Pharmacy | undefined> {\n    try {\n      const doc = await db.collection('pharmacies').doc(id).get();\n      if (!doc.exists) return undefined;\n      \n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as Pharmacy;\n    } catch (error) {\n      console.error('Error getting pharmacy:', error);\n      return undefined;\n    }\n  }\n\n  async createPharmacy(pharmacy: InsertPharmacy): Promise<Pharmacy> {\n    try {\n      const id = randomUUID();\n      const pharmacyData = {\n        ...pharmacy,\n        createdAt: new Date(),\n      };\n\n      await db.collection('pharmacies').doc(id).set(pharmacyData);\n      return { id, ...pharmacyData } as Pharmacy;\n    } catch (error) {\n      console.error('Error creating pharmacy:', error);\n      throw error;\n    }\n  }\n\n  // Prescription operations\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    try {\n      const doc = await db.collection('prescriptions').doc(id).get();\n      if (!doc.exists) return undefined;\n      \n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as Prescription;\n    } catch (error) {\n      console.error('Error getting prescription:', error);\n      return undefined;\n    }\n  }\n\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    try {\n      const id = randomUUID();\n      const prescriptionData = {\n        ...prescription,\n        createdAt: new Date(),\n      };\n\n      await db.collection('prescriptions').doc(id).set(prescriptionData);\n      return { id, ...prescriptionData } as Prescription;\n    } catch (error) {\n      console.error('Error creating prescription:', error);\n      throw error;\n    }\n  }\n\n  async getUserPrescriptions(userId: string): Promise<Prescription[]> {\n    try {\n      const snapshot = await db.collection('prescriptions')\n        .where('userId', '==', userId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return snapshot.docs.map(doc => {\n        const data = this.convertTimestamp(doc.data());\n        return { id: doc.id, ...data } as Prescription;\n      });\n    } catch (error) {\n      console.error('Error getting user prescriptions:', error);\n      return [];\n    }\n  }\n\n  async updatePrescriptionStatus(id: string, status: string): Promise<Prescription | undefined> {\n    try {\n      await db.collection('prescriptions').doc(id).update({ status });\n      return this.getPrescription(id);\n    } catch (error) {\n      console.error('Error updating prescription status:', error);\n      return undefined;\n    }\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    try {\n      const doc = await db.collection('orders').doc(id).get();\n      if (!doc.exists) return undefined;\n      \n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as Order;\n    } catch (error) {\n      console.error('Error getting order:', error);\n      return undefined;\n    }\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    try {\n      const id = randomUUID();\n      const orderData = {\n        ...order,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await db.collection('orders').doc(id).set(orderData);\n      return { id, ...orderData } as Order;\n    } catch (error) {\n      console.error('Error creating order:', error);\n      throw error;\n    }\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    try {\n      const snapshot = await db.collection('orders')\n        .where('userId', '==', userId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return snapshot.docs.map(doc => {\n        const data = this.convertTimestamp(doc.data());\n        return { id: doc.id, ...data } as Order;\n      });\n    } catch (error) {\n      console.error('Error getting user orders:', error);\n      return [];\n    }\n  }\n\n  async getCurrentOrder(userId: string): Promise<Order | undefined> {\n    try {\n      const snapshot = await db.collection('orders')\n        .where('userId', '==', userId)\n        .where('status', 'in', ['pending', 'confirmed', 'preparing', 'in_transit'])\n        .orderBy('createdAt', 'desc')\n        .limit(1)\n        .get();\n      \n      if (snapshot.empty) return undefined;\n      \n      const doc = snapshot.docs[0];\n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as Order;\n    } catch (error) {\n      console.error('Error getting current order:', error);\n      return undefined;\n    }\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    try {\n      const updateData: any = {\n        status,\n        updatedAt: new Date(),\n      };\n\n      if (status === 'delivered') {\n        updateData.deliveredAt = new Date();\n      }\n\n      await db.collection('orders').doc(id).update(updateData);\n      return this.getOrder(id);\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      return undefined;\n    }\n  }\n\n  async updateOrderMedications(id: string, medications: any[]): Promise<Order | undefined> {\n    try {\n      await db.collection('orders').doc(id).update({\n        medications,\n        updatedAt: new Date(),\n      });\n      return this.getOrder(id);\n    } catch (error) {\n      console.error('Error updating order medications:', error);\n      return undefined;\n    }\n  }\n\n  // Delivery person operations\n  async getDeliveryPerson(id: string): Promise<DeliveryPerson | undefined> {\n    try {\n      const doc = await db.collection('delivery_persons').doc(id).get();\n      if (!doc.exists) return undefined;\n      \n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as DeliveryPerson;\n    } catch (error) {\n      console.error('Error getting delivery person:', error);\n      return undefined;\n    }\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    try {\n      const snapshot = await db.collection('notifications')\n        .where('userId', '==', userId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return snapshot.docs.map(doc => {\n        const data = this.convertTimestamp(doc.data());\n        return { id: doc.id, ...data } as Notification;\n      });\n    } catch (error) {\n      console.error('Error getting user notifications:', error);\n      return [];\n    }\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    try {\n      const id = randomUUID();\n      const notificationData = {\n        ...notification,\n        createdAt: new Date(),\n      };\n\n      await db.collection('notifications').doc(id).set(notificationData);\n      return { id, ...notificationData } as Notification;\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    try {\n      await db.collection('notifications').doc(id).update({ isRead: true });\n      \n      const doc = await db.collection('notifications').doc(id).get();\n      if (!doc.exists) return undefined;\n      \n      const data = this.convertTimestamp(doc.data());\n      return { id: doc.id, ...data } as Notification;\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      return undefined;\n    }\n  }\n}","size_bytes":14680},"server/firebase.ts":{"content":"import { initializeApp, getApps } from 'firebase-admin/app';\nimport { getFirestore } from 'firebase-admin/firestore';\n\n// Initialize Firebase Admin only if it hasn't been initialized yet\nlet app;\nif (getApps().length === 0) {\n  if (process.env.FIREBASE_PROJECT_ID) {\n    // Initialize with minimal config for development\n    // This bypasses the need for service account credentials in development\n    app = initializeApp({\n      projectId: process.env.FIREBASE_PROJECT_ID,\n    });\n    \n    // Disable authentication for development environment\n    process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';\n    process.env.GCLOUD_PROJECT = process.env.FIREBASE_PROJECT_ID;\n  } else {\n    throw new Error('Firebase configuration missing. Please set FIREBASE_PROJECT_ID.');\n  }\n} else {\n  app = getApps()[0];\n}\n\nexport const db = getFirestore(app);\nexport { app };","size_bytes":860},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupDatabase } from \"./database-setup\";\nimport { cleanupService } from \"./cleanup-service\";\n\n// D√©finir NODE_ENV si non d√©fini (pour Replit)\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = 'development';\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Configuration automatique de la base de donn√©es au d√©marrage\n  await setupDatabase();\n  \n  // D√©marrage du service de nettoyage automatique des commandes\n  cleanupService.start();\n  \n  // Create HTTP server first\n  const httpServer = createServer(app);\n  \n  // Setup Socket.IO for real-time GPS tracking\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"]\n    }\n  });\n\n  // Pass Socket.IO instance to routes\n  const server = await registerRoutes(app, io);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = '0.0.0.0';\n  \n  // Validation des variables d'environnement critiques en production\n  if (process.env.NODE_ENV === 'production') {\n    if (!process.env.DATABASE_URL) {\n      console.error('‚ùå DATABASE_URL is required in production');\n      process.exit(1);\n    }\n    log('‚úÖ Production environment validated');\n  }\n  \n  httpServer.listen(port, host, () => {\n    log(`serving on ${host}:${port}`);\n    log(`üîå WebSocket tracking GPS activ√© pour mises √† jour en temps r√©el`);\n    \n    // D√©marrer le service de nettoyage automatique\n    cleanupService.start();\n  });\n})();\n","size_bytes":3320},"server/postgres-storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Pharmacy,\n  type InsertPharmacy,\n  type Prescription,\n  type InsertPrescription,\n  type Order,\n  type InsertOrder,\n  type Notification,\n  type InsertNotification,\n  type PasswordResetCode,\n  type InsertPasswordResetCode,\n} from \"@shared/schema\";\nimport { eq, and, or, desc, asc, lt, gt, sql, ne } from \"drizzle-orm\";\nimport { users, pharmacies, prescriptions, orders, notifications, passwordResetCodes } from \"@shared/schema\";\n// Import db only when needed to avoid DATABASE_URL requirement in development\nlet db: any = null;\n\nconst getDb = async () => {\n  if (!db) {\n    const { db: dbInstance } = await import(\"./db\");\n    db = dbInstance;\n  }\n  return db;\n};\nimport bcrypt from \"bcryptjs\";\nimport { type IStorage } from \"./storage\";\n\nexport class PostgresStorage implements IStorage {\n  constructor() {\n    this.seedInitialData();\n  }\n\n  private async seedInitialData() {\n    try {\n      const db = await getDb();\n      // Check if admin user already exists\n      const existingAdmin = await db.select().from(users).where(eq(users.phone, \"+225 01 23 45 67\")).limit(1);\n\n      if (existingAdmin.length === 0) {\n        console.log('üå± Seeding initial data...');\n\n        // Create admin user\n        const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n        await db.insert(users).values({\n          firstName: \"Admin\",\n          lastName: \"YahoPharma\",\n          phone: \"+225 01 23 45 67\",\n          address: \"Si√®ge YahoPharma, Abidjan\",\n          password: hashedPassword,\n          role: \"admin\",\n          language: \"fr\",\n          isActive: true,\n          verificationStatus: \"approved\"\n        });\n\n        // Create test pharmacist users\n        const testUsers = [\n          {\n            firstName: \"Dr. Marie\",\n            lastName: \"Kouassi\",\n            phone: \"+225 07 11 22 33\",\n            address: \"Pharmacie de la Paix, Abidjan\",\n            password: await bcrypt.hash(\"pharma123\", 10),\n            role: \"pharmacien\",\n            language: \"fr\",\n            isActive: true,\n            verificationStatus: \"approved\"\n          },\n          {\n            firstName: \"Dr. Adjoua\",\n            lastName: \"Bamba\",\n            phone: \"+225 05 44 33 22\",\n            address: \"Pharmacie Centrale Plus, Marcory\",\n            password: await bcrypt.hash(\"pharma2024\", 10),\n            role: \"pharmacien\",\n            language: \"fr\",\n            isActive: true,\n            verificationStatus: \"approved\"\n          },\n          {\n            firstName: \"Jean-Claude\",\n            lastName: \"Koffi\",\n            phone: \"+225 07 44 55 66\",\n            address: \"Zone livraison Abidjan\",\n            password: await bcrypt.hash(\"livreur123\", 10),\n            role: \"livreur\",\n            language: \"fr\",\n            isActive: true,\n            verificationStatus: \"approved\"\n          },\n          {\n            firstName: \"Aya\",\n            lastName: \"Diallo\",\n            phone: \"+225 05 77 88 99\",\n            address: \"Cocody, Abidjan\",\n            password: await bcrypt.hash(\"patient123\", 10),\n            role: \"patient\",\n            language: \"fr\",\n            isActive: true,\n            verificationStatus: \"approved\"\n          }\n        ];\n\n        for (const userData of testUsers) {\n          await db.insert(users).values(userData);\n        }\n\n        // Create test pharmacies\n        const testPharmacies = [\n          {\n            name: \"Pharmacie Dr. Marie Kouassi\",\n            address: \"Quartier Riviera Golf, Cocody\",\n            latitude: \"5.3364\",\n            longitude: \"-4.0267\",\n            phone: \"+225 07 11 22 33\",\n            rating: \"4.8\",\n            deliveryTime: \"25\",\n            isOpen: true\n          },\n          {\n            name: \"Pharmacie de la Paix\",\n            address: \"Boulevard de la Paix, Cocody\",\n            latitude: \"5.3364\",\n            longitude: \"-4.0267\",\n            phone: \"+225 27 22 44 55 66\",\n            rating: \"4.5\",\n            deliveryTime: \"30\",\n            isOpen: true\n          },\n          {\n            name: \"Pharmacie du Plateau\",\n            address: \"Avenue Chardy, Plateau\",\n            latitude: \"5.3198\",\n            longitude: \"-4.0267\",\n            phone: \"+225 27 20 21 22 23\",\n            rating: \"4.2\",\n            deliveryTime: \"25\",\n            isOpen: true\n          },\n          {\n            name: \"Pharmacie Centrale Plus\",\n            address: \"Boulevard VGE, Marcory\",\n            latitude: \"5.2845\",\n            longitude: \"-3.9731\",\n            phone: \"+225 05 44 33 22\",\n            rating: \"4.7\",\n            deliveryTime: \"20\",\n            isOpen: true\n          },\n          {\n            name: \"Ithiel Pharma\",\n            address: \"Avenue des Martyrs, Yopougon\",\n            latitude: \"5.3456\",\n            longitude: \"-4.0892\",\n            phone: \"+225 27 23 45 67 89\",\n            rating: \"4.6\",\n            deliveryTime: \"25\",\n            isOpen: true\n          }\n        ];\n\n        for (const pharmacyData of testPharmacies) {\n          await db.insert(pharmacies).values(pharmacyData);\n        }\n\n        console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s');\n        console.log('üìã Acc√®s administrateur:');\n        console.log('   T√©l√©phone: +225 01 23 45 67');\n        console.log('   Mot de passe: admin123');\n      }\n    } catch (error) {\n      console.error('‚ùå Erreur lors de l\\'initialisation de la base de donn√©es:', error);\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const db = await getDb();\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const db = await getDb();\n    return await db.select().from(users);\n  }\n\n  // Alias pour compatibilit√© avec l'interface IStorage\n  async getUsers(): Promise<User[]> {\n    return this.getAllUsers();\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const db = await getDb();\n    const result = await db.select().from(users).where(eq(users.phone, phone)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const db = await getDb();\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const db = await getDb();\n    const hashedPassword = await bcrypt.hash(user.password, 10);\n    const result = await db.insert(users).values({\n      ...user,\n      password: hashedPassword,\n      deliveryApplicationStatus: user.role === 'livreur' ? 'none' : 'none',\n    }).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const db = await getDb();\n    const result = await db.update(users).set({\n      ...updates,\n      updatedAt: new Date(),\n    }).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async loginUser(phone: string, password: string): Promise<User | null> {\n    const user = await this.getUserByPhone(phone);\n    if (!user) return null;\n\n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) return null;\n\n    return user;\n  }\n\n  async resetUserPassword(email: string, newPassword: string): Promise<void> {\n    const db = await getDb();\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    await db.update(users).set({ \n      password: hashedPassword \n    }).where(eq(users.email, email));\n  }\n\n  // Admin operations\n  async getPendingUsers(): Promise<User[]> {\n    const db = await getDb();\n    return await db.select().from(users).where(\n      and(\n        eq(users.verificationStatus, 'pending'),\n        or(eq(users.role, 'pharmacien'), eq(users.role, 'livreur'))\n      )\n    );\n  }\n\n  async updateUserVerificationStatus(userId: string, status: \"approved\" | \"rejected\" | \"pending\"): Promise<User | null> {\n    const updates: any = {\n      verificationStatus: status,\n      updatedAt: new Date(),\n    };\n\n    // If approving a livreur, also update delivery application status\n    if (status === 'approved') {\n      const user = await this.getUser(userId);\n      if (user?.role === 'livreur' && user.deliveryApplicationStatus === 'pending') {\n        updates.deliveryApplicationStatus = 'approved';\n      }\n    } else if (status === 'rejected') {\n      const user = await this.getUser(userId);\n      if (user?.role === 'livreur') {\n        updates.deliveryApplicationStatus = 'rejected';\n        updates.appliedPharmacyId = null;\n      }\n    }\n\n    const result = await db.update(users).set(updates).where(eq(users.id, userId)).returning();\n    return result[0] || null;\n  }\n\n  async getApplicationStats(): Promise<{\n    patients: number;\n    pharmaciens: number;\n    livreurs: number;\n    orders: number;\n    pendingOrders: number;\n    activeDeliveries: number;\n    completedDeliveries: number;\n  }> {\n    const [usersResult, ordersResult] = await Promise.all([\n      db.select({ role: users.role }).from(users),\n      db.select({ status: orders.status }).from(orders),\n    ]);\n\n    const usersByRole = usersResult.reduce((acc, user) => {\n      acc[user.role] = (acc[user.role] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const ordersByStatus = ordersResult.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      patients: usersByRole.patient || 0,\n      pharmaciens: usersByRole.pharmacien || 0,\n      livreurs: usersByRole.livreur || 0,\n      orders: ordersResult.length,\n      pendingOrders: ordersByStatus.pending || 0,\n      activeDeliveries: (ordersByStatus.confirmed || 0) + (ordersByStatus.preparing || 0) + (ordersByStatus.in_transit || 0),\n      completedDeliveries: ordersByStatus.delivered || 0,\n    };\n  }\n\n  // Pharmacy operations\n  async getPharmacies(lat?: number, lng?: number, radius?: number): Promise<Pharmacy[]> {\n    const result = await db.select().from(pharmacies);\n\n    if (lat !== undefined && lng !== undefined) {\n      return result.sort((a, b) => {\n        const distA = this.calculateDistance(lat, lng, parseFloat(a.latitude || '0'), parseFloat(a.longitude || '0'));\n        const distB = this.calculateDistance(lat, lng, parseFloat(b.latitude || '0'), parseFloat(b.longitude || '0'));\n        return distA - distB;\n      });\n    }\n\n    return result;\n  }\n\n  private calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  async getPharmacy(id: string): Promise<Pharmacy | undefined> {\n    const result = await db.select().from(pharmacies).where(eq(pharmacies.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPharmacy(pharmacy: InsertPharmacy): Promise<Pharmacy> {\n    const result = await db.insert(pharmacies).values(pharmacy).returning();\n    console.log('‚úÖ Pharmacie cr√©√©e:', { id: result[0].id, name: result[0].name, phone: result[0].phone });\n    return result[0];\n  }\n\n  async updatePharmacy(id: string, updates: Partial<InsertPharmacy>): Promise<Pharmacy | undefined> {\n    const result = await db.update(pharmacies).set({\n      ...updates,\n      updatedAt: new Date(),\n    }).where(eq(pharmacies.id, id)).returning();\n    return result[0];\n  }\n\n  async getPharmacyByUserId(userId: string): Promise<Pharmacy | undefined> {\n    const user = await this.getUser(userId);\n    if (!user || user.role !== 'pharmacien') return undefined;\n\n    // First check if user has a pharmacyId assigned\n    if (user.pharmacyId) {\n      const pharmacy = await this.getPharmacy(user.pharmacyId);\n      if (pharmacy) return pharmacy;\n    }\n\n    // Fallback: try to find pharmacy by phone number\n    const result = await db.select().from(pharmacies).where(eq(pharmacies.phone, user.phone)).limit(1);\n    return result[0];\n  }\n\n  async getPharmacyById(pharmacyId: string): Promise<Pharmacy | undefined> {\n    return this.getPharmacy(pharmacyId);\n  }\n\n  // Prescription operations\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    const result = await db.select().from(prescriptions).where(eq(prescriptions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    const result = await db.insert(prescriptions).values(prescription).returning();\n    return result[0];\n  }\n\n  async getUserPrescriptions(userId: string): Promise<Prescription[]> {\n    return await db.select().from(prescriptions).where(eq(prescriptions.userId, userId)).orderBy(desc(prescriptions.createdAt));\n  }\n\n  async updatePrescriptionStatus(id: string, status: string): Promise<Prescription | undefined> {\n    const result = await db.update(prescriptions).set({ status }).where(eq(prescriptions.id, id)).returning();\n    return result[0];\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId)).orderBy(desc(orders.createdAt));\n  }\n\n  async getCurrentOrder(userId: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(\n      and(\n        eq(orders.userId, userId),\n        or(\n          eq(orders.status, 'pending'),\n          eq(orders.status, 'confirmed'),\n          eq(orders.status, 'preparing'),\n          eq(orders.status, 'ready_for_delivery'),\n          eq(orders.status, 'in_transit')\n        )\n      )\n    ).orderBy(desc(orders.createdAt)).limit(1);\n    return result[0];\n  }\n\n  async updateOrderStatus(orderId: string, status: 'pending' | 'confirmed' | 'preparing' | 'ready_for_delivery' | 'in_transit' | 'arrived_pending_confirmation' | 'delivered' | 'cancelled'): Promise<Order | undefined> {\n    const updates: any = { status, updatedAt: new Date() };\n    if (status === 'delivered') {\n      updates.deliveredAt = new Date();\n    }\n    const result = await db.update(orders).set(updates).where(eq(orders.id, orderId)).returning();\n    return result[0];\n  }\n\n  async updateOrderMedications(id: string, medications: any[]): Promise<Order | undefined> {\n    const result = await db.update(orders).set({\n      medications,\n      updatedAt: new Date(),\n    }).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n\n\n  async confirmDeliveryCompletion(orderId: string): Promise<Order | undefined> {\n    const db = await getDb();\n\n    // V√©rifier d'abord que la commande est en attente de confirmation\n    const existingOrder = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);\n    if (!existingOrder[0] || existingOrder[0].status !== 'arrived_pending_confirmation') {\n      return undefined;\n    }\n\n    // Marquer la livraison comme termin√©e avec confirmation directe du patient\n    const result = await db.update(orders).set({\n      status: 'delivered',\n      patientConfirmedAt: new Date(),\n      deliveredAt: new Date(),\n      updatedAt: new Date(),\n    }).where(eq(orders.id, orderId)).returning();\n\n    if (result[0]) {\n      // Notifier le livreur que la livraison est confirm√©e\n      if (result[0].deliveryPersonId) {\n        await db.insert(notifications).values({\n          userId: result[0].deliveryPersonId,\n          title: 'Livraison confirm√©e',\n          body: 'Le patient a confirm√© la r√©ception. Livraison termin√©e avec succ√®s !',\n          type: 'delivery_completed',\n          orderId: orderId\n        });\n      }\n    }\n\n    return result[0];\n  }\n\n  // Delivery person operations (using User table instead)\n\n  // Helper method to get daily order count for a delivery person\n  async getDailyOrderCount(deliveryPersonId: string): Promise<number> {\n    const db = await getDb();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Start of today\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1); // Start of tomorrow\n    \n    const result = await db\n      .select({ count: sql`count(*)` })\n      .from(orders)\n      .where(\n        and(\n          eq(orders.deliveryPersonId, deliveryPersonId),\n          sql`${orders.assignedAt} >= ${today.toISOString()}::timestamp`,\n          sql`${orders.assignedAt} < ${tomorrow.toISOString()}::timestamp`\n        )\n      );\n    \n    return parseInt(result[0]?.count as string) || 0;\n  }\n\n  // Get delivery personnel for a specific pharmacy with daily order counts\n  async getAvailableDeliveryPersonnelForPharmacy(pharmacyId: string): Promise<User[]> {\n    const db = await getDb();\n    const personnel = await db.select().from(users).where(\n      and(\n        eq(users.role, 'livreur'),\n        eq(users.verificationStatus, 'approved'),\n        eq(users.isActive, true),\n        eq(users.pharmacyId, pharmacyId)\n      )\n    );\n\n    // Add daily order count for each delivery person\n    const personnelWithDailyCount = await Promise.all(\n      personnel.map(async (person) => {\n        const dailyOrderCount = await this.getDailyOrderCount(person.id);\n        return {\n          ...person,\n          dailyOrderCount\n        };\n      })\n    );\n\n    return personnelWithDailyCount;\n  }\n\n  async getAvailableDeliveryPersonnel(): Promise<User[]> {\n    const db = await getDb();\n    return await db.select().from(users).where(\n      and(\n        eq(users.role, 'livreur'),\n        eq(users.verificationStatus, 'approved'),\n        eq(users.isActive, true)\n      )\n    );\n  }\n\n  async getDeliveryOrders(): Promise<Order[]> {\n    const db = await getDb();\n    return await db.select().from(orders).where(\n      or(\n        eq(orders.status, 'preparing'), // Available for assignment\n        eq(orders.status, 'in_transit')\n      )\n    ).orderBy(desc(orders.createdAt));\n  }\n\n  // Nouvelle m√©thode pour r√©cup√©rer les commandes assign√©es √† un livreur sp√©cifique\n  async getMyAssignedOrders(deliveryPersonId: string): Promise<Order[]> {\n    const db = await getDb();\n\n    // D'abord, v√©rifier les commandes expir√©es (plus de 3 minutes) et les r√©assigner\n    await this.checkAndRejectExpiredAssignments();\n\n    return await db.select().from(orders).where(\n      and(\n        eq(orders.deliveryPersonId, deliveryPersonId),\n        or(\n          eq(orders.status, 'assigned_pending_acceptance'),\n          eq(orders.status, 'in_transit'),\n          eq(orders.status, 'delivered')\n        )\n      )\n    ).orderBy(desc(orders.createdAt));\n  }\n\n  // M√©thode pour v√©rifier et rejeter les assignations expir√©es\n  async checkAndRejectExpiredAssignments(): Promise<void> {\n    const db = await getDb();\n    const threeMinutesAgo = new Date(Date.now() - 3 * 60 * 1000);\n\n    const expiredOrders = await db.select().from(orders).where(\n      and(\n        eq(orders.status, 'assigned_pending_acceptance'),\n        sql`${orders.assignedAt} < ${threeMinutesAgo}`\n      )\n    );\n\n    for (const order of expiredOrders) {\n      await db.update(orders).set({\n        status: 'preparing',\n        deliveryPersonId: null,\n        assignedAt: null,\n        updatedAt: new Date()\n      }).where(eq(orders.id, order.id));\n\n      // Notifier le livreur que l'assignation a expir√©\n      if (order.deliveryPersonId) {\n        await db.insert(notifications).values({\n          userId: order.deliveryPersonId,\n          title: 'Assignation expir√©e',\n          body: `La commande #${order.id.slice(0, 8)} a √©t√© r√©assign√©e car vous n'avez pas r√©pondu dans les 3 minutes.`,\n          type: 'assignment_expired',\n          orderId: order.id\n        });\n      }\n    }\n  }\n\n  // M√©thode pour accepter une livraison assign√©e\n  async acceptDeliveryAssignment(orderId: string, deliveryPersonId: string): Promise<Order | undefined> {\n    const db = await getDb();\n\n    // V√©rifier que la commande est bien assign√©e √† ce livreur et en attente d'acceptation\n    const order = await db.select().from(orders).where(\n      and(\n        eq(orders.id, orderId),\n        eq(orders.deliveryPersonId, deliveryPersonId),\n        eq(orders.status, 'assigned_pending_acceptance')\n      )\n    ).limit(1);\n\n    if (!order[0]) {\n      return undefined;\n    }\n\n    // V√©rifier si l'assignation n'a pas expir√© (3 minutes)\n    const assignedAt = new Date(order[0].assignedAt!);\n    const now = new Date();\n    const diffMinutes = (now.getTime() - assignedAt.getTime()) / (1000 * 60);\n\n    if (diffMinutes > 3) {\n      // Expir√©e, la r√©assigner automatiquement\n      await this.rejectDeliveryAssignment(orderId, deliveryPersonId, true);\n      return undefined;\n    }\n\n    // Accepter la livraison\n    const result = await db.update(orders).set({\n      status: 'in_transit',\n      updatedAt: new Date()\n    }).where(eq(orders.id, orderId)).returning();\n\n    // Notifier le patient\n    if (result[0]) {\n      await db.insert(notifications).values({\n        userId: result[0].userId,\n        title: 'Livreur en route',\n        body: `Votre livreur a accept√© la livraison et est en route vers votre adresse.`,\n        type: 'delivery_accepted',\n        orderId: orderId\n      });\n    }\n\n    return result[0];\n  }\n\n  // M√©thode pour rejeter une livraison assign√©e\n  async rejectDeliveryAssignment(orderId: string, deliveryPersonId: string, isExpired: boolean = false): Promise<boolean> {\n    const db = await getDb();\n\n    // V√©rifier que la commande est bien assign√©e √† ce livreur\n    const order = await db.select().from(orders).where(\n      and(\n        eq(orders.id, orderId),\n        eq(orders.deliveryPersonId, deliveryPersonId),\n        eq(orders.status, 'assigned_pending_acceptance')\n      )\n    ).limit(1);\n\n    if (!order[0]) {\n      return false;\n    }\n\n    // R√©assigner la commande (retourner en statut ready_for_delivery car elle √©tait d√©j√† pr√™te)\n    await db.update(orders).set({\n      status: 'ready_for_delivery',\n      deliveryPersonId: null,\n      assignedAt: null,\n      updatedAt: new Date()\n    }).where(eq(orders.id, orderId));\n\n    // Notifier selon le type de rejet\n    if (!isExpired) {\n      await db.insert(notifications).values({\n        userId: deliveryPersonId,\n        title: 'Livraison refus√©e',\n        body: `Vous avez refus√© la commande #${orderId.slice(0, 8)}. Elle sera r√©assign√©e √† un autre livreur.`,\n        type: 'delivery_rejected',\n        orderId: orderId\n      });\n    }\n\n    return true;\n  }\n\n  async assignDeliveryPerson(orderId: string, deliveryPersonId: string): Promise<Order | undefined> {\n    const db = await getDb();\n    const assignedAt = new Date();\n    const result = await db.update(orders).set({\n      deliveryPersonId,\n      status: 'assigned_pending_acceptance',\n      assignedAt,\n      updatedAt: assignedAt,\n    }).where(eq(orders.id, orderId)).returning();\n\n    // Cr√©er une notification pour le livreur\n    if (result[0]) {\n      await db.insert(notifications).values({\n        userId: deliveryPersonId,\n        title: 'Nouvelle livraison assign√©e',\n        body: `Commande #${orderId.slice(0, 8)} vous a √©t√© assign√©e. Vous avez 3 minutes pour accepter.`,\n        type: 'delivery_assignment',\n        orderId: orderId\n      });\n    }\n\n    return result[0];\n  }\n\n  // R√©cup√©rer toutes les commandes assign√©es √† un livreur (y compris celles en attente d'acceptation)\n  async getMyAssignedOrders(deliveryPersonId: string): Promise<Order[]> {\n    const db = await getDb();\n\n    // D'abord v√©rifier s'il y a des commandes expir√©es et les nettoyer\n    await this.cleanupExpiredAssignments();\n\n    // R√©cup√©rer toutes les commandes assign√©es √† ce livreur\n    const assignedOrders = await db.select().from(orders).where(\n      and(\n        eq(orders.deliveryPersonId, deliveryPersonId),\n        or(\n          eq(orders.status, 'assigned_pending_acceptance'),\n          eq(orders.status, 'in_transit'),\n          eq(orders.status, 'delivered')\n        )\n      )\n    ).orderBy(desc(orders.createdAt));\n\n    // Enrichir avec les donn√©es de pharmacie et patient\n    const enrichedOrders = await Promise.all(\n      assignedOrders.map(async (order) => {\n        const [pharmacy, patient] = await Promise.all([\n          order.pharmacyId ? this.getPharmacy(order.pharmacyId) : null,\n          this.getUser(order.userId)\n        ]);\n\n        return {\n          ...order,\n          pharmacy,\n          patient\n        };\n      })\n    );\n\n    return enrichedOrders;\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db.select().from(notifications).where(eq(notifications.userId, userId)).orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const result = await db.insert(notifications).values(notification).returning();\n    return result[0];\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const result = await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id)).returning();\n    return result[0];\n  }\n\n  // Additional methods for pharmacy management\n  async getAllPharmacistOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async getPharmacistOrders(pharmacyId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.pharmacyId, pharmacyId)).orderBy(desc(orders.createdAt));\n  }\n\n  async getAllPrescriptions(): Promise<Prescription[]> {\n    return await db.select().from(prescriptions).orderBy(desc(prescriptions.createdAt));\n  }\n\n  // Delivery application methods\n  async getPharmacyOwner(pharmacyId: string): Promise<User | null> {\n    // Try to find user by pharmacyId first\n    const ownerByPharmacyId = await db.select().from(users).where(\n      and(\n        eq(users.role, 'pharmacien'),\n        eq(users.pharmacyId, pharmacyId)\n      )\n    ).limit(1);\n\n    if (ownerByPharmacyId.length > 0) {\n      return ownerByPharmacyId[0];\n    }\n\n    // Fallback: find by pharmacy phone number\n    const pharmacy = await this.getPharmacy(pharmacyId);\n    if (pharmacy?.phone) {\n      const ownerByPhone = await db.select().from(users).where(\n        and(\n          eq(users.role, 'pharmacien'),\n          eq(users.phone, pharmacy.phone)\n        )\n      ).limit(1);\n\n      if (ownerByPhone.length > 0) {\n        // Update user with pharmacy ID for future reference\n        await this.updateUser(ownerByPhone[0].id, { pharmacyId });\n        return ownerByPhone[0];\n      }\n    }\n\n    return null;\n  }\n\n  async getDeliveryApplicationsForPharmacy(pharmacyId: string): Promise<User[]> {\n    return await db.select().from(users).where(\n      and(\n        eq(users.role, 'livreur'),\n        eq(users.appliedPharmacyId, pharmacyId),\n        eq(users.deliveryApplicationStatus, 'pending')\n      )\n    );\n  }\n\n  async respondToDeliveryApplication(applicationId: string, action: string, pharmacyId: string | undefined): Promise<User | null> {\n    const user = await this.getUser(applicationId);\n    if (!user || user.role !== 'livreur' || user.deliveryApplicationStatus !== 'pending') {\n      return null;\n    }\n\n    const updates: any = {\n      updatedAt: new Date(),\n    };\n\n    if (action === 'approve') {\n      updates.deliveryApplicationStatus = 'approved';\n      updates.pharmacyId = pharmacyId;\n      updates.appliedPharmacyId = null;\n\n      // Create notification for the livreur\n      await this.createNotification({\n        userId: user.id,\n        title: 'Candidature accept√©e !',\n        body: 'F√©licitations ! Votre candidature a √©t√© accept√©e. Vous pouvez maintenant acc√©der √† votre tableau de bord.',\n        type: 'delivery_application_response',\n        isRead: false,\n      });\n    } else { // action === 'reject'\n      updates.deliveryApplicationStatus = 'rejected';\n      updates.appliedPharmacyId = null;\n\n      // Create notification for the livreur\n      await this.createNotification({\n        userId: user.id,\n        title: 'Candidature non retenue',\n        body: 'Votre candidature n\\'a pas √©t√© retenue cette fois. Vous pouvez postuler √† une autre pharmacie.',\n        type: 'delivery_application_response',\n        isRead: false,\n      });\n    }\n\n    const result = await db.update(users).set(updates).where(eq(users.id, applicationId)).returning();\n    return result[0] || null;\n  }\n\n  // Admin methods\n  async getAllOrdersForAdmin(): Promise<any[]> {\n    const allOrders = await db.select().from(orders).orderBy(desc(orders.createdAt));\n\n    return allOrders.map(order => ({\n      ...order,\n      pharmacy: null, // Would need joins to populate\n      patient: null,  // Would need joins to populate\n      deliveryPerson: null, // Would need joins to populate\n      totalAmount: order.totalAmount || '0'\n    }));\n  }\n\n  async getWeeklyStats(weekDate: Date): Promise<{ totalRevenue: number; ordersCount: number }> {\n    const startOfWeek = new Date(weekDate);\n    startOfWeek.setDate(weekDate.getDate() - weekDate.getDay());\n    startOfWeek.setHours(0, 0, 0, 0);\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(startOfWeek.getDate() + 6);\n    endOfWeek.setHours(23, 59, 59, 999);\n\n    const weekOrders = await db.select().from(orders).where(\n      and(\n        // Date filtering would need proper SQL date functions\n        or(\n          eq(orders.status, 'confirmed'),\n          eq(orders.status, 'ready_for_delivery'),\n          eq(orders.status, 'in_delivery'),\n          eq(orders.status, 'delivered')\n        )\n      )\n    );\n\n    const totalRevenue = weekOrders.reduce((sum, order) => {\n      return sum + (parseFloat(order.totalAmount || '0') || 0);\n    }, 0);\n\n    return {\n      totalRevenue,\n      ordersCount: weekOrders.length\n    };\n  }\n\n  async getAllPharmaciesForAdmin(): Promise<any[]> {\n    return await db.select().from(pharmacies);\n  }\n\n  async getAllDeliveryPersonnelForAdmin(): Promise<any[]> {\n    const deliveryPersonnel = await db.select().from(users).where(eq(users.role, 'livreur'));\n\n    return deliveryPersonnel.map(person => ({\n      ...person,\n      totalDeliveries: 0, // Would need proper counting\n      activeDeliveries: 0, // Would need proper counting\n      pharmacyName: null, // Would need joins\n      rating: 5.0,\n      isActive: person.isActive !== false\n    }));\n  }\n\n  // Order management methods\n  async getOrderById(orderId: string): Promise<Order | undefined> {\n    return this.getOrder(orderId);\n  }\n\n  async updateOrderStatus(orderId: string, status: 'pending' | 'confirmed' | 'preparing' | 'ready_for_delivery' | 'in_transit' | 'arrived_pending_confirmation' | 'delivered' | 'cancelled'): Promise<Order | undefined> {\n    const updates: any = { \n      status, \n      updatedAt: new Date() \n    };\n\n    if (status === 'delivered') {\n      updates.deliveredAt = new Date();\n    }\n\n    const result = await db.update(orders).set(updates).where(eq(orders.id, orderId)).returning();\n    return result[0];\n  }\n\n  async deleteOrder(id: string): Promise<boolean> {\n    const db = await getDb();\n\n    try {\n      // First, delete all notifications associated with this order\n      await db.delete(notifications).where(eq(notifications.orderId, id));\n      console.log(`Deleted notifications for order ${id}`);\n\n      // Then delete the order itself\n      const result = await db.delete(orders).where(eq(orders.id, id)).returning();\n      const deleted = result.length > 0;\n      console.log(`Order ${id} ${deleted ? 'successfully deleted' : 'not found'} from PostgreSQL`);\n      return deleted;\n    } catch (error) {\n      console.error(`Error deleting order ${id}:`, error);\n      return false;\n    }\n  }\n\n  async cleanupOldOrders(): Promise<number> {\n    const db = await getDb();\n    \n    try {\n      const now = new Date();\n      const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n      const fiveDaysAgo = new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000);\n\n      // Supprimer les commandes non livr√©es de plus de 24h\n      const oldUndeliveredOrders = await db.delete(orders).where(\n        and(\n          ne(orders.status, 'delivered'),\n          sql`${orders.createdAt} < ${twentyFourHoursAgo.toISOString()}::timestamp`\n        )\n      ).returning({ id: orders.id });\n\n      // Supprimer les commandes livr√©es de plus de 5 jours\n      const oldDeliveredOrders = await db.delete(orders).where(\n        and(\n          eq(orders.status, 'delivered'),\n          sql`${orders.createdAt} < ${fiveDaysAgo.toISOString()}::timestamp`\n        )\n      ).returning({ id: orders.id });\n\n      const totalDeleted = oldUndeliveredOrders.length + oldDeliveredOrders.length;\n\n      if (totalDeleted > 0) {\n        console.log(`üóëÔ∏è Nettoyage automatique: ${totalDeleted} commandes supprim√©es (${oldUndeliveredOrders.length} non livr√©es + ${oldDeliveredOrders.length} livr√©es)`);\n        \n        // Supprimer aussi les notifications associ√©es aux commandes supprim√©es\n        const deletedOrderIds = [\n          ...oldUndeliveredOrders.map(o => o.id),\n          ...oldDeliveredOrders.map(o => o.id)\n        ];\n        \n        if (deletedOrderIds.length > 0) {\n          const deletedNotifications = await db.delete(notifications).where(\n            sql`${notifications.orderId} = ANY(${deletedOrderIds})`\n          ).returning({ id: notifications.id });\n          \n          console.log(`üóëÔ∏è ${deletedNotifications.length} notifications associ√©es supprim√©es`);\n        }\n      }\n\n      return totalDeleted;\n    } catch (error) {\n      console.error('Erreur lors du nettoyage automatique des commandes:', error);\n      return 0;\n    }\n  }\n\n  // M√©thodes pour la gestion des assignations et acceptation/rejet\n  async acceptDeliveryAssignment(orderId: string, deliveryPersonId: string): Promise<Order | undefined> {\n    const db = await getDb();\n\n    // V√©rifier que l'assignation est valide et non expir√©e\n    const order = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);\n    if (!order[0] || order[0].deliveryPersonId !== deliveryPersonId || order[0].status !== 'assigned_pending_acceptance') {\n      return undefined;\n    }\n\n    // V√©rifier expiration (3 minutes)\n    if (order[0].assignedAt) {\n      const assignedTime = new Date(order[0].assignedAt).getTime();\n      const now = new Date().getTime();\n      const diffMinutes = (now - assignedTime) / (1000 * 60);\n\n      if (diffMinutes > 3) {\n        // Expir√©e, r√©jecter automatiquement\n        await this.rejectDeliveryAssignment(orderId, deliveryPersonId, true);\n        return undefined;\n      }\n    }\n\n    // Accepter la livraison\n    const result = await db.update(orders).set({\n      status: 'in_transit',\n      updatedAt: new Date(),\n    }).where(eq(orders.id, orderId)).returning();\n\n    if (result[0]) {\n      // Notifier le patient\n      await db.insert(notifications).values({\n        userId: order[0].userId,\n        title: 'Livreur en route',\n        body: `Votre livreur a accept√© la livraison et est en route vers votre adresse.`,\n        type: 'delivery_accepted',\n        orderId: orderId\n      });\n    }\n\n    return result[0];\n  }\n\n  async rejectDeliveryAssignment(orderId: string, deliveryPersonId: string, isExpired: boolean = false): Promise<boolean> {\n    const db = await getDb();\n\n    // V√©rifier que l'assignation est valide\n    const order = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);\n    if (!order[0] || order[0].deliveryPersonId !== deliveryPersonId || order[0].status !== 'assigned_pending_acceptance') {\n      return false;\n    }\n\n    // R√©assigner la commande (retourner en statut preparing)\n    await db.update(orders).set({\n      status: 'preparing',\n      deliveryPersonId: null,\n      assignedAt: null,\n      updatedAt: new Date(),\n    }).where(eq(orders.id, orderId));\n\n    // Notifier selon le type de rejet\n    if (!isExpired) {\n      await db.insert(notifications).values({\n        userId: deliveryPersonId,\n        title: 'Livraison refus√©e',\n        body: `Vous avez refus√© la commande #${orderId.slice(0, 8)}. Elle sera r√©assign√©e √† un autre livreur.`,\n        type: 'delivery_rejected',\n        orderId: orderId\n      });\n    }\n\n    return true;\n  }\n\n  async cleanupExpiredAssignments(): Promise<void> {\n    const db = await getDb();\n    const threeMinutesAgo = new Date(Date.now() - 3 * 60 * 1000);\n\n    // Trouver les commandes expir√©es\n    const expiredOrders = await db.select().from(orders).where(\n      and(\n        eq(orders.status, 'assigned_pending_acceptance'),\n        lt(orders.assignedAt, threeMinutesAgo)\n      )\n    );\n\n    // Nettoyer chaque commande expir√©e\n    for (const order of expiredOrders) {\n      await db.update(orders).set({\n        status: 'ready_for_delivery',\n        deliveryPersonId: null,\n        assignedAt: null,\n        updatedAt: new Date(),\n      }).where(eq(orders.id, order.id));\n\n      // Notifier le livreur que l'assignation a expir√©\n      if (order.deliveryPersonId) {\n        await db.insert(notifications).values({\n          userId: order.deliveryPersonId,\n          title: 'Assignation expir√©e',\n          body: `La commande #${order.id.slice(0, 8)} a √©t√© r√©assign√©e car vous n'avez pas r√©pondu dans les 3 minutes.`,\n          type: 'assignment_expired',\n          orderId: order.id\n        });\n      }\n    }\n  }\n\n  // Les m√©thodes delivery profile/vehicle ont √©t√© supprim√©es - informations consolid√©es dans users\n\n  async confirmDeliveryArrival(orderId: string): Promise<Order | undefined> {\n    const db = await getDb();\n    const result = await db.update(orders)\n      .set({\n        deliveryPersonConfirmedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(orders.id, orderId))\n      .returning();\n    return result[0];\n  }\n\n  // Missing methods from interface\n  async cleanupOldOrders(): Promise<number> {\n    const db = await getDb();\n    const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 heures\n    \n    const deletedOrders = await db.delete(orders)\n      .where(and(\n        eq(orders.status, 'cancelled'),\n        lt(orders.updatedAt, cutoffTime)\n      ))\n      .returning({ id: orders.id });\n    \n    return deletedOrders.length;\n  }\n\n  // Password reset operations\n  async createPasswordResetCode(resetCode: InsertPasswordResetCode): Promise<PasswordResetCode> {\n    const db = await getDb();\n    const result = await db.insert(passwordResetCodes).values(resetCode).returning();\n    return result[0];\n  }\n\n  async getValidPasswordResetCode(email: string, code: string): Promise<PasswordResetCode | undefined> {\n    const db = await getDb();\n    const now = new Date();\n    const result = await db.select().from(passwordResetCodes)\n      .where(and(\n        eq(passwordResetCodes.email, email),\n        eq(passwordResetCodes.code, code),\n        eq(passwordResetCodes.used, false),\n        gt(passwordResetCodes.expiresAt, now)\n      ))\n      .limit(1);\n    return result[0];\n  }\n\n  async markPasswordResetCodeUsed(id: string): Promise<void> {\n    const db = await getDb();\n    await db.update(passwordResetCodes)\n      .set({ used: true })\n      .where(eq(passwordResetCodes.id, id));\n  }\n}","size_bytes":39668},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport session from \"express-session\";\nimport { createStorage } from \"./storage-factory\";\nimport {\n  insertPharmacySchema,\n  insertPrescriptionSchema,\n  insertOrderSchema,\n  insertNotificationSchema,\n  registerSchema,\n  loginSchema,\n  requestPasswordResetSchema,\n  verifyResetCodeSchema,\n  resetPasswordSchema\n} from \"@shared/schema\";\nimport emailjs from '@emailjs/nodejs';\n\n// Create storage instance\nconst storage = createStorage();\nimport { z } from \"zod\";\n\n// Multer configuration for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPEG, PNG and WebP are allowed.'));\n    }\n  },\n});\n\n// Multer configuration for delivery applications (allows documents)\nconst uploadDeliveryDocs = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'image/jpeg', \n      'image/png', \n      'image/webp',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    ];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPEG, PNG, WebP, PDF and Word documents are allowed.'));\n    }\n  },\n});\n\n// Interface pour les sessions\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    language?: string;\n  }\n}\n\n// Middleware d'authentification\nconst requireAuth = (req: any, res: any, next: any) => {\n  console.log('Auth Check:', {\n    sessionID: req.sessionID,\n    userId: req.session?.userId,\n    hasSession: !!req.session\n  });\n\n  if (!req.session.userId) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  next();\n};\n\n// Middleware pour v√©rifier le r√¥le de l'utilisateur\nconst requireRole = (role: string) => (req: any, res: any, next: any) => {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  storage.getUser(req.session.userId).then(user => {\n    if (!user || user.role !== role) {\n      return res.status(403).json({ message: `Access denied. Role ${role} required.` });\n    }\n    next();\n  }).catch(error => {\n    console.error('Error in requireRole middleware:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  });\n};\n\nexport async function registerRoutes(app: Express, io?: SocketIOServer): Promise<Server> {\n  // Configuration CORS pour les cookies\n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Credentials', 'true');\n    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    next();\n  });\n\n  // Configuration des sessions\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-development-only',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // D√©sactiv√© temporairement pour d√©bugger\n      httpOnly: false, // Permettre l'acc√®s c√¥t√© client pour d√©bugger\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 jours\n      sameSite: 'lax' // Important pour le cross-origin\n    },\n    name: 'pharma-session' // Nom personnalis√© pour √©viter les conflits\n  }));\n\n  // Middleware de d√©bogage des sessions\n  app.use((req: any, res, next) => {\n    console.log('Session Debug:', {\n      sessionID: req.sessionID,\n      userId: req.session?.userId,\n      cookies: req.headers.cookie,\n      path: req.path\n    });\n    next();\n  });\n\n  // Health check\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // Test route to verify code changes are applied\n  app.get('/api/test-debug', (req, res) => {\n    console.log('üöÄ TEST ROUTE ACCESSED - CHANGES ARE APPLIED!');\n    res.json({ message: 'Debug test route working', timestamp: new Date().toISOString() });\n  });\n\n  // Simple test route for pharmacy GET debugging\n  app.get('/api/test-pharmacy-get', requireAuth, (req, res) => {\n    console.log('üéØ PHARMACY GET TEST - User:', req.session.userId);\n    res.json({ success: true, userId: req.session.userId });\n  });\n\n  // Test POST route to compare with GET\n  app.post('/api/test-pharmacy-post', requireAuth, (req, res) => {\n    console.log('üéØ PHARMACY POST TEST - User:', req.session.userId);\n    res.json({ success: true, userId: req.session.userId, method: 'POST' });\n  });\n\n  // Routes d'authentification\n  app.post('/api/auth/register', upload.fields([\n    { name: 'idDocument', maxCount: 1 },\n    { name: 'professionalDocument', maxCount: 1 },\n    { name: 'drivingLicense', maxCount: 1 }\n  ]), async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n\n      // V√©rifier si l'utilisateur existe d√©j√†\n      const existingUser = await storage.getUserByPhone(validatedData.phone);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Un utilisateur avec ce num√©ro existe d√©j√†' });\n      }\n\n      // Set verification status based on role\n      let verificationStatus = \"approved\"; // Default for patients\n      if (validatedData.role === \"pharmacien\" || validatedData.role === \"livreur\") {\n        verificationStatus = \"pending\"; // Requires admin validation\n      }\n\n      // Process uploaded documents\n      let idDocumentUrl = null;\n      let professionalDocumentUrl = null;\n      let drivingLicenseUrl = null;\n\n      if (req.files) {\n        const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n\n        if (files['idDocument'] && files['idDocument'][0]) {\n          const idDoc = files['idDocument'][0];\n          idDocumentUrl = `data:${idDoc.mimetype};base64,${idDoc.buffer.toString('base64')}`;\n          console.log('ID Document uploaded:', idDoc.originalname);\n        }\n\n        if (files['professionalDocument'] && files['professionalDocument'][0]) {\n          const profDoc = files['professionalDocument'][0];\n          professionalDocumentUrl = `data:${profDoc.mimetype};base64,${profDoc.buffer.toString('base64')}`;\n          console.log('Professional Document uploaded:', profDoc.originalname);\n        }\n\n        if (files['drivingLicense'] && files['drivingLicense'][0]) {\n          const drivingDoc = files['drivingLicense'][0];\n          drivingLicenseUrl = `data:${drivingDoc.mimetype};base64,${drivingDoc.buffer.toString('base64')}`;\n          console.log('Driving License uploaded:', drivingDoc.originalname);\n        }\n      }\n\n      // Cr√©er l'utilisateur\n      const { confirmPassword, ...userData } = validatedData;\n      const user = await storage.createUser({\n        ...userData,\n        verificationStatus,\n        idDocumentUrl,\n        professionalDocumentUrl,\n        drivingLicenseUrl,\n      });\n\n      // D√©marrer la session\n      req.session.userId = user.id;\n      req.session.language = user.language || \"fr\";\n\n      // Retourner les infos utilisateur (sans le mot de passe)\n      const { password, ...userInfo } = user;\n      res.status(201).json(userInfo);\n    } catch (error) {\n      console.error('Erreur lors de l\\'inscription:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Donn√©es invalides', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Erreur lors de l\\'inscription' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n\n      const user = await storage.loginUser(validatedData.phone, validatedData.password);\n      if (!user) {\n        return res.status(400).json({ message: 'Num√©ro de t√©l√©phone ou mot de passe incorrect' });\n      }\n\n      // D√©marrer la session avec callback pour assurer la sauvegarde\n      req.session.userId = user.id;\n      req.session.language = user.language || \"fr\";\n\n      // Sauvegarder explicitement la session\n      req.session.save((err) => {\n        if (err) {\n          console.error('Erreur sauvegarde session:', err);\n          return res.status(500).json({ message: 'Erreur de session' });\n        }\n\n        console.log('Session sauvegard√©e pour utilisateur:', user.id);\n\n        // Retourner les infos utilisateur (sans le mot de passe)\n        const { password, ...userInfo } = user;\n        res.json(userInfo);\n      });\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Donn√©es invalides', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Erreur lors de la connexion' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Erreur lors de la d√©connexion' });\n      }\n      res.json({ message: 'D√©connexion r√©ussie' });\n    });\n  });\n\n  // Password reset routes\n  app.post('/api/auth/request-reset', async (req, res) => {\n    try {\n      const validatedData = requestPasswordResetSchema.parse(req.body);\n      const { email } = validatedData;\n\n      // Find user by email (we'll add email field to User later)\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists or not for security\n        return res.json({ message: 'Si cet email existe, un code de v√©rification a √©t√© envoy√©.' });\n      }\n\n      // Generate 6-digit code\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      // Store reset code (expires in 10 minutes)\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000);\n      await storage.createPasswordResetCode({\n        email,\n        code,\n        expiresAt,\n      });\n\n      // Send email via EmailJS\n      try {\n        await emailjs.send(\n          'service_1',\n          'template_1',\n          {\n            passcode: code,\n            email: email,\n            to_email: email\n          },\n          {\n            publicKey: process.env.EMAILJS_PUBLIC_KEY,\n            privateKey: process.env.EMAILJS_PRIVATE_KEY,\n          }\n        );\n        \n        console.log('Code de r√©cup√©ration envoy√© √†:', email);\n      } catch (emailError) {\n        console.error('Erreur envoi email:', emailError);\n        return res.status(500).json({ message: 'Erreur lors de l\\'envoi de l\\'email' });\n      }\n\n      res.json({ message: 'Code de v√©rification envoy√© par email' });\n    } catch (error) {\n      console.error('Erreur demande de r√©initialisation:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Email invalide', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Erreur lors de la demande de r√©initialisation' });\n    }\n  });\n\n  app.post('/api/auth/verify-reset-code', async (req, res) => {\n    try {\n      const validatedData = verifyResetCodeSchema.parse(req.body);\n      const { email, code } = validatedData;\n\n      // Find valid, non-expired, non-used code\n      const resetCode = await storage.getValidPasswordResetCode(email, code);\n      if (!resetCode) {\n        return res.status(400).json({ message: 'Code invalide ou expir√©' });\n      }\n\n      res.json({ message: 'Code valide', valid: true });\n    } catch (error) {\n      console.error('Erreur v√©rification code:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Donn√©es invalides', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Erreur lors de la v√©rification' });\n    }\n  });\n\n  app.post('/api/auth/reset-password', async (req, res) => {\n    try {\n      const validatedData = resetPasswordSchema.parse(req.body);\n      const { email, code, password } = validatedData;\n\n      // Verify code is still valid\n      const resetCode = await storage.getValidPasswordResetCode(email, code);\n      if (!resetCode) {\n        return res.status(400).json({ message: 'Code invalide ou expir√©' });\n      }\n\n      // Update user password and mark code as used\n      await storage.resetUserPassword(email, password);\n      await storage.markPasswordResetCodeUsed(resetCode.id);\n\n      res.json({ message: 'Mot de passe r√©initialis√© avec succ√®s' });\n    } catch (error) {\n      console.error('Erreur r√©initialisation mot de passe:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Donn√©es invalides', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Erreur lors de la r√©initialisation' });\n    }\n  });\n\n  // Get current user\n    app.get('/api/auth/user', requireAuth, async (req, res) => {\n      try {\n        const userId = req.session.userId;\n        const user = await storage.getUser(userId);\n\n        if (!user) {\n          return res.status(404).json({ message: 'User not found' });\n        }\n\n        res.json(user);\n      } catch (error) {\n        console.error('Error fetching user:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    });\n\n    // Get user statistics\n    app.get('/api/auth/user-stats', requireAuth, async (req, res) => {\n      try {\n        const userId = req.session.userId;\n        const user = await storage.getUser(userId);\n\n        if (!user) {\n          return res.status(404).json({ message: 'User not found' });\n        }\n\n        const userStats = await storage.getUserStats(userId);\n        res.json(userStats);\n      } catch (error) {\n        console.error('Error fetching user stats:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    });\n\n  app.put('/api/auth/user', requireAuth, async (req: any, res) => {\n    try {\n      const updates = req.body;\n      const updatedUser = await storage.updateUser(req.session.userId, updates);\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'Utilisateur non trouv√©' });\n      }\n\n      // Mettre √† jour la langue de session si elle a chang√©\n      if (updates.language) {\n        req.session.language = updates.language;\n      }\n\n      // Retourner les infos utilisateur (sans le mot de passe)\n      const { password, ...userInfo } = updatedUser;\n      res.json(userInfo);\n    } catch (error) {\n      console.error('Erreur lors de la mise √† jour du profil:', error);\n      res.status(500).json({ message: 'Erreur lors de la mise √† jour' });\n    }\n  });\n\n  // Endpoint pour v√©rifier le mot de passe (pour l'acc√®s aux param√®tres)\n  app.post('/api/auth/verify-password', requireAuth, async (req: any, res) => {\n    try {\n      const { phone, password } = req.body;\n\n      if (!phone || !password) {\n        return res.status(400).json({ message: 'T√©l√©phone et mot de passe requis' });\n      }\n\n      // V√©rifier que le t√©l√©phone correspond √† l'utilisateur connect√©\n      const currentUser = await storage.getUser(req.session.userId);\n      if (!currentUser || currentUser.phone !== phone) {\n        return res.status(403).json({ message: 'Num√©ro de t√©l√©phone incorrect' });\n      }\n\n      // V√©rifier le mot de passe\n      const user = await storage.loginUser(phone, password);\n      if (!user || user.id !== req.session.userId) {\n        return res.status(401).json({ message: 'Mot de passe incorrect' });\n      }\n\n      res.json({ success: true, message: 'Mot de passe v√©rifi√©' });\n    } catch (error) {\n      console.error('Erreur lors de la v√©rification du mot de passe:', error);\n      res.status(401).json({ message: 'Mot de passe incorrect' });\n    }\n  });\n\n  // Upload profile image\n  app.post('/api/auth/upload-profile-image', requireAuth, upload.single('profileImage'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'Aucun fichier fourni' });\n      }\n\n      // Simuler la sauvegarde de l'image (en production, vous sauvegarderez sur un service cloud)\n      const imageUrl = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;\n\n      const updatedUser = await storage.updateUser(req.session.userId, {\n        profileImageUrl: imageUrl\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'Utilisateur non trouv√©' });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Erreur lors de l\\'upload de l\\'image:', error);\n      res.status(500).json({ message: 'Erreur lors de l\\'upload de l\\'image' });\n    }\n  });\n\n  // Pharmacies endpoints\n  app.get('/api/pharmacies', async (req, res) => {\n    try {\n      const { lat, lng, radius = 50 } = req.query;\n      console.log('Fetching pharmacies with params:', { lat, lng, radius });\n\n      const pharmacies = await storage.getPharmacies(\n        lat ? parseFloat(lat as string) : undefined,\n        lng ? parseFloat(lng as string) : undefined,\n        radius ? parseInt(radius as string) : undefined\n      );\n\n      console.log(`Found ${pharmacies.length} pharmacies`);\n\n      // Ajouter des headers pour √©viter la mise en cache excessive\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n\n      res.json(pharmacies);\n    } catch (error) {\n      console.error('Error fetching pharmacies:', error);\n      res.status(500).json({ message: 'Failed to fetch pharmacies' });\n    }\n  });\n\n  app.get('/api/pharmacies/:id', async (req, res) => {\n    try {\n      const pharmacy = await storage.getPharmacy(req.params.id);\n      if (!pharmacy) {\n        return res.status(404).json({ message: 'Pharmacy not found' });\n      }\n      res.json(pharmacy);\n    } catch (error) {\n      console.error('Error fetching pharmacy:', error);\n      res.status(500).json({ message: 'Failed to fetch pharmacy' });\n    }\n  });\n\n  app.post('/api/pharmacies', requireAuth, async (req: any, res) => {\n    try {\n      // V√©rifier que l'utilisateur est un pharmacien\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Seuls les pharmaciens peuvent cr√©er une pharmacie' });\n      }\n\n      // V√©rifier si le pharmacien a d√©j√† une pharmacie\n      const existingPharmacy = await storage.getPharmacyByUserId(req.session.userId);\n      if (existingPharmacy) {\n        return res.status(400).json({ \n          message: 'Vous avez d√©j√† une pharmacie associ√©e √† votre compte',\n          existingPharmacy: existingPharmacy\n        });\n      }\n\n      // Convert numeric fields to strings for decimal database fields\n      const bodyData = {\n        ...req.body,\n        latitude: req.body.latitude ? String(req.body.latitude) : undefined,\n        longitude: req.body.longitude ? String(req.body.longitude) : undefined,\n        rating: req.body.rating ? String(req.body.rating) : undefined,\n        reviewCount: req.body.reviewCount ? String(req.body.reviewCount) : undefined,\n      };\n\n      console.log('üìä Donn√©es de pharmacie re√ßues:', bodyData);\n\n      const pharmacyData = insertPharmacySchema.parse(bodyData);\n      const pharmacy = await storage.createPharmacy(pharmacyData);\n\n      // Associer automatiquement la pharmacie au pharmacien\n      await storage.updateUser(req.session.userId, { pharmacyId: pharmacy.id });\n\n      console.log('‚úÖ Nouvelle pharmacie cr√©√©e:', {\n        id: pharmacy.id,\n        name: pharmacy.name,\n        address: pharmacy.address,\n        ownerId: req.session.userId\n      });\n\n      // Ajouter des headers pour √©viter la mise en cache\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n\n      res.status(201).json(pharmacy);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error('üö® Erreurs de validation pharmacie:', error.errors);\n        return res.status(400).json({ \n          message: 'Donn√©es de pharmacie invalides', \n          errors: error.errors,\n          details: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        });\n      }\n      console.error('‚ùå Erreur lors de la cr√©ation de la pharmacie:', error);\n      res.status(500).json({ message: 'Failed to create pharmacy' });\n    }\n  });\n\n  // Prescriptions endpoints\n  app.post('/api/prescriptions', requireAuth, upload.single('prescription'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'Prescription image is required' });\n      }\n\n      // In a real implementation, you would:\n      // 1. Upload the file to cloud storage (AWS S3, Google Cloud, etc.)\n      // 2. Process the image with OCR to extract medication info\n      // 3. Store the metadata in the database\n\n      // For now, we'll simulate storing the image URL\n      const imageUrl = `/uploads/prescriptions/${Date.now()}-${req.file.originalname}`;\n\n      const prescriptionData = {\n        userId: req.session.userId, // Utiliser l'ID de l'utilisateur connect√©\n        imageUrl,\n        status: 'pending' as const,\n        medications: null, // Would be populated by OCR processing\n      };\n\n      const prescription = await storage.createPrescription(prescriptionData);\n\n      // Simulate OCR processing with a delay\n      setTimeout(async () => {\n        try {\n          await storage.updatePrescriptionStatus(prescription.id, 'processed');\n          // In real app, would send push notification here\n        } catch (error) {\n          console.error('Error updating prescription status:', error);\n        }\n      }, 3000);\n\n      res.status(201).json(prescription);\n    } catch (error) {\n      console.error('Error uploading prescription:', error);\n      res.status(500).json({ message: 'Failed to upload prescription' });\n    }\n  });\n\n  app.get('/api/prescriptions', requireAuth, async (req: any, res) => {\n    try {\n      const prescriptions = await storage.getUserPrescriptions(req.session.userId);\n      res.json(prescriptions);\n    } catch (error) {\n      console.error('Error fetching prescriptions:', error);\n      res.status(500).json({ message: 'Failed to fetch prescriptions' });\n    }\n  });\n\n  app.get('/api/prescriptions/:id', async (req, res) => {\n    try {\n      const prescription = await storage.getPrescription(req.params.id);\n      if (!prescription) {\n        return res.status(404).json({ message: 'Prescription not found' });\n      }\n      res.json(prescription);\n    } catch (error) {\n      console.error('Error fetching prescription:', error);\n      res.status(500).json({ message: 'Failed to fetch prescription' });\n    }\n  });\n\n  // Orders endpoints\n  app.post('/api/orders', requireAuth, upload.fields([\n    { name: 'prescriptionPhoto', maxCount: 1 },\n    { name: 'bonDocument0', maxCount: 1 },\n    { name: 'bonDocument1', maxCount: 1 },\n    { name: 'bonDocument2', maxCount: 1 },\n    { name: 'bonDocument3', maxCount: 1 },\n    { name: 'bonDocument4', maxCount: 1 }\n  ]), async (req: any, res) => {\n    try {\n      console.log('Order request body:', req.body);\n      console.log('Order files:', req.files);\n\n      const orderData = { ...req.body, userId: req.session.userId };\n\n      // Ensure pharmacyId is present\n      if (!orderData.pharmacyId) {\n        return res.status(400).json({ message: 'Pharmacy ID is required' });\n      }\n\n      // Handle prescription photo upload\n      let prescriptionId = null;\n      if (req.files && req.files['prescriptionPhoto'] && req.files['prescriptionPhoto'][0]) {\n        const prescriptionFile = req.files['prescriptionPhoto'][0];\n        console.log('Prescription photo found:', prescriptionFile.originalname);\n\n        // Create a prescription record\n        const prescriptionData = {\n          userId: req.session.userId,\n          imageUrl: `data:${prescriptionFile.mimetype};base64,${prescriptionFile.buffer.toString('base64')}`,\n          status: 'processed' as const,\n          medications: null,\n        };\n\n        const prescription = await storage.createPrescription(prescriptionData);\n        prescriptionId = prescription.id;\n        console.log('Created prescription with ID:', prescriptionId);\n      }\n\n      // Add prescription ID to order data\n      if (prescriptionId) {\n        orderData.prescriptionId = prescriptionId;\n      }\n\n      // Handle BON documents\n      const bonDocumentsInfo = []; // Renamed from bonDocuments to avoid shadowing\n      for (let i = 0; i < 5; i++) {\n        const fieldName = `bonDocument${i}`;\n        if (req.files && req.files[fieldName] && req.files[fieldName][0]) {\n          const bonFile = req.files[fieldName][0];\n          bonDocumentsInfo.push({\n            name: bonFile.originalname,\n            data: `data:${bonFile.mimetype};base64,${bonFile.buffer.toString('base64')}`,\n          });\n        }\n      }\n\n      // R√©cup√©rer les informations de la pharmacie\n      const pharmacy = await storage.getPharmacyById(orderData.pharmacyId);\n\n      // Extraire les m√©dicaments du body\n      const medications = orderData.medications ? \n        (typeof orderData.medications === 'string' ? JSON.parse(orderData.medications) : orderData.medications) \n        : [];\n\n      // Cr√©er la commande\n      const order = await storage.createOrder({\n        userId: req.session.userId,\n        pharmacyId: orderData.pharmacyId,\n        deliveryAddress: orderData.deliveryAddress,\n        deliveryLatitude: orderData.deliveryLatitude || null,\n        deliveryLongitude: orderData.deliveryLongitude || null,\n        deliveryNotes: orderData.deliveryNotes || null,\n        medications: JSON.stringify(medications),\n        status: 'pending',\n        totalAmount: '0', // Sera mis √† jour par la pharmacie\n        prescriptionId: prescriptionId,\n        bonDocuments: bonDocumentsInfo.length > 0 ? JSON.stringify(bonDocumentsInfo) : null\n      });\n\n      // Send confirmation notification\n      await storage.createNotification({\n        userId: order.userId,\n        title: 'Commande confirm√©e',\n        body: `Votre commande #${order.id.slice(-6)} a √©t√© confirm√©e`,\n        type: 'order_update',\n        orderId: order.id,\n        isRead: false,\n      });\n\n      res.status(201).json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid order data', errors: error.errors });\n      }\n      console.error('Error creating order:', error);\n      res.status(500).json({ message: 'Failed to create order' });\n    }\n  });\n\n  app.get('/api/orders', requireAuth, async (req: any, res) => {\n    try {\n      const orders = await storage.getUserOrders(req.session.userId);\n      res.json(orders);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  app.get('/api/orders/current', requireAuth, async (req: any, res) => {\n    try {\n      const order = await storage.getCurrentOrder(req.session.userId);\n      res.json(order);\n    } catch (error) {\n      console.error('Error fetching current order:', error);\n      res.status(500).json({ message: 'Failed to fetch current order' });\n    }\n  });\n\n  // Get orders assigned to the current delivery person (including pending acceptance)\n  app.get('/api/orders/my-assigned', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const assignedOrders = await storage.getMyAssignedOrders(req.session.userId);\n      res.json(assignedOrders);\n    } catch (error) {\n      console.error('Error fetching assigned orders:', error);\n      res.status(500).json({ message: 'Failed to fetch assigned orders' });\n    }\n  });\n\n  // Alternative endpoint for livreur dashboard (same functionality)\n  app.get('/api/livreur/deliveries', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const assignedOrders = await storage.getMyAssignedOrders(req.session.userId);\n      res.json(assignedOrders);\n    } catch (error) {\n      console.error('Error fetching assigned orders:', error);\n      res.status(500).json({ message: 'Failed to fetch assigned orders' });\n    }\n  });\n\n  // Alternative route for orders endpoint\n  app.get('/api/livreur/orders', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const assignedOrders = await storage.getMyAssignedOrders(req.session.userId);\n      res.json(assignedOrders);\n    } catch (error) {\n      console.error('Error fetching assigned orders:', error);\n      res.status(500).json({ message: 'Failed to fetch assigned orders' });\n    }\n  });\n\n  // Accept a delivery assignment\n  app.post('/api/orders/:orderId/accept', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const order = await storage.acceptDeliveryAssignment(req.params.orderId, req.session.userId);\n      if (!order) {\n        return res.status(404).json({ message: 'Commande non trouv√©e ou assignation expir√©e' });\n      }\n\n      res.json({ message: 'Livraison accept√©e avec succ√®s', order });\n    } catch (error) {\n      console.error('Error accepting delivery assignment:', error);\n      res.status(500).json({ message: 'Failed to accept delivery assignment' });\n    }\n  });\n\n  // Alternative route for accepting deliveries from livreur dashboard\n  app.post('/api/livreur/deliveries/:orderId/accept', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const order = await storage.acceptDeliveryAssignment(req.params.orderId, req.session.userId);\n      if (!order) {\n        return res.status(404).json({ message: 'Commande non trouv√©e ou assignation expir√©e' });\n      }\n\n      res.json({ message: 'Livraison accept√©e avec succ√®s', order });\n    } catch (error) {\n      console.error('Error accepting delivery assignment:', error);\n      res.status(500).json({ message: 'Failed to accept delivery assignment' });\n    }\n  });\n\n  // Reject a delivery assignment\n  app.post('/api/orders/:orderId/reject', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const success = await storage.rejectDeliveryAssignment(req.params.orderId, req.session.userId, false);\n      if (!success) {\n        return res.status(404).json({ message: 'Commande non trouv√©e ou assignation d√©j√† trait√©e' });\n      }\n\n      res.json({ message: 'Livraison refus√©e avec succ√®s' });\n    } catch (error) {\n      console.error('Error rejecting delivery assignment:', error);\n      res.status(500).json({ message: 'Failed to reject delivery assignment' });\n    }\n  });\n\n  // Alternative route for rejecting deliveries from livreur dashboard\n  app.post('/api/livreur/deliveries/:orderId/reject', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s non autoris√© - R√¥le livreur requis' });\n      }\n\n      const success = await storage.rejectDeliveryAssignment(req.params.orderId, req.session.userId, false);\n      if (!success) {\n        return res.status(404).json({ message: 'Commande non trouv√©e ou assignation d√©j√† trait√©e' });\n      }\n\n      res.json({ message: 'Livraison refus√©e avec succ√®s' });\n    } catch (error) {\n      console.error('Error rejecting delivery assignment:', error);\n      res.status(500).json({ message: 'Failed to reject delivery assignment' });\n    }\n  });\n\n  app.get('/api/orders/:id', async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error('Error fetching order:', error);\n      res.status(500).json({ message: 'Failed to fetch order' });\n    }\n  });\n\n  app.patch('/api/orders/:id/status', async (req, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n\n      if (order) {\n        // Send status update notification\n        await storage.createNotification({\n          userId: order.userId,\n          title: 'Mise √† jour de commande',\n          body: `Votre commande est maintenant: ${status}`,\n          type: 'order_update',\n          orderId: order.id,\n          isRead: false,\n        });\n      }\n\n      res.json(order);\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      res.status(500).json({ message: 'Failed to update order status' });\n    }\n  });\n\n  // Delivery persons endpoints\n  app.get('/api/delivery-persons/:id', async (req, res) => {\n    try {\n      // Utiliser getUser au lieu de getDeliveryPerson qui n'existe pas\n      const deliveryPerson = await storage.getUser(req.params.id);\n      if (!deliveryPerson || deliveryPerson.role !== 'livreur') {\n        return res.status(404).json({ message: 'Delivery person not found' });\n      }\n      res.json(deliveryPerson);\n    } catch (error) {\n      console.error('Error fetching delivery person:', error);\n      res.status(500).json({ message: 'Failed to fetch delivery person' });\n    }\n  });\n\n  // Notifications endpoints\n  app.get('/api/notifications', requireAuth, async (req: any, res) => {\n    try {\n      const notifications = await storage.getUserNotifications(req.session.userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      res.status(500).json({ message: 'Failed to fetch notifications' });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', async (req, res) => {\n    try {\n      const notification = await storage.markNotificationAsRead(req.params.id);\n      res.json(notification);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      res.status(500).json({ message: 'Failed to update notification' });\n    }\n  });\n\n\n\n  // Geolocation helper endpoint\n  app.get('/api/location/reverse', async (req, res) => {\n    try {\n      const { lat, lng } = req.query;\n      if (!lat || !lng) {\n        return res.status(400).json({ message: 'Latitude and longitude are required' });\n      }\n\n      // Using OpenStreetMap Nominatim for free reverse geocoding\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`,\n        {\n          headers: {\n            'User-Agent': 'PharmaExpressCI/1.0'\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Geocoding service unavailable');\n      }\n\n      const data = await response.json();\n\n      if (!data || !data.display_name) {\n        throw new Error('No address found for these coordinates');\n      }\n\n      const address = {\n        formatted_address: data.display_name,\n        city: data.address?.city || data.address?.town || data.address?.village || '',\n        country: data.address?.country || 'C√¥te d\\'Ivoire',\n        postal_code: data.address?.postcode || '',\n        state: data.address?.state || '',\n        region: data.address?.region || ''\n      };\n\n      res.json(address);\n    } catch (error) {\n      console.error('Error with reverse geocoding:', error);\n\n      // Fallback to a generic response\n      const fallbackAddress = {\n        formatted_address: `Position GPS: ${req.query.lat}, ${req.query.lng}`,\n        city: '',\n        country: 'C√¥te d\\'Ivoire',\n        postal_code: '',\n      };\n\n      res.json(fallbackAddress);\n    }\n  });\n\n  // Admin routes for SupervisorLock\n  const requireAdmin = async (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    if (!user || user.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    next();\n  };\n\n  // Get pending users for validation\n  app.get('/api/admin/pending-users', requireAdmin, async (req, res) => {\n    try {\n      const pendingUsers = await storage.getPendingUsers();\n      res.json(pendingUsers);\n    } catch (error) {\n      console.error('Error fetching pending users:', error);\n      res.status(500).json({ message: 'Failed to fetch pending users' });\n    }\n  });\n\n  // Validate or reject user account\n  app.post('/api/admin/validate-user', requireAdmin, async (req, res) => {\n    try {\n      const { userId, action } = req.body;\n\n      if (!userId || !action || !['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ message: 'Invalid request data' });\n      }\n\n      const newStatus = action === 'approve' ? 'approved' : 'rejected';\n      const updatedUser = await storage.updateUserVerificationStatus(userId, newStatus);\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      res.json({ message: `User ${action}d successfully`, user: updatedUser });\n    } catch (error) {\n      console.error('Error validating user:', error);\n      res.status(500).json({ message: 'Failed to validate user' });\n    }\n  });\n\n  // Get application statistics\n  app.get('/api/admin/stats', requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getApplicationStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      res.status(500).json({ message: 'Failed to fetch statistics' });\n    }\n  });\n\n  // Get all orders for admin\n  app.get('/api/admin/orders', requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrdersForAdmin();\n      res.json(orders);\n    } catch (error) {\n      console.error('Error fetching admin orders:', error);\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // Update order status (admin)\n  app.patch('/api/admin/orders/:orderId/status', requireAdmin, async (req, res) => {\n    try {\n      const { orderId } = req.params;\n      const { status } = req.body;\n\n      const updatedOrder = await storage.updateOrderStatus(orderId, status);\n      if (!updatedOrder) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      res.status(500).json({ message: 'Failed to update order status' });\n    }\n  });\n\n  // Get weekly statistics\n  app.get('/api/admin/weekly-stats', requireAdmin, async (req, res) => {\n    try {\n      const { date } = req.query;\n      const weekDate = date ? new Date(date as string) : new Date();\n      const stats = await storage.getWeeklyStats(weekDate);\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching weekly stats:', error);\n      res.status(500).json({ message: 'Failed to fetch weekly statistics' });\n    }\n  });\n\n  // Get all pharmacies for admin\n  app.get('/api/admin/pharmacies', requireAdmin, async (req, res) => {\n    try {\n      const pharmacies = await storage.getAllPharmaciesForAdmin();\n      res.json(pharmacies);\n    } catch (error) {\n      console.error('Error fetching admin pharmacies:', error);\n      res.status(500).json({ message: 'Failed to fetch pharmacies' });\n    }\n  });\n\n  // Update pharmacy status\n  app.patch('/api/admin/pharmacies/:pharmacyId/status', requireAdmin, async (req, res) => {\n    try {\n      const { pharmacyId } = req.params;\n      const { isActive } = req.body;\n\n      const updatedPharmacy = await storage.updatePharmacy(pharmacyId, { isOpen: isActive });\n      if (!updatedPharmacy) {\n        return res.status(404).json({ message: 'Pharmacy not found' });\n      }\n\n      res.json(updatedPharmacy);\n    } catch (error) {\n      console.error('Error updating pharmacy status:', error);\n      res.status(500).json({ message: 'Failed to update pharmacy status' });\n    }\n  });\n\n  // Get all delivery personnel for admin\n  app.get('/api/admin/delivery-personnel', requireAdmin, async (req, res) => {\n    try {\n      const personnel = await storage.getAllDeliveryPersonnelForAdmin();\n      res.json(personnel);\n    } catch (error) {\n      console.error('Error fetching delivery personnel:', error);\n      res.status(500).json({ message: 'Failed to fetch delivery personnel' });\n    }\n  });\n\n  // Update delivery person status\n  app.patch('/api/admin/delivery-personnel/:deliveryPersonId/status', requireAdmin, async (req, res) => {\n    try {\n      const { deliveryPersonId } = req.params;\n      const { isActive } = req.body;\n\n      const updatedPerson = await storage.updateUser(deliveryPersonId, { isActive });\n      if (!updatedPerson) {\n        return res.status(404).json({ message: 'Delivery person not found' });\n      }\n\n      res.json(updatedPerson);\n    } catch (error) {\n      console.error('Error updating delivery person status:', error);\n      res.status(500).json({ message: 'Failed to update delivery person status' });\n    }\n  });\n\n  // Admin respond to delivery application\n  app.post('/api/admin/delivery-applications/:applicationId/respond', requireAdmin, async (req, res) => {\n    try {\n      const { applicationId } = req.params;\n      const { action } = req.body;\n\n      if (!['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ message: 'Invalid action' });\n      }\n\n      // Get the user making the application\n      const user = await storage.getUser(applicationId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(404).json({ message: 'Delivery person not found' });\n      }\n\n      if (!user.appliedPharmacyId) {\n        return res.status(400).json({ message: 'No pharmacy application found' });\n      }\n\n      const result = await storage.respondToDeliveryApplication(applicationId, action, user.appliedPharmacyId);\n\n      if (!result) {\n        return res.status(404).json({ message: 'Application not found' });\n      }\n\n      res.json({ message: `Application ${action}d successfully`, result });\n    } catch (error) {\n      console.error('Error responding to delivery application:', error);\n      res.status(500).json({ message: 'Failed to respond to application' });\n    }\n  });\n\n  // Get pharmacist orders\n  app.get('/api/pharmacien/orders', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // If user has a pharmacyId, get orders for that pharmacy\n      // Otherwise get all orders (for now, until we properly associate pharmacists with pharmacies)\n      const orders = user.pharmacyId\n        ? await storage.getPharmacistOrders(user.pharmacyId)\n        : await storage.getAllPharmacistOrders();\n\n      res.json(orders);\n    } catch (error) {\n      console.error('Error fetching pharmacist orders:', error);\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // Get pharmacist prescriptions\n  app.get('/api/pharmacien/prescriptions', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const allPrescriptions = await storage.getAllPrescriptions();\n      res.json(allPrescriptions);\n    } catch (error) {\n      console.error('Error fetching pharmacist prescriptions:', error);\n      res.status(500).json({ message: 'Failed to fetch prescriptions' });\n    }\n  });\n\n  // Get user information by ID (for pharmacists)\n  app.get('/api/users/:userId', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.session.userId);\n      if (!currentUser || currentUser.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { userId } = req.params;\n      const userData = await storage.getUser(userId);\n      \n      if (!userData) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Retourner seulement les informations n√©cessaires (pas le mot de passe)\n      res.json({\n        id: userData.id,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        phone: userData.phone,\n        role: userData.role\n      });\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      res.status(500).json({ message: 'Failed to fetch user data' });\n    }\n  });\n\n  // Update order status (pharmacist)\n  app.post('/api/pharmacien/orders/:orderId/status', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const { status } = req.body;\n\n      const updatedOrder = await storage.updateOrderStatus(orderId, status);\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      res.status(500).json({ message: 'Failed to update order status' });\n    }\n  });\n\n  // Update order medications (pharmacist)\n  app.post('/api/pharmacien/orders/:orderId/medications', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const { medications } = req.body;\n\n      if (!Array.isArray(medications)) {\n        return res.status(400).json({ message: 'Medications must be an array' });\n      }\n\n      const updatedOrder = await storage.updateOrderMedications(orderId, medications);\n\n      if (!updatedOrder) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error updating order medications:', error);\n      res.status(500).json({ message: 'Failed to update medications' });\n    }\n  });\n\n  // Send response to patient (pharmacist)\n  app.post('/api/pharmacien/orders/:orderId/send-response', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const { medications } = req.body;\n\n      if (!Array.isArray(medications)) {\n        return res.status(400).json({ message: 'Medications must be an array' });\n      }\n\n      console.log('Received medications for order', orderId, ':', medications);\n\n      // Calculate total amount from medication prices\n      const totalAmount = medications.reduce((sum: number, med: any) => {\n        const price = parseFloat(med.price) || 0;\n        const isAvailable = med.available !== false; // Default to true if not specified\n        console.log(`Medication ${med.name}: price=${price}, available=${isAvailable}`);\n        return sum + (price && isAvailable ? price : 0);\n      }, 0);\n\n      console.log('Calculated total amount:', totalAmount);\n\n      // Update order with medication details and total amount\n      const updatedOrder = await storage.updateOrderMedications(orderId, medications);\n      if (updatedOrder) {\n        await storage.updateOrderStatus(orderId, 'confirmed', totalAmount.toString());\n      }\n\n      if (!updatedOrder) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      res.json({ ...updatedOrder, totalAmount: totalAmount.toString() });\n    } catch (error) {\n      console.error('Error sending response:', error);\n      res.status(500).json({ message: 'Failed to send response' });\n    }\n  });\n\n  // Process payment for order\n  app.post('/api/orders/payment', requireAuth, async (req: any, res) => {\n    try {\n      const { orderId, paymentMethod, amount, deliveryFee, transactionId, selectedMedications } = req.body;\n\n      if (!orderId || !paymentMethod || !amount) {\n        return res.status(400).json({ message: 'Missing required payment information' });\n      }\n\n      // Mettre √† jour la commande avec seulement les m√©dicaments s√©lectionn√©s\n      if (selectedMedications && selectedMedications.length > 0) {\n        await storage.updateOrderMedications(orderId, selectedMedications);\n      }\n\n      // Update order status to ready_for_delivery after payment\n      const updatedOrder = await storage.updateOrderStatus(orderId, 'ready_for_delivery', amount);\n\n      if (!updatedOrder) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      // Log payment information\n      console.log('Payment processed:', {\n        orderId,\n        paymentMethod,\n        amount,\n        deliveryFee,\n        transactionId,\n        timestamp: new Date().toISOString()\n      });\n\n      res.json({\n        message: 'Payment processed successfully',\n        order: updatedOrder,\n        paymentDetails: {\n          method: paymentMethod,\n          amount,\n          deliveryFee,\n          transactionId\n        }\n      });\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      res.status(500).json({ message: 'Failed to process payment' });\n    }\n  });\n\n  // Cancel order\n  app.post('/api/orders/:orderId/cancel', requireAuth, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const userId = req.session.userId;\n\n      // Check if user owns the order\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.userId !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Only allow cancellation for certain statuses\n      if (!['pending', 'confirmed'].includes(order.status)) {\n        return res.status(400).json({ message: 'Cannot cancel order at this stage' });\n      }\n\n      const updatedOrder = await storage.updateOrderStatus(orderId, 'cancelled');\n\n      if (!updatedOrder) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      res.json({ message: 'Order cancelled successfully', order: updatedOrder });\n    } catch (error) {\n      console.error('Error cancelling order:', error);\n      res.status(500).json({ message: 'Failed to cancel order' });\n    }\n  });\n\n  // Delete order permanently (complete removal from database)\n  app.delete('/api/orders/:orderId', requireAuth, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const userId = req.session.userId;\n\n      // Check if user owns the order\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.userId !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Delete the order permanently from database\n      const deleted = await storage.deleteOrder(orderId);\n\n      if (!deleted) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      console.log(`Order ${orderId} permanently deleted by user ${userId}`);\n      res.json({ message: 'Order permanently deleted from database' });\n    } catch (error) {\n      console.error('Error deleting order permanently:', error);\n      res.status(500).json({ message: 'Failed to delete order' });\n    }\n  });\n\n  // Get delivery orders assigned to this livreur\n  app.get('/api/livreur/deliveries', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Use the new method that includes pending assignments and timeout checking\n      const myDeliveries = await storage.getMyAssignedOrders(user.id);\n\n      res.json(myDeliveries);\n    } catch (error) {\n      console.error('Error fetching deliveries:', error);\n      res.status(500).json({ message: 'Failed to fetch deliveries' });\n    }\n  });\n\n  // Get available deliveries (not assigned to anyone yet)\n  app.get('/api/livreur/available-deliveries', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Get only orders that are preparing (ready for assignment) but not assigned to anyone\n      const allDeliveries = await storage.getDeliveryOrders();\n      const availableDeliveries = allDeliveries.filter(delivery => \n        delivery.status === 'preparing' && !delivery.deliveryPersonId\n      );\n\n      res.json(availableDeliveries);\n    } catch (error) {\n      console.error('Error fetching available deliveries:', error);\n      res.status(500).json({ message: 'Failed to fetch available deliveries' });\n    }\n  });\n\n  // Accept delivery assignment (livreur)\n  app.post('/api/livreur/deliveries/:orderId/accept', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const updatedOrder = await storage.acceptDeliveryAssignment(orderId, user.id);\n\n      if (!updatedOrder) {\n        return res.status(400).json({ message: 'Cannot accept this delivery - it may have expired or was not assigned to you' });\n      }\n\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error accepting delivery:', error);\n      res.status(500).json({ message: 'Failed to accept delivery' });\n    }\n  });\n\n  // Reject delivery assignment (livreur)\n  app.post('/api/livreur/deliveries/:orderId/reject', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const success = await storage.rejectDeliveryAssignment(orderId, user.id);\n\n      if (!success) {\n        return res.status(400).json({ message: 'Cannot reject this delivery - it was not assigned to you' });\n      }\n\n      res.json({ message: 'Delivery rejected successfully' });\n    } catch (error) {\n      console.error('Error rejecting delivery:', error);\n      res.status(500).json({ message: 'Failed to reject delivery' });\n    }\n  });\n\n  // Update delivery status (livreur) - only allows changing to 'in_delivery'\n  app.post('/api/livreur/deliveries/:orderId/status', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const { status } = req.body;\n\n      // Les livreurs peuvent commencer la livraison ou marquer arriv√© sur place\n      if (!['in_delivery', 'arrived_pending_confirmation'].includes(status)) {\n        return res.status(403).json({ message: 'Invalid status for delivery person' });\n      }\n\n      // V√©rifier que la commande est assign√©e √† ce livreur\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.deliveryPersonId !== user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedOrder = await storage.updateOrderStatus(orderId, status);\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error updating delivery status:', error);\n      res.status(500).json({ message: 'Failed to update delivery status' });\n    }\n  });\n\n\n\n  // Delivery person confirms arrival at delivery location\n  app.post('/api/deliveries/:deliveryId/confirm-arrival', requireAuth, async (req: any, res) => {\n    try {\n      const { deliveryId } = req.params;\n      const userId = req.session.userId;\n\n      // V√©rifier que l'utilisateur est bien un livreur\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // V√©rifier que la commande est assign√©e √† ce livreur et en transit\n      const order = await storage.getOrderById(deliveryId);\n      if (!order || order.deliveryPersonId !== userId || order.status !== 'in_transit') {\n        return res.status(403).json({ message: 'Access denied or invalid status' });\n      }\n\n      // Mettre √† jour le statut en attente de confirmation du patient\n      const updatedOrder = await storage.updateOrderStatus(deliveryId, 'arrived_pending_confirmation');\n\n      // Notifier le patient de l'arriv√©e du livreur\n      if (updatedOrder) {\n        await storage.createNotification({\n          userId: order.userId,\n          title: 'Livreur arriv√©',\n          body: 'Votre livreur est arriv√© ! Confirmez la r√©ception de votre commande.',\n          type: 'delivery_arrived',\n          orderId: deliveryId,\n          isRead: false\n        });\n      }\n\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error confirming arrival:', error);\n      res.status(500).json({ message: 'Failed to confirm arrival' });\n    }\n  });\n\n  // Patient confirms delivery completion\n  app.post('/api/orders/:orderId/confirm-delivery-completion', requireAuth, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const userId = req.session.userId;\n\n      // V√©rifier que l'utilisateur est le propri√©taire de la commande\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.userId !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Accepter plusieurs statuts pour la confirmation de livraison\n      if (!['arrived_pending_confirmation', 'in_transit', 'in_delivery'].includes(order.status)) {\n        return res.status(400).json({ message: 'Order is not ready for delivery confirmation' });\n      }\n\n      const updatedOrder = await storage.confirmDeliveryCompletion(orderId);\n      res.json({ message: 'Delivery confirmed successfully', order: updatedOrder });\n    } catch (error) {\n      console.error('Error confirming delivery:', error);\n      res.status(500).json({ message: 'Failed to confirm delivery' });\n    }\n  });\n\n  // Legacy endpoint for backward compatibility\n  app.post('/api/orders/:orderId/confirm-delivery', requireAuth, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const userId = req.session.userId;\n\n      // V√©rifier que l'utilisateur est le propri√©taire de la commande\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.userId !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Accepter plusieurs statuts pour la confirmation de livraison\n      if (!['arrived_pending_confirmation', 'in_transit', 'in_delivery'].includes(order.status)) {\n        return res.status(400).json({ message: 'Order is not ready for delivery confirmation' });\n      }\n\n      const updatedOrder = await storage.confirmDeliveryCompletion(orderId);\n      res.json({ message: 'Delivery confirmed successfully', order: updatedOrder });\n    } catch (error) {\n      console.error('Error confirming delivery:', error);\n      res.status(500).json({ message: 'Failed to confirm delivery' });\n    }\n  });\n\n  // Get all orders\n  app.get('/api/orders', requireAuth, async (req: any, res) => {\n    try {\n      const orders = await storage.getUserOrders(req.session.userId);\n      res.json(orders);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // Create new order\n  app.post('/api/orders', requireAuth, async (req: any, res) => {\n    try {\n      const {\n        pharmacyId,\n        deliveryAddress,\n        deliveryLatitude,\n        deliveryLongitude,\n        medications,\n        pharmacyMessage,\n        notes,\n        totalAmount,\n        status\n      } = req.body;\n\n      if (!pharmacyId || !deliveryAddress) {\n        return res.status(400).json({ message: 'Missing required fields' });\n      }\n\n      const orderData: any = {\n        userId: req.session.userId,\n        pharmacyId,\n        deliveryAddress,\n        deliveryNotes: notes || pharmacyMessage || '',\n        totalAmount: totalAmount ? totalAmount.toString() : '0',\n        status: status || 'pending'\n      };\n\n      // Ajouter les coordonn√©es si disponibles\n      if (deliveryLatitude) {\n        orderData.deliveryLatitude = deliveryLatitude;\n      }\n      if (deliveryLongitude) {\n        orderData.deliveryLongitude = deliveryLongitude;\n      }\n\n      // Ajouter les m√©dicaments si disponibles\n      if (medications) {\n        orderData.medications = typeof medications === 'string'\n          ? JSON.parse(medications)\n          : medications;\n      }\n\n      const newOrder = await storage.createOrder(orderData);\n\n      res.status(201).json(newOrder);\n    } catch (error) {\n      console.error('Error creating order:', error);\n      res.status(500).json({ message: 'Failed to create order' });\n    }\n  });\n\n  // Pharmacy profile routes\n  // Note: GET route is intercepted by Vite middleware in development, using PUT with empty body as workaround\n\n  app.put('/api/pharmacies/my-pharmacy', requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Acc√®s refus√©' });\n      }\n\n      // If no body data, act as a GET request (workaround for Vite middleware issue)\n      const pharmacyData = req.body;\n      if (!pharmacyData || Object.keys(pharmacyData).length === 0) {\n        console.log('PUT request with no data - acting as GET request');\n\n        // Same logic as GET route\n        let pharmacy = null;\n\n        // Try to get pharmacy by pharmacyId from user\n        if (user.pharmacyId) {\n          pharmacy = await storage.getPharmacy(user.pharmacyId);\n          console.log('Pharmacy found by pharmacyId:', pharmacy ? pharmacy.id : 'not found');\n        }\n\n        // If not found, try the old method (fallback)\n        if (!pharmacy) {\n          pharmacy = await storage.getPharmacyByUserId(req.session.userId!);\n          console.log('Pharmacy found by userId method:', pharmacy ? pharmacy.id : 'not found');\n\n          // If found by old method, update user with pharmacyId\n          if (pharmacy) {\n            await storage.updateUser(req.session.userId!, { pharmacyId: pharmacy.id });\n            console.log('Updated user with pharmacyId:', pharmacy.id);\n          }\n        }\n\n        // Last resort: search by phone number directly\n        if (!pharmacy) {\n          const allPharmacies = await storage.getPharmacies();\n          pharmacy = allPharmacies.find(p => p.phone === user.phone);\n          console.log('Pharmacy found by phone search:', pharmacy ? pharmacy.id : 'not found');\n\n          // If found, update user with pharmacyId\n          if (pharmacy) {\n            await storage.updateUser(req.session.userId!, { pharmacyId: pharmacy.id });\n            console.log('Updated user with pharmacyId from phone search:', pharmacy.id);\n          }\n        }\n\n        if (!pharmacy) {\n          console.log('No pharmacy found for user. All pharmacies:', await storage.getPharmacies());\n          return res.status(404).json({ message: 'Pharmacy not found' });\n        }\n\n        console.log('Returning pharmacy via PUT-as-GET:', pharmacy.id);\n        return res.json(pharmacy);\n      }\n\n      console.log('Updating pharmacy with data:', pharmacyData);\n\n      // Try to find existing pharmacy by pharmacyId first, then fallback to ownerId\n      let pharmacy = null;\n      if (user.pharmacyId) {\n        pharmacy = await storage.getPharmacy(user.pharmacyId);\n        console.log('Found pharmacy by pharmacyId:', pharmacy?.id);\n      }\n\n      // Skip the phone matching search - always create new pharmacy if pharmacyId not set\n      if (!pharmacy && !user.pharmacyId) {\n        console.log('No pharmacyId set for user - will create new pharmacy');\n      }\n\n      if (pharmacy) {\n        // Update existing pharmacy\n        console.log('Updating existing pharmacy:', pharmacy.id);\n        const updatedPharmacy = await storage.updatePharmacy(pharmacy.id, pharmacyData);\n\n        // Ensure user has the pharmacyId\n        if (!user.pharmacyId) {\n          console.log('Updating user with pharmacyId:', pharmacy.id);\n          await storage.updateUser(req.session.userId!, { pharmacyId: pharmacy.id });\n        }\n\n        console.log('Pharmacy updated successfully:', updatedPharmacy);\n        res.json(updatedPharmacy);\n      } else {\n        // Before creating new pharmacy, check if there's already one with same phone\n        const allPharmacies = await storage.getPharmacies();\n        const existingByPhone = allPharmacies.find(p => \n          p.phone === pharmacyData.phone || p.phone === user.phone\n        );\n\n        if (existingByPhone) {\n          console.log('Found existing pharmacy by phone, updating instead of creating:', existingByPhone.id);\n          const updatedPharmacy = await storage.updatePharmacy(existingByPhone.id, pharmacyData);\n\n          // Update user with the existing pharmacy ID\n          await storage.updateUser(req.session.userId!, { pharmacyId: existingByPhone.id });\n\n          console.log('Existing pharmacy updated successfully:', updatedPharmacy);\n          res.json(updatedPharmacy);\n        } else {\n          // Create new pharmacy only if no existing one found\n          console.log('Creating new pharmacy for user:', req.session.userId);\n          const newPharmacy = await storage.createPharmacy({\n            ...pharmacyData,\n            ownerId: req.session.userId!,\n            rating: pharmacyData.rating || 4.5,\n            reviewCount: pharmacyData.reviewCount || 0,\n            isOpen: pharmacyData.isOpen !== undefined ? pharmacyData.isOpen : true,\n            openingHours: pharmacyData.openingHours || {\n              monday: { open: '08:00', close: '19:00' },\n              tuesday: { open: '08:00', close: '19:00' },\n              wednesday: { open: '08:00', close: '19:00' },\n              thursday: { open: '08:00', close: '19:00' },\n              friday: { open: '08:00', close: '19:00' },\n              saturday: { open: '08:00', close: '17:00' },\n              sunday: { open: '09:00', close: '15:00' }\n            }\n          });\n\n          // Update user with the new pharmacy ID\n          console.log('Updating user with new pharmacyId:', newPharmacy.id);\n          await storage.updateUser(req.session.userId!, { pharmacyId: newPharmacy.id });\n\n          console.log('New pharmacy created successfully:', newPharmacy);\n          res.json(newPharmacy);\n        }\n      }\n    } catch (error) {\n      console.error('Error updating pharmacy:', error);\n      res.status(500).json({ message: 'Erreur lors de la mise √† jour de la pharmacie' });\n    }\n  });\n\n  // Get available delivery personnel for pharmacists (filtered by pharmacy)\n  app.get('/api/pharmacien/delivery-personnel', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Get pharmacist's pharmacy ID\n      let pharmacyId = user.pharmacyId;\n\n      // If no pharmacyId set, try to find pharmacy by phone or auto-create\n      if (!pharmacyId) {\n        const pharmacy = await storage.getPharmacyByUserId(req.session.userId);\n        if (pharmacy) {\n          pharmacyId = pharmacy.id;\n          // Update user with pharmacy ID for future reference\n          await storage.updateUser(req.session.userId, { pharmacyId });\n        } else {\n          return res.status(400).json({ message: 'Pharmacist not associated with any pharmacy' });\n        }\n      }\n\n      console.log(`üîç Fetching delivery personnel for pharmacy: ${pharmacyId}`);\n\n      // Get only delivery personnel associated with this pharmacy\n      const deliveryPersonnel = await storage.getAvailableDeliveryPersonnelForPharmacy(pharmacyId);\n\n      console.log(`üìã Found ${deliveryPersonnel.length} delivery personnel for pharmacy ${pharmacyId}`);\n      console.log('Delivery personnel:', deliveryPersonnel.map(p => ({ \n        id: p.id, \n        name: `${p.firstName} ${p.lastName}`, \n        pharmacyId: p.pharmacyId,\n        deliveryApplicationStatus: p.deliveryApplicationStatus\n      })));\n\n      res.json(deliveryPersonnel);\n    } catch (error) {\n      console.error('Error fetching delivery personnel:', error);\n      res.status(500).json({ message: 'Failed to fetch delivery personnel' });\n    }\n  });\n\n  // Nouvelle API : Candidature compl√®te avec documents\n  app.post('/api/delivery/apply', requireAuth, uploadDeliveryDocs.fields([\n    { name: 'idDocument', maxCount: 1 },\n    { name: 'drivingLicense', maxCount: 1 },\n    { name: 'cvDocument', maxCount: 1 }\n  ]), async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { pharmacyId, motivationLetter, experience, availability, phone } = req.body;\n\n      if (!pharmacyId || !motivationLetter || !experience || !availability || !phone) {\n        return res.status(400).json({ message: 'Tous les champs obligatoires doivent √™tre remplis' });\n      }\n\n      // V√©rifier que la pharmacie existe\n      const pharmacy = await storage.getPharmacy(pharmacyId);\n      if (!pharmacy) {\n        return res.status(404).json({ message: 'Pharmacy not found' });\n      }\n\n      // Traitement des fichiers upload√©s\n      let idDocumentUrl = null;\n      let drivingLicenseUrl = null;\n      let cvDocumentUrl = null;\n\n      if (req.files) {\n        const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n\n        if (files['idDocument'] && files['idDocument'][0]) {\n          const idDoc = files['idDocument'][0];\n          idDocumentUrl = `data:${idDoc.mimetype};base64,${idDoc.buffer.toString('base64')}`;\n          console.log('ID Document uploaded for delivery application:', idDoc.originalname);\n        }\n\n        if (files['drivingLicense'] && files['drivingLicense'][0]) {\n          const drivingDoc = files['drivingLicense'][0];\n          drivingLicenseUrl = `data:${drivingDoc.mimetype};base64,${drivingDoc.buffer.toString('base64')}`;\n          console.log('Driving License uploaded for delivery application:', drivingDoc.originalname);\n        }\n\n        if (files['cvDocument'] && files['cvDocument'][0]) {\n          const cvDoc = files['cvDocument'][0];\n          cvDocumentUrl = `data:${cvDoc.mimetype};base64,${cvDoc.buffer.toString('base64')}`;\n          console.log('CV Document uploaded for delivery application:', cvDoc.originalname);\n        }\n      }\n\n      // V√©rifier si le num√©ro de t√©l√©phone est d√©j√† utilis√© par un autre utilisateur\n      if (phone && phone !== user.phone) {\n        const existingUserWithPhone = await storage.getUserByPhone(phone);\n        if (existingUserWithPhone && existingUserWithPhone.id !== user.id) {\n          return res.status(400).json({ \n            message: 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√© par un autre utilisateur' \n          });\n        }\n      }\n\n      // Pr√©parer les donn√©es √† mettre √† jour\n      const updateData: any = {\n        appliedPharmacyId: pharmacyId,\n        deliveryApplicationStatus: 'pending',\n        motivationLetter: motivationLetter,\n        experience: experience,\n        availability: availability\n      };\n\n      // Mettre √† jour les documents seulement s'ils sont fournis\n      if (idDocumentUrl) {\n        updateData.idDocumentUrl = idDocumentUrl;\n      }\n      if (drivingLicenseUrl) {\n        updateData.drivingLicenseUrl = drivingLicenseUrl;\n      }\n      if (cvDocumentUrl) {\n        updateData.professionalDocumentUrl = cvDocumentUrl;\n      }\n\n      // Ne mettre √† jour le t√©l√©phone que s'il est diff√©rent de l'existant\n      if (phone && phone !== user.phone) {\n        updateData.phone = phone;\n      }\n\n      // Mettre √† jour le profil du livreur avec toutes les informations\n      const updatedUser = await storage.updateUser(req.session.userId, updateData);\n\n      // Cr√©er une notification pour le pharmacien propri√©taire de la pharmacie\n      try {\n        const pharmacyOwner = await storage.getPharmacyOwner(pharmacyId);\n        if (pharmacyOwner) {\n          await storage.createNotification({\n            userId: pharmacyOwner.id,\n            title: 'Nouvelle candidature livreur',\n            body: `${user.firstName} ${user.lastName} a envoy√© une candidature compl√®te avec documents`,\n            type: 'delivery_application',\n            isRead: false,\n          });\n          console.log('Notification created for pharmacy owner:', pharmacyOwner.id);\n        } else {\n          console.log('No pharmacy owner found for pharmacy:', pharmacyId);\n        }\n      } catch (notificationError) {\n        console.log('Notification creation failed (non-critical):', notificationError);\n      }\n\n      res.json({ \n        message: 'Candidature envoy√©e avec succ√®s', \n        user: updatedUser,\n        documents: {\n          idDocument: !!idDocumentUrl,\n          drivingLicense: !!drivingLicenseUrl,\n          cvDocument: !!cvDocumentUrl\n        }\n      });\n    } catch (error) {\n      console.error('Error submitting application:', error);\n      res.status(500).json({ message: 'Erreur lors de l\\'envoi de la candidature' });\n    }\n  });\n\n  // Livreur postule √† une pharmacie (ancienne API, gard√©e pour compatibilit√©)\n  app.post('/api/livreur/apply-to-pharmacy', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { pharmacyId } = req.body;\n      if (!pharmacyId) {\n        return res.status(400).json({ message: 'pharmacyId is required' });\n      }\n\n      // V√©rifier que la pharmacie existe\n      const pharmacy = await storage.getPharmacy(pharmacyId);\n      if (!pharmacy) {\n        return res.status(404).json({ message: 'Pharmacy not found' });\n      }\n\n      // Mettre √† jour le statut de candidature du livreur\n      const updatedUser = await storage.updateUser(req.session.userId, {\n        appliedPharmacyId: pharmacyId,\n        deliveryApplicationStatus: 'pending'\n      });\n\n      // Cr√©er une notification pour la pharmacie\n      const pharmacyOwner = await storage.getPharmacyOwner(pharmacyId);\n      if (pharmacyOwner) {\n        await storage.createNotification({\n          userId: pharmacyOwner.id,\n          title: 'Nouvelle candidature livreur',\n          body: `${user.firstName} ${user.lastName} souhaite rejoindre votre √©quipe de livraison`,\n          type: 'delivery_application',\n          isRead: false,\n        });\n      }\n\n      res.json({ message: 'Application sent successfully', user: updatedUser });\n    } catch (error) {\n      console.error('Error applying to pharmacy:', error);\n      res.status(500).json({ message: 'Failed to apply to pharmacy' });\n    }\n  });\n\n  // Pharmacien g√®re les candidatures de livreurs\n  app.get('/api/pharmacien/delivery-applications', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      console.log('üè• Pharmacien requesting applications:', {\n        userId: req.session.userId,\n        userRole: user?.role,\n        pharmacyId: user?.pharmacyId\n      });\n\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // R√©cup√©rer la pharmacie du pharmacien\n      let pharmacy = null;\n      if (user.pharmacyId) {\n        pharmacy = await storage.getPharmacy(user.pharmacyId);\n      }\n\n      // Fallback: chercher par t√©l√©phone si pas de pharmacyId\n      if (!pharmacy) {\n        const allPharmacies = await storage.getPharmacies();\n        pharmacy = allPharmacies.find(p => p.phone === user.phone);\n\n        if (pharmacy) {\n          // Mettre √† jour l'utilisateur avec l'ID de pharmacie\n          await storage.updateUser(req.session.userId, { pharmacyId: pharmacy.id });\n          console.log('üìã Pharmacie trouv√©e par t√©l√©phone et mise √† jour:', pharmacy.id);\n        }\n      }\n\n      if (!pharmacy) {\n        console.log('‚ùå Aucune pharmacie trouv√©e pour le pharmacien');\n        return res.status(404).json({ message: 'Pharmacy not found' });\n      }\n\n      console.log('„à† Pharmacie trouv√©e:', {\n        id: pharmacy.id,\n        name: pharmacy.name,\n        phone: pharmacy.phone\n      });\n\n      const applications = await storage.getDeliveryApplicationsForPharmacy(pharmacy.id);\n      console.log(`üì¨ Retour de ${applications.length} candidatures`);\n\n      res.json(applications);\n    } catch (error) {\n      console.error('Error fetching delivery applications:', error);\n      res.status(500).json({ message: 'Failed to fetch delivery applications' });\n    }\n  });\n\n  // Pharmacien accepte ou rejette une candidature\n  app.post('/api/pharmacien/delivery-applications/:applicationId/respond', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { applicationId } = req.params;\n      const { action } = req.body; // 'approve' ou 'reject'\n\n      if (!['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ message: 'Invalid action' });\n      }\n\n      const result = await storage.respondToDeliveryApplication(applicationId, action, user.pharmacyId);\n\n      if (!result) {\n        return res.status(404).json({ message: 'Application not found' });\n      }\n\n      res.json({ message: `Application ${action}d successfully`, result });\n    } catch (error) {\n      console.error('Error responding to delivery application:', error);\n      res.status(500).json({ message: 'Failed to respond to application' });\n    }\n  });\n\n  // Get delivery application status for the current user\n  app.get('/api/delivery/application-status', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const applicationStatus = {\n        status: user.deliveryApplicationStatus || 'none',\n        appliedPharmacyId: user.appliedPharmacyId,\n        appliedAt: user.updatedAt,\n        documents: {\n          idDocument: !!user.idDocumentUrl,\n          drivingLicense: !!user.drivingLicenseUrl,\n          cv: !!user.professionalDocumentUrl,\n        }\n      };\n\n      res.json(applicationStatus);\n    } catch (error) {\n      console.error('Error fetching application status:', error);\n      res.status(500).json({ message: 'Failed to fetch application status' });\n    }\n  });\n\n  // Cancel delivery application\n  app.post('/api/livreur/cancel-application', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Check if user has an active pending application\n      if (!user.appliedPharmacyId || user.deliveryApplicationStatus !== 'pending') {\n        return res.status(400).json({ message: 'No active application to cancel' });\n      }\n\n      // Reset application status\n      const updatedUser = await storage.updateUser(req.session.userId, {\n        appliedPharmacyId: undefined,\n        deliveryApplicationStatus: 'none'\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Create notification for user\n      await storage.createNotification({\n        userId: req.session.userId,\n        title: 'Candidature annul√©e',\n        body: 'Votre candidature a √©t√© annul√©e avec succ√®s. Vous pouvez maintenant postuler ailleurs.',\n        type: 'application_cancelled',\n        isRead: false,\n      });\n\n      res.json({ \n        message: 'Application cancelled successfully', \n        user: updatedUser \n      });\n    } catch (error) {\n      console.error('Error cancelling application:', error);\n      res.status(500).json({ message: 'Failed to cancel application' });\n    }\n  });\n\n  // Admin: Suspend/Activate any user\n  app.patch('/api/admin/users/:userId/status', requireAuth, async (req: any, res) => {\n    try {\n      const adminUser = await storage.getUser(req.session.userId);\n      if (!adminUser || adminUser.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied - Admin only' });\n      }\n\n      const { userId } = req.params;\n      const { isActive } = req.body;\n\n      if (typeof isActive !== 'boolean') {\n        return res.status(400).json({ message: 'isActive must be a boolean' });\n      }\n\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Prevent admin from suspending themselves\n      if (userId === req.session.userId) {\n        return res.status(400).json({ message: 'Cannot suspend your own account' });\n      }\n\n      const updatedUser = await storage.updateUser(userId, { isActive });\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'Failed to update user' });\n      }\n\n      // Create notification for the affected user\n      await storage.createNotification({\n        userId: userId,\n        title: isActive ? 'Compte r√©activ√©' : 'Compte suspendu',\n        body: isActive \n          ? 'Votre compte a √©t√© r√©activ√© par l\\'administration. Vous pouvez maintenant acc√©der √† toutes les fonctionnalit√©s.'\n          : 'Votre compte a √©t√© suspendu par l\\'administration. Contactez le support pour plus d\\'informations.',\n        type: isActive ? 'account_activated' : 'account_suspended',\n        isRead: false,\n      });\n\n      res.json({ \n        message: `User ${isActive ? 'activated' : 'suspended'} successfully`,\n        user: updatedUser \n      });\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      res.status(500).json({ message: 'Failed to update user status' });\n    }\n  });\n\n  // Admin: Get all users for management\n  app.get('/api/admin/users', requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n\n      // Remove sensitive information and exclude admin users from the list\n      const safeUsers = users\n        .filter(user => user.role !== 'admin')\n        .map(user => ({\n          id: user.id,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone,\n          address: user.address,\n          role: user.role,\n          isActive: user.isActive,\n          verificationStatus: user.verificationStatus,\n          deliveryApplicationStatus: user.deliveryApplicationStatus,\n          createdAt: user.createdAt,\n          pharmacyId: user.pharmacyId\n        }));\n\n      res.json(safeUsers);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  // Assign delivery person to order\n  app.post('/api/pharmacien/orders/:orderId/assign-delivery', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { orderId } = req.params;\n      const { deliveryPersonId } = req.body;\n\n      if (!deliveryPersonId) {\n        return res.status(400).json({ message: 'deliveryPersonId is required' });\n      }\n\n      const updatedOrder = await storage.assignDeliveryPerson(orderId, deliveryPersonId);\n      if (!updatedOrder) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error('Error assigning delivery person:', error);\n      res.status(500).json({ message: 'Failed to assign delivery person' });\n    }\n  });\n\n  // Fire delivery person from pharmacy\n  app.post('/api/pharmacien/fire-delivery-person/:deliveryPersonId', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'pharmacien') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { deliveryPersonId } = req.params;\n\n      // Get the delivery person to verify they're assigned to this pharmacy\n      const deliveryPerson = await storage.getUser(deliveryPersonId);\n      if (!deliveryPerson || deliveryPerson.role !== 'livreur') {\n        return res.status(404).json({ message: 'Delivery person not found' });\n      }\n\n      // Verify the delivery person is assigned to this pharmacist's pharmacy\n      if (deliveryPerson.pharmacyId !== user.pharmacyId) {\n        return res.status(403).json({ message: 'This delivery person is not assigned to your pharmacy' });\n      }\n\n      // Remove the delivery person from the pharmacy\n      const updatedDeliveryPerson = await storage.updateUser(deliveryPersonId, {\n        pharmacyId: null,\n        deliveryApplicationStatus: 'none'\n      });\n\n      if (!updatedDeliveryPerson) {\n        return res.status(404).json({ message: 'Failed to update delivery person' });\n      }\n\n      // Create notification for the delivery person\n      await storage.createNotification({\n        userId: deliveryPersonId,\n        title: 'Fin de contrat',\n        body: 'Votre contrat avec la pharmacie a pris fin. Vous pouvez maintenant postuler ailleurs.',\n        type: 'employment_terminated',\n        isRead: false,\n      });\n\n      console.log(`Delivery person ${deliveryPerson.firstName} ${deliveryPerson.lastName} fired from pharmacy ${user.pharmacyId}`);\n\n      res.json({ \n        message: 'Delivery person fired successfully', \n        deliveryPerson: updatedDeliveryPerson \n      });\n    } catch (error) {\n      console.error('Error firing delivery person:', error);\n      res.status(500).json({ message: 'Failed to fire delivery person' });\n    }\n  });\n\n  // Get delivery person info with vehicle and profile\n  app.get('/api/delivery-person/:deliveryPersonId', requireAuth, async (req: any, res) => {\n    try {\n      const { deliveryPersonId } = req.params;\n\n      const deliveryPersonInfo = await storage.getDeliveryPersonWithVehicleAndProfile(deliveryPersonId);\n\n      if (!deliveryPersonInfo) {\n        return res.status(404).json({ message: 'Delivery person not found' });\n      }\n\n      res.json(deliveryPersonInfo);\n    } catch (error) {\n      console.error('Error fetching delivery person info:', error);\n      res.status(500).json({ message: 'Failed to fetch delivery person info' });\n    }\n  });\n\n  // üöÄ API GPS haute pr√©cision avec WebSocket en temps r√©el - Style Google Maps\n  app.post('/api/delivery-persons/:id/location', requireAuth, async (req: any, res) => {\n    try {\n      const { id: deliveryPersonId } = req.params;\n      const { lat, lng, accuracy, speed, bearing, timestamp } = req.body;\n\n      // Validation des coordonn√©es GPS\n      if (!lat || !lng) {\n        return res.status(400).json({ message: 'Latitude et longitude sont requises' });\n      }\n\n      const latitude = parseFloat(lat);\n      const longitude = parseFloat(lng);\n\n      if (isNaN(latitude) || isNaN(longitude)) {\n        return res.status(400).json({ message: 'Coordonn√©es GPS invalides' });\n      }\n\n      if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {\n        return res.status(400).json({ message: 'Coordonn√©es hors limites valides' });\n      }\n\n      // Valider que l'utilisateur a le droit de mettre √† jour cette position\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur' || req.session.userId !== deliveryPersonId) {\n        return res.status(403).json({ message: 'Acc√®s refus√©' });\n      }\n\n      const now = new Date();\n      \n      // üìç Mise √† jour GPS haute pr√©cision avec nouveaux champs\n      const updatedUser = await storage.updateUser(deliveryPersonId, {\n        lat: latitude.toString(),\n        lng: longitude.toString(),\n        speed: speed ? speed.toString() : '0',\n        bearing: bearing ? bearing.toString() : '0',\n        accuracy: accuracy ? accuracy.toString() : '5',\n        lastLocationUpdate: timestamp ? new Date(timestamp).toISOString() : now.toISOString(),\n        isActiveTracking: true\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'Livreur non trouv√©' });\n      }\n\n      // üîå WebSocket broadcast en temps r√©el vers tous les clients connect√©s\n      if (io) {\n        // R√©cup√©rer les commandes actives du livreur pour notifier les bons clients\n        const activeOrders = await storage.getMyAssignedOrders(deliveryPersonId);\n        \n        // Broadcast GPS position to each order's tracking room\n        activeOrders.forEach(order => {\n          if (['preparing', 'ready_for_delivery', 'in_transit', 'assigned_pending_acceptance'].includes(order.status)) {\n            io.to(`order-${order.id}`).emit('deliveryLocationUpdate', {\n              lat: latitude,\n              lng: longitude,\n              speed: speed || 0,\n              bearing: bearing || 0,\n              accuracy: accuracy || 5,\n              timestamp: timestamp || now.toISOString(),\n              deliveryPersonId,\n              orderId: order.id\n            });\n            \n            console.log(`üîå GPS broadcast vers clients order-${order.id}:`, {\n              lat: latitude,\n              lng: longitude,\n              speed: speed || 0,\n              livreur: `${user.firstName} ${user.lastName}`\n            });\n          }\n        });\n      }\n\n      console.log('üìç Position GPS livreur haute pr√©cision mise √† jour:', {\n        userId: deliveryPersonId,\n        name: `${user.firstName} ${user.lastName}`,\n        lat: latitude,\n        lng: longitude,\n        speed: speed || 0,\n        bearing: bearing || 0,\n        accuracy: accuracy || 5,\n        timestamp: timestamp || now.toISOString(),\n        activeOrders: (await storage.getMyAssignedOrders(deliveryPersonId)).length\n      });\n\n      res.json({ \n        success: true,\n        message: 'Position GPS mise √† jour avec broadcasting temps r√©el',\n        location: { lat: latitude, lng: longitude },\n        speed: speed || 0,\n        bearing: bearing || 0,\n        accuracy: accuracy || 5,\n        timestamp: timestamp || now.toISOString()\n      });\n    } catch (error) {\n      console.error('‚ùå Erreur mise √† jour GPS livreur:', error);\n      res.status(500).json({ message: 'Erreur lors de la mise √† jour GPS' });\n    }\n  });\n\n  // Legacy route - maintenue pour compatibilit√© mais redirige vers la nouvelle API\n  app.post('/api/livreur/update-location', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user || user.role !== 'livreur') {\n        return res.status(403).json({ message: 'Acc√®s refus√©' });\n      }\n\n      // Rediriger vers la nouvelle API haute pr√©cision\n      req.params.id = req.session.userId;\n      return app._router.handle({ ...req, method: 'POST', url: `/api/delivery-persons/${req.session.userId}/location` }, res);\n    } catch (error) {\n      console.error('Erreur route legacy GPS:', error);\n      res.status(500).json({ message: 'Erreur lors de la mise √† jour GPS' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":93877},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, pharmacies } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function seedTestData() {\n  console.log(\"üå± Seeding test data...\");\n\n  // Comptes de test avec mots de passe hash√©s\n  const testUsers = [\n    {\n      firstName: \"Admin\",\n      lastName: \"YahoPharma\", \n      phone: \"+225 01 23 45 67\",\n      address: \"Si√®ge YahoPharma, Abidjan\",\n      password: await bcrypt.hash(\"admin123\", 10),\n      role: \"admin\",\n      language: \"fr\",\n      verificationStatus: \"approved\"\n    },\n    {\n      firstName: \"Dr. Marie\",\n      lastName: \"Kouassi\",\n      phone: \"+225 07 11 22 33\", \n      address: \"Pharmacie de la Paix, Abidjan\",\n      password: await bcrypt.hash(\"pharma123\", 10),\n      role: \"pharmacien\",\n      language: \"fr\",\n      verificationStatus: \"approved\"\n    },\n    {\n      firstName: \"Jean-Claude\",\n      lastName: \"Koffi\",\n      phone: \"+225 07 44 55 66\",\n      address: \"Zone livraison Abidjan\", \n      password: await bcrypt.hash(\"livreur123\", 10),\n      role: \"livreur\",\n      language: \"fr\",\n      verificationStatus: \"approved\"\n    },\n    {\n      firstName: \"Aya\",\n      lastName: \"Diallo\",\n      phone: \"+225 05 77 88 99\",\n      address: \"Cocody, Abidjan\",\n      password: await bcrypt.hash(\"patient123\", 10),\n      role: \"patient\",\n      language: \"fr\",\n      verificationStatus: \"approved\"\n    },\n    {\n      firstName: \"Patient\",\n      lastName: \"Test\",\n      phone: \"+225 01 11 11 11\",\n      address: \"Marcory, Abidjan\", \n      password: await bcrypt.hash(\"test123\", 10),\n      role: \"patient\",\n      language: \"fr\",\n      verificationStatus: \"approved\"\n    }\n  ];\n\n  // Ins√©rer les utilisateurs de test\n  for (const user of testUsers) {\n    try {\n      // V√©rifier si l'utilisateur existe d√©j√†\n      const existing = await db.select().from(users).where(eq(users.phone, user.phone)).limit(1);\n      if (existing.length === 0) {\n        await db.insert(users).values(user);\n        console.log(`‚úÖ Utilisateur cr√©√©: ${user.firstName} ${user.lastName} (${user.role})`);\n      } else {\n        console.log(`‚ö†Ô∏è  Utilisateur existe d√©j√†: ${user.phone}`);\n      }\n    } catch (error) {\n      console.error(`‚ùå Erreur lors de la cr√©ation de l'utilisateur ${user.phone}:`, error);\n    }\n  }\n\n  // Donn√©es pharmacies de test\n  const testPharmacies = [\n    {\n      name: \"Pharmacie de la Paix\",\n      address: \"Avenue Houphouet-Boigny, Cocody\",\n      latitude: \"5.3364\",\n      longitude: \"-4.0267\", \n      phone: \"+225 21 22 33 44\",\n      rating: \"4.8\",\n      deliveryTime: \"25\",\n      isOpen: true,\n      isEmergency24h: true,\n      openingHours: {\n        monday: \"08:00-20:00\",\n        tuesday: \"08:00-20:00\",\n        wednesday: \"08:00-20:00\", \n        thursday: \"08:00-20:00\",\n        friday: \"08:00-20:00\",\n        saturday: \"08:00-18:00\",\n        sunday: \"09:00-17:00\"\n      }\n    },\n    {\n      name: \"Pharmacie du Plateau\",\n      address: \"Boulevard de la Republique, Plateau\",\n      latitude: \"5.3200\",\n      longitude: \"-4.0130\",\n      phone: \"+225 21 32 45 78\", \n      rating: \"4.6\",\n      deliveryTime: \"30\",\n      isOpen: true,\n      isEmergency24h: false,\n      openingHours: {\n        monday: \"07:30-19:30\",\n        tuesday: \"07:30-19:30\", \n        wednesday: \"07:30-19:30\",\n        thursday: \"07:30-19:30\",\n        friday: \"07:30-19:30\",\n        saturday: \"08:00-18:00\",\n        sunday: \"09:00-16:00\"\n      }\n    },\n    {\n      name: \"Pharmacie Moderne\",\n      address: \"Rue des Jardins, Cocody\",\n      latitude: \"5.3580\", \n      longitude: \"-3.9889\",\n      phone: \"+225 22 44 56 89\",\n      rating: \"4.4\",\n      deliveryTime: \"20\",\n      isOpen: true,\n      isEmergency24h: false,\n      openingHours: {\n        monday: \"08:00-19:00\",\n        tuesday: \"08:00-19:00\",\n        wednesday: \"08:00-19:00\",\n        thursday: \"08:00-19:00\", \n        friday: \"08:00-19:00\",\n        saturday: \"08:00-17:00\",\n        sunday: \"closed\"\n      }\n    }\n  ];\n\n  // Ins√©rer les pharmacies de test\n  for (const pharmacy of testPharmacies) {\n    try {\n      // V√©rifier si la pharmacie existe d√©j√†\n      const existing = await db.select().from(pharmacies).where(eq(pharmacies.name, pharmacy.name)).limit(1);\n      if (existing.length === 0) {\n        await db.insert(pharmacies).values(pharmacy);\n        console.log(`‚úÖ Pharmacie cr√©√©e: ${pharmacy.name}`);\n      } else {\n        console.log(`‚ö†Ô∏è  Pharmacie existe d√©j√†: ${pharmacy.name}`);\n      }\n    } catch (error) {\n      console.error(`‚ùå Erreur lors de la cr√©ation de la pharmacie ${pharmacy.name}:`, error);\n    }\n  }\n\n  console.log(\"üéâ Seed termin√©!\");\n  console.log(\"\\nüìã Comptes de test disponibles:\");\n  console.log(\"- Admin: +225 01 23 45 67 / admin123\");\n  console.log(\"- Pharmacien: +225 07 11 22 33 / pharma123\"); \n  console.log(\"- Livreur: +225 07 44 55 66 / livreur123\");\n  console.log(\"- Patient: +225 05 77 88 99 / patient123\");\n  console.log(\"- Patient 2: +225 01 11 11 11 / test123\");\n}\n\nimport { eq } from \"drizzle-orm\";\n\n// Ex√©cution du seed si ce fichier est lanc√© directement\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedTestData().catch(console.error);\n}","size_bytes":5154},"server/storage-factory.ts":{"content":"import { type IStorage, MemStorage } from \"./storage\";\nimport { PostgresStorage } from \"./postgres-storage\";\n\nexport function createStorage(): IStorage {\n  // Use PostgreSQL database for persistent storage\n  if (process.env.DATABASE_URL) {\n    console.log('Using PostgreSQL database storage');\n    return new PostgresStorage();\n  } else {\n    console.log('Using in-memory storage (no DATABASE_URL found)');\n    return new MemStorage();\n  }\n}","size_bytes":441},"server/storage-old.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Pharmacy,\n  type InsertPharmacy,\n  type Prescription,\n  type InsertPrescription,\n  type Order,\n  type InsertOrder,\n  type DeliveryPerson,\n  type Notification,\n  type InsertNotification,\n} from \"@shared/firebase-schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  loginUser(phone: string, password: string): Promise<User | null>;\n\n  // Admin operations\n  getPendingUsers(): Promise<User[]>;\n  updateUserVerificationStatus(userId: string, status: \"approved\" | \"rejected\" | \"pending\"): Promise<User | null>;\n  getApplicationStats(): Promise<{\n    patients: number;\n    pharmaciens: number;\n    livreurs: number;\n    orders: number;\n    pendingOrders: number;\n    activeDeliveries: number;\n    completedDeliveries: number;\n  }>;\n\n  // Pharmacy operations\n  getPharmacies(lat?: number, lng?: number, radius?: number): Promise<Pharmacy[]>;\n  getPharmacy(id: string): Promise<Pharmacy | undefined>;\n  createPharmacy(pharmacy: InsertPharmacy): Promise<Pharmacy>;\n\n  // Prescription operations\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  getUserPrescriptions(userId: string): Promise<Prescription[]>;\n  updatePrescriptionStatus(id: string, status: string): Promise<Prescription | undefined>;\n\n  // Order operations\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getCurrentOrder(userId: string): Promise<Order | undefined>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  updateOrderMedications(id: string, medications: any[]): Promise<Order | undefined>;\n\n  // Delivery person operations\n  getDeliveryPerson(id: string): Promise<DeliveryPerson | undefined>;\n\n  // Notification operations\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<Notification | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private pharmacies: Map<string, Pharmacy> = new Map();\n  private prescriptions: Map<string, Prescription> = new Map();\n  private orders: Map<string, Order> = new Map();\n  private deliveryPersons: Map<string, DeliveryPerson> = new Map();\n  private notifications: Map<string, Notification> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Seed utilisateurs de test pour chaque r√¥le\n    const testUsers = [\n      {\n        firstName: \"Admin\",\n        lastName: \"YahoPharma\",\n        phone: \"+225 01 23 45 67\",\n        address: \"Si√®ge YahoPharma, Abidjan\",\n        password: \"admin123\",\n        role: \"admin\",\n        language: \"fr\"\n      },\n      {\n        firstName: \"Dr. Marie\",\n        lastName: \"Kouassi\",\n        phone: \"+225 07 11 22 33\",\n        address: \"Pharmacie de la Paix, Abidjan\",\n        password: \"pharma123\",\n        role: \"pharmacien\",\n        language: \"fr\"\n      },\n      {\n        firstName: \"Jean-Claude\",\n        lastName: \"Koffi\",\n        phone: \"+225 07 44 55 66\",\n        address: \"Zone livraison Abidjan\",\n        password: \"livreur123\",\n        role: \"livreur\",\n        language: \"fr\"\n      },\n      {\n        firstName: \"Aya\",\n        lastName: \"Diallo\",\n        phone: \"+225 05 77 88 99\",\n        address: \"Cocody, Abidjan\",\n        password: \"patient123\",\n        role: \"patient\",\n        language: \"fr\"\n      },\n      {\n        firstName: \"Patient\",\n        lastName: \"Test\",\n        phone: \"+2250767150156\",\n        address: \"Abidjan, Test Location\",\n        password: \"azertyuiop\",\n        role: \"patient\",\n        language: \"fr\"\n      }\n    ];\n\n    for (const userData of testUsers) {\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      const user: User = {\n        id: randomUUID(),\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        phone: userData.phone,\n        address: userData.address,\n        password: hashedPassword,\n        role: userData.role as any,\n        language: userData.language,\n        profileImageUrl: null,\n        pharmacyId: null,\n        isActive: true,\n        idDocumentUrl: null,\n        professionalDocumentUrl: null,\n        drivingLicenseUrl: null,\n        verificationStatus: \"approved\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.users.set(user.id, user);\n    }\n\n    // Seed pharmacies\n    const pharmaciesData: Pharmacy[] = [\n      {\n        id: randomUUID(),\n        name: \"Pharmacie de la Paix\",\n        address: \"Avenue F√©lix Houphou√´t-Boigny, Abidjan\",\n        latitude: \"5.3364\",\n        longitude: \"-4.0267\",\n        phone: \"+225 21 24 15 67\",\n        rating: \"4.8\",\n        deliveryTime: \"25\",\n        isOpen: true,\n        openingHours: {\n          monday: \"08:00-20:00\",\n          tuesday: \"08:00-20:00\",\n          wednesday: \"08:00-20:00\",\n          thursday: \"08:00-20:00\",\n          friday: \"08:00-20:00\",\n          saturday: \"08:00-18:00\",\n          sunday: \"09:00-17:00\"\n        },\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Pharmacie du Plateau\",\n        address: \"Boulevard de la R√©publique, Plateau\",\n        latitude: \"5.3200\",\n        longitude: \"-4.0130\",\n        phone: \"+225 21 32 45 78\",\n        rating: \"4.6\",\n        deliveryTime: \"30\",\n        isOpen: true,\n        openingHours: {\n          monday: \"07:30-19:30\",\n          tuesday: \"07:30-19:30\",\n          wednesday: \"07:30-19:30\",\n          thursday: \"07:30-19:30\",\n          friday: \"07:30-19:30\",\n          saturday: \"08:00-18:00\",\n          sunday: \"09:00-16:00\"\n        },\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Pharmacie Moderne\",\n        address: \"Rue des Jardins, Cocody\",\n        latitude: \"5.3580\",\n        longitude: \"-3.9889\",\n        phone: \"+225 22 44 56 89\",\n        rating: \"4.4\",\n        deliveryTime: \"40\",\n        isOpen: false,\n        openingHours: {\n          monday: \"08:00-19:00\",\n          tuesday: \"08:00-19:00\",\n          wednesday: \"08:00-19:00\",\n          thursday: \"08:00-19:00\",\n          friday: \"08:00-19:00\",\n          saturday: \"08:00-17:00\",\n          sunday: \"closed\"\n        },\n        createdAt: new Date(),\n      }\n    ];\n\n    pharmaciesData.forEach(pharmacy => {\n      this.pharmacies.set(pharmacy.id, pharmacy);\n    });\n\n    // Seed delivery persons\n    const deliveryPersonsData: DeliveryPerson[] = [\n      {\n        id: randomUUID(),\n        name: \"Jean-Claude K.\",\n        phone: \"+225 07 12 34 56\",\n        currentLatitude: \"5.3364\",\n        currentLongitude: \"-4.0267\",\n        isAvailable: true,\n        rating: \"4.9\",\n        createdAt: new Date(),\n      }\n    ];\n\n    deliveryPersonsData.forEach(person => {\n      this.deliveryPersons.set(person.id, person);\n    });\n\n    // Seed some test orders\n    const testOrders = [\n      {\n        userId: Array.from(this.users.values()).find(u => u.role === \"patient\")?.id || randomUUID(),\n        pharmacyId: Array.from(this.pharmacies.values())[0]?.id || randomUUID(),\n        status: 'pending',\n        totalAmount: 25000,\n        deliveryAddress: 'Cocody, pr√®s du carrefour 2 plateaux',\n        deliveryNotes: 'M√©dicaments pour hypertension',\n      },\n      {\n        userId: Array.from(this.users.values()).find(u => u.role === \"patient\")?.id || randomUUID(),\n        pharmacyId: Array.from(this.pharmacies.values())[1]?.id || randomUUID(),\n        status: 'confirmed',\n        totalAmount: 15000,\n        deliveryAddress: 'Adjam√©, pr√®s de la gare',\n        deliveryNotes: 'Antibiotiques prescrits',\n      },\n      {\n        userId: Array.from(this.users.values()).find(u => u.role === \"patient\")?.id || randomUUID(),\n        pharmacyId: Array.from(this.pharmacies.values())[0]?.id || randomUUID(),\n        status: 'ready_for_delivery',\n        totalAmount: 8500,\n        deliveryAddress: 'Marcory zone 4',\n        deliveryNotes: 'Vitamines et compl√©ments',\n      },\n      {\n        userId: Array.from(this.users.values()).find(u => u.role === \"patient\")?.id || randomUUID(),\n        pharmacyId: Array.from(this.pharmacies.values())[1]?.id || randomUUID(),\n        status: 'delivered',\n        totalAmount: 12000,\n        deliveryAddress: 'Plateau, pr√®s de la cath√©drale',\n        deliveryNotes: 'Commande livr√©e avec succ√®s',\n      }\n    ];\n\n    testOrders.forEach(orderData => {\n      const order: Order = {\n        id: randomUUID(),\n        userId: orderData.userId,\n        pharmacyId: orderData.pharmacyId,\n        prescriptionId: null,\n        status: orderData.status,\n        totalAmount: orderData.totalAmount.toString(),\n        deliveryAddress: orderData.deliveryAddress,\n        deliveryLatitude: null,\n        deliveryLongitude: null,\n        deliveryNotes: orderData.deliveryNotes,\n        medications: null,\n        bonDocuments: null,\n        estimatedDelivery: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes from now\n        deliveredAt: orderData.status === 'delivered' ? new Date() : null,\n        deliveryPersonId: orderData.status === 'delivered' ? Array.from(this.deliveryPersons.values())[0]?.id : null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.orders.set(order.id, order);\n    });\n\n    // Seed some test prescriptions\n    const testPrescriptions = [\n      {\n        userId: Array.from(this.users.values()).find(u => u.role === \"patient\")?.id || randomUUID(),\n        imageUrl: \"/uploads/prescriptions/prescription1.jpg\",\n        status: 'pending',\n        medications: [\n          { name: \"Parac√©tamol 500mg\", dosage: \"2 fois par jour\", available: true },\n          { name: \"Ibuprof√®ne 400mg\", dosage: \"3 fois par jour\", available: true }\n        ]\n      },\n      {\n        userId: Array.from(this.users.values()).find(u => u.role === \"patient\")?.id || randomUUID(),\n        imageUrl: \"/uploads/prescriptions/prescription2.jpg\",\n        status: 'processed',\n        medications: [\n          { name: \"Amoxicilline 1g\", dosage: \"2 fois par jour\", available: false },\n          { name: \"Doliprane 1000mg\", dosage: \"3 fois par jour\", available: true }\n        ]\n      }\n    ];\n\n    testPrescriptions.forEach(prescData => {\n      const prescription: Prescription = {\n        id: randomUUID(),\n        userId: prescData.userId,\n        imageUrl: prescData.imageUrl,\n        status: prescData.status,\n        medications: prescData.medications,\n        createdAt: new Date()\n      };\n      this.prescriptions.set(prescription.id, prescription);\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.phone === phone);\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user =>\n      (user.role === \"pharmacien\" || user.role === \"livreur\") &&\n      user.verificationStatus === \"pending\"\n    );\n  }\n\n  async updateUserVerificationStatus(userId: string, status: \"approved\" | \"rejected\" | \"pending\"): Promise<User | null> {\n    const user = this.users.get(userId);\n    if (!user) return null;\n\n    const updatedUser = {\n      ...user,\n      verificationStatus: status,\n      updatedAt: new Date()\n    };\n\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async getApplicationStats(): Promise<{\n    patients: number;\n    pharmaciens: number;\n    livreurs: number;\n    orders: number;\n    pendingOrders: number;\n    activeDeliveries: number;\n    completedDeliveries: number;\n  }> {\n    const allUsers = Array.from(this.users.values());\n    const allOrders = Array.from(this.orders.values());\n\n    const patients = allUsers.filter(u => u.role === \"patient\").length;\n    const pharmaciens = allUsers.filter(u => u.role === \"pharmacien\" && u.verificationStatus === \"approved\").length;\n    const livreurs = allUsers.filter(u => u.role === \"livreur\" && u.verificationStatus === \"approved\").length;\n    const orders = allOrders.length;\n    const pendingOrders = allOrders.filter(o => o.status === \"pending\").length;\n    const activeDeliveries = allOrders.filter(o => o.status === \"in_transit\").length;\n    const completedDeliveries = allOrders.filter(o => o.status === \"delivered\").length;\n\n    return {\n      patients,\n      pharmaciens,\n      livreurs,\n      orders,\n      pendingOrders,\n      activeDeliveries,\n      completedDeliveries\n    };\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n\n    const user: User = {\n      id,\n      firstName: insertUser.firstName,\n      lastName: insertUser.lastName,\n      phone: insertUser.phone,\n      address: insertUser.address,\n      password: hashedPassword,\n      role: insertUser.role ?? \"patient\",\n      language: insertUser.language ?? \"fr\",\n      profileImageUrl: insertUser.profileImageUrl ?? null,\n      pharmacyId: insertUser.pharmacyId ?? null,\n      isActive: insertUser.isActive ?? true,\n      idDocumentUrl: insertUser.idDocumentUrl ?? null,\n      professionalDocumentUrl: insertUser.professionalDocumentUrl ?? null,\n      drivingLicenseUrl: insertUser.drivingLicenseUrl ?? null,\n      verificationStatus: insertUser.verificationStatus ?? \"approved\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser: User = {\n      ...user,\n      ...updates,\n      // Si le mot de passe est mis √† jour, le hacher\n      password: updates.password ? await bcrypt.hash(updates.password, 10) : user.password,\n      updatedAt: new Date()\n    };\n\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async loginUser(phone: string, password: string): Promise<User | null> {\n    const user = await this.getUserByPhone(phone);\n    if (!user) return null;\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    return isPasswordValid ? user : null;\n  }\n\n  // Pharmacy operations\n  async getPharmacies(lat?: number, lng?: number, radius?: number): Promise<Pharmacy[]> {\n    let pharmacies = Array.from(this.pharmacies.values());\n\n    // If coordinates provided, sort by distance (mock implementation)\n    if (lat && lng) {\n      pharmacies = pharmacies.sort((a, b) => {\n        const distA = Math.sqrt(\n          Math.pow(parseFloat(a.latitude || \"0\") - lat, 2) +\n          Math.pow(parseFloat(a.longitude || \"0\") - lng, 2)\n        );\n        const distB = Math.sqrt(\n          Math.pow(parseFloat(b.latitude || \"0\") - lat, 2) +\n          Math.pow(parseFloat(b.longitude || \"0\") - lng, 2)\n        );\n        return distA - distB;\n      });\n\n      // Filter by radius if provided\n      if (radius) {\n        pharmacies = pharmacies.filter(pharmacy => {\n          const distance = Math.sqrt(\n            Math.pow(parseFloat(pharmacy.latitude || \"0\") - lat, 2) +\n            Math.pow(parseFloat(pharmacy.longitude || \"0\") - lng, 2)\n          );\n          return distance <= radius / 100; // Convert to degrees approximation\n        });\n      }\n    }\n\n    return pharmacies;\n  }\n\n  async getPharmacy(id: string): Promise<Pharmacy | undefined> {\n    return this.pharmacies.get(id);\n  }\n\n  async createPharmacy(insertPharmacy: InsertPharmacy): Promise<Pharmacy> {\n    const id = randomUUID();\n    const pharmacy: Pharmacy = {\n      id,\n      name: insertPharmacy.name,\n      address: insertPharmacy.address,\n      latitude: insertPharmacy.latitude ?? null,\n      longitude: insertPharmacy.longitude ?? null,\n      phone: insertPharmacy.phone ?? null,\n      rating: insertPharmacy.rating ?? null,\n      deliveryTime: insertPharmacy.deliveryTime ?? null,\n      isOpen: insertPharmacy.isOpen ?? null,\n      openingHours: insertPharmacy.openingHours ?? null,\n      createdAt: new Date()\n    };\n    this.pharmacies.set(id, pharmacy);\n    return pharmacy;\n  }\n\n  // Prescription operations\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    return this.prescriptions.get(id);\n  }\n\n  async createPrescription(insertPrescription: InsertPrescription): Promise<Prescription> {\n    const id = randomUUID();\n    const prescription: Prescription = {\n      id,\n      userId: insertPrescription.userId,\n      imageUrl: insertPrescription.imageUrl,\n      status: insertPrescription.status ?? null,\n      medications: insertPrescription.medications ?? null,\n      createdAt: new Date()\n    };\n    this.prescriptions.set(id, prescription);\n    return prescription;\n  }\n\n  async getUserPrescriptions(userId: string): Promise<Prescription[]> {\n    return Array.from(this.prescriptions.values()).filter(p => p.userId === userId);\n  }\n\n  async updatePrescriptionStatus(id: string, status: string): Promise<Prescription | undefined> {\n    const prescription = this.prescriptions.get(id);\n    if (prescription) {\n      prescription.status = status;\n      this.prescriptions.set(id, prescription);\n    }\n    return prescription;\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const deliveryPersonId = Array.from(this.deliveryPersons.values())\n      .find(dp => dp.isAvailable)?.id ?? null;\n\n    const order: Order = {\n      id,\n      userId: insertOrder.userId,\n      pharmacyId: insertOrder.pharmacyId,\n      prescriptionId: insertOrder.prescriptionId ?? null,\n      status: insertOrder.status ?? null,\n      totalAmount: insertOrder.totalAmount ?? null,\n      deliveryAddress: insertOrder.deliveryAddress,\n      deliveryLatitude: insertOrder.deliveryLatitude ?? null,\n      deliveryLongitude: insertOrder.deliveryLongitude ?? null,\n      deliveryNotes: insertOrder.deliveryNotes ?? null,\n      medications: insertOrder.medications ?? null,\n      bonDocuments: insertOrder.bonDocuments ?? null,\n      estimatedDelivery: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes from now\n      deliveredAt: null,\n      deliveryPersonId,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values())\n      .filter(o => o.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0));\n  }\n\n  // Get orders for pharmacist\n  async getPharmacistOrders(pharmacistId: string): Promise<any[]> {\n    const ordersArray = Array.from(this.orders.values());\n    const usersArray = Array.from(this.users.values());\n\n    // Pour l'instant, retourner toutes les commandes car nous n'avons pas encore\n    // d'association directe entre pharmacien et pharmacie\n    const ordersWithUserDetails = ordersArray.map(order => {\n        const user = usersArray.find(user => user.id === order.userId);\n        return {\n            id: order.id,\n            userId: order.userId,\n            pharmacyId: order.pharmacyId,\n            status: order.status,\n            totalAmount: order.totalAmount,\n            deliveryAddress: order.deliveryAddress,\n            createdAt: order.createdAt,\n            user: user ? {\n                firstName: user.firstName,\n                lastName: user.lastName,\n                phone: user.phone\n            } : null\n        };\n    });\n\n    return ordersWithUserDetails.sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0));\n  }\n\n  async updateOrderStatus(orderId: string, status: string, totalAmount?: number): Promise<Order | undefined> {\n    try {\n      const updateData: any = {\n        status,\n        updatedAt: new Date()\n      };\n\n      // Add totalAmount if provided\n      if (totalAmount !== undefined) {\n        updateData.totalAmount = totalAmount.toString();\n      }\n\n      const [updatedOrder] = await db\n        .update(orders)\n        .set(updateData)\n        .where(eq(orders.id, orderId))\n        .returning();\n      return updatedOrder;\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      return undefined;\n    }\n  }\n\n  async getOrderById(orderId: string): Promise<any> {\n    try {\n      const [order] = await db\n        .select()\n        .from(orders)\n        .where(eq(orders.id, orderId));\n      return order;\n    } catch (error) {\n      console.error('Error getting order by ID:', error);\n      return undefined;\n    }\n  }\n\n  async getDeliveryOrders(deliveryPersonId?: string): Promise<any[]> {\n    const ordersArray = Array.from(this.orders.values());\n    const usersArray = Array.from(this.users.values());\n    const pharmaciesArray = Array.from(this.pharmacies.values());\n\n    let filteredOrders = ordersArray;\n\n    if (deliveryPersonId) {\n      filteredOrders = ordersArray.filter(order => order.deliveryPersonId === deliveryPersonId);\n    } else {\n      filteredOrders = ordersArray.filter(order => order.status === 'ready_for_delivery');\n    }\n\n    const ordersWithDetails = filteredOrders.map(order => {\n      const user = usersArray.find(user => user.id === order.userId);\n      const pharmacy = pharmaciesArray.find(pharmacy => pharmacy.id === order.pharmacyId);\n\n      return {\n        id: order.id,\n        userId: order.userId,\n        pharmacyId: order.pharmacyId,\n        deliveryPersonId: order.deliveryPersonId,\n        status: order.status,\n        totalAmount: order.totalAmount,\n        deliveryAddress: order.deliveryAddress,\n        createdAt: order.createdAt,\n        user: user ? {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone\n        } : null,\n        pharmacy: pharmacy ? {\n          name: pharmacy.name,\n          address: pharmacy.address\n        } : null\n      };\n    });\n\n    return ordersWithDetails.sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0));\n  }\n\n  async assignDeliveryPerson(orderId: string, deliveryPersonId: string): Promise<any> {\n    const order = this.orders.get(orderId);\n    if (order) {\n      order.deliveryPersonId = deliveryPersonId;\n      order.status = 'in_delivery';\n      order.updatedAt = new Date();\n      this.orders.set(orderId, order);\n      return order;\n    }\n    return undefined;\n  }\n\n  async getCurrentOrder(userId: string): Promise<Order | undefined> {\n    return Array.from(this.orders.values())\n      .filter(o => o.userId === userId && !['delivered', 'cancelled'].includes(o.status || ''))\n      .sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0))[0];\n  }\n\n\n\n  async getAllPrescriptions(): Promise<any[]> {\n    const prescriptionsArray = Array.from(this.prescriptions.values());\n    const usersArray = Array.from(this.users.values());\n\n    const prescriptionsWithUserDetails = prescriptionsArray.map(prescription => {\n      const user = usersArray.find(user => user.id === prescription.userId);\n      return {\n        id: prescription.id,\n        userId: prescription.userId,\n        imageUrl: prescription.imageUrl,\n        status: prescription.status,\n        medications: prescription.medications,\n        createdAt: prescription.createdAt,\n        user: user ? {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone\n        } : null\n      };\n    });\n\n    return prescriptionsWithUserDetails.sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0));\n  }\n\n\n\n  // Delivery person operations\n  async getDeliveryPerson(id: string): Promise<DeliveryPerson | undefined> {\n    return this.deliveryPersons.get(id);\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0));\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      id,\n      userId: insertNotification.userId,\n      title: insertNotification.title,\n      body: insertNotification.body,\n      type: insertNotification.type,\n      orderId: insertNotification.orderId ?? null,\n      isRead: insertNotification.isRead ?? null,\n      createdAt: new Date()\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isRead = true;\n      this.notifications.set(id, notification);\n    }\n    return notification;\n  }\n}\n\n// PostgreSQL storage implementation removed - now using Firebase\n// The PostgresStorage class has been replaced by FirebaseStorage\n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    const orderValues: any = {\n      userId: orderData.userId,\n      pharmacyId: orderData.pharmacyId,\n      deliveryAddress: orderData.deliveryAddress,\n      deliveryNotes: orderData.deliveryNotes || null,\n      totalAmount: orderData.totalAmount || \"0\",\n      status: orderData.status || \"pending\",\n      medications: orderData.medications || null,\n      bonDocuments: orderData.bonDocuments || null,\n      prescriptionId: orderData.prescriptionId || null, // Added prescriptionId\n    };\n\n    // Ajouter les coordonn√©es de g√©olocalisation si disponibles\n    if (orderData.deliveryLatitude) {\n      orderValues.deliveryLatitude = orderData.deliveryLatitude.toString();\n    }\n    if (orderData.deliveryLongitude) {\n      orderValues.deliveryLongitude = orderData.deliveryLongitude.toString();\n    }\n\n    const [order] = await db.insert(orders).values(orderValues).returning();\n\n    return order;\n  }\n\n  async getUserOrders(userId: string): Promise<any[]> {\n    return await db.select({\n      id: orders.id,\n      userId: orders.userId,\n      pharmacyId: orders.pharmacyId,\n      medications: orders.medications,\n      deliveryAddress: orders.deliveryAddress,\n      deliveryNotes: orders.deliveryNotes,\n      totalAmount: orders.totalAmount,\n      status: orders.status,\n      createdAt: orders.createdAt,\n      updatedAt: orders.updatedAt,\n      deliveryLatitude: orders.deliveryLatitude,\n      deliveryLongitude: orders.deliveryLongitude,\n      prescriptionId: orders.prescriptionId,\n      bonDocuments: orders.bonDocuments,\n      estimatedDelivery: orders.estimatedDelivery,\n      deliveredAt: orders.deliveredAt,\n      deliveryPersonId: orders.deliveryPersonId,\n      pharmacy: {\n        id: pharmacies.id,\n        name: pharmacies.name,\n        address: pharmacies.address,\n        phone: pharmacies.phone,\n        latitude: pharmacies.latitude,\n        longitude: pharmacies.longitude,\n        openingHours: pharmacies.openingHours,\n        rating: pharmacies.rating\n      }\n    })\n    .from(orders)\n    .leftJoin(pharmacies, eq(orders.pharmacyId, pharmacies.id))\n    .where(eq(orders.userId, userId))\n    .orderBy(desc(orders.createdAt));\n  }\n\n  async getCurrentOrder(userId: string): Promise<any | undefined> {\n    const result = await db.select({\n      id: orders.id,\n      userId: orders.userId,\n      pharmacyId: orders.pharmacyId,\n      medications: orders.medications,\n      deliveryAddress: orders.deliveryAddress,\n      deliveryNotes: orders.deliveryNotes,\n      totalAmount: orders.totalAmount,\n      status: orders.status,\n      createdAt: orders.createdAt,\n      updatedAt: orders.updatedAt,\n      deliveryLatitude: orders.deliveryLatitude,\n      deliveryLongitude: orders.deliveryLongitude,\n      prescriptionId: orders.prescriptionId,\n      bonDocuments: orders.bonDocuments,\n      estimatedDelivery: orders.estimatedDelivery,\n      deliveredAt: orders.deliveredAt,\n      deliveryPersonId: orders.deliveryPersonId,\n      pharmacy: {\n        id: pharmacies.id,\n        name: pharmacies.name,\n        address: pharmacies.address,\n        phone: pharmacies.phone,\n        latitude: pharmacies.latitude,\n        longitude: pharmacies.longitude,\n        openingHours: pharmacies.openingHours,\n        rating: pharmacies.rating\n      }\n    })\n    .from(orders)\n    .leftJoin(pharmacies, eq(orders.pharmacyId, pharmacies.id))\n    .where(and(\n      eq(orders.userId, userId),\n      sql`${orders.status} IN ('pending', 'confirmed', 'preparing', 'in_transit')`\n    ))\n    .orderBy(desc(orders.createdAt))\n    .limit(1);\n    return result[0];\n  }\n\n  async updateOrderStatus(orderId: string, status: string, totalAmount?: number): Promise<any> {\n    const updateData: any = {\n      status,\n      updatedAt: new Date()\n    };\n\n    if (totalAmount !== undefined) {\n      updateData.totalAmount = totalAmount.toString();\n    }\n\n    const [updatedOrder] = await db\n      .update(orders)\n      .set(updateData)\n      .where(eq(orders.id, orderId))\n      .returning();\n\n    return updatedOrder;\n  }\n\n  async updateOrderMedications(id: string, medications: any[]): Promise<Order | undefined> {\n    const result = await db.update(orders).set({ medications }).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n  async updateOrderWithDeliveryNotes(id: string, deliveryNotes: string): Promise<Order | undefined> {\n    const result = await db.update(orders).set({ deliveryNotes }).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n  // Delivery person operations\n  async getDeliveryPerson(id: string): Promise<DeliveryPerson | undefined> {\n    // For now, return undefined as delivery_persons table is separate\n    return undefined;\n  }\n\n  // Additional methods needed by routes\n  async getPharmacistOrders(pharmacyId: string): Promise<any[]> {\n    return await db.select({\n      id: orders.id,\n      userId: orders.userId,\n      pharmacyId: orders.pharmacyId,\n      medications: orders.medications,\n      deliveryAddress: orders.deliveryAddress,\n      deliveryNotes: orders.deliveryNotes,\n      totalAmount: orders.totalAmount,\n      status: orders.status,\n      createdAt: orders.createdAt,\n      updatedAt: orders.updatedAt,\n      deliveryLatitude: orders.deliveryLatitude,\n      deliveryLongitude: orders.deliveryLongitude,\n      prescriptionId: orders.prescriptionId,\n      bonDocuments: orders.bonDocuments,\n      estimatedDelivery: orders.estimatedDelivery,\n      deliveredAt: orders.deliveredAt,\n      deliveryPersonId: orders.deliveryPersonId,\n      pharmacy: {\n        id: pharmacies.id,\n        name: pharmacies.name,\n        address: pharmacies.address,\n        phone: pharmacies.phone,\n        latitude: pharmacies.latitude,\n        longitude: pharmacies.longitude,\n        openingHours: pharmacies.openingHours,\n        rating: pharmacies.rating\n      }\n    })\n    .from(orders)\n    .leftJoin(pharmacies, eq(orders.pharmacyId, pharmacies.id))\n    .where(eq(orders.pharmacyId, pharmacyId))\n    .orderBy(desc(orders.createdAt));\n  }\n\n  // Get orders for any pharmacy (for pharmacists to see all orders)\n  async getAllPharmacistOrders(): Promise<any[]> {\n    return await db.select({\n      id: orders.id,\n      userId: orders.userId,\n      pharmacyId: orders.pharmacyId,\n      medications: orders.medications,\n      deliveryAddress: orders.deliveryAddress,\n      deliveryNotes: orders.deliveryNotes,\n      totalAmount: orders.totalAmount,\n      status: orders.status,\n      createdAt: orders.createdAt,\n      updatedAt: orders.updatedAt,\n      deliveryLatitude: orders.deliveryLatitude,\n      deliveryLongitude: orders.deliveryLongitude,\n      prescriptionId: orders.prescriptionId,\n      bonDocuments: orders.bonDocuments,\n      estimatedDelivery: orders.estimatedDelivery,\n      deliveredAt: orders.deliveredAt,\n      deliveryPersonId: orders.deliveryPersonId,\n      pharmacy: {\n        id: pharmacies.id,\n        name: pharmacies.name,\n        address: pharmacies.address,\n        phone: pharmacies.phone,\n        latitude: pharmacies.latitude,\n        longitude: pharmacies.longitude,\n        openingHours: pharmacies.openingHours,\n        rating: pharmacies.rating\n      }\n    })\n    .from(orders)\n    .leftJoin(pharmacies, eq(orders.pharmacyId, pharmacies.id))\n    .orderBy(desc(orders.createdAt));\n  }\n\n  async getAllPrescriptions(): Promise<Prescription[]> {\n    return await db.select().from(prescriptions).orderBy(desc(prescriptions.createdAt));\n  }\n\n  async getDeliveryOrders(): Promise<Order[]> {\n    return await db.select().from(orders).where(sql`${orders.status} IN ('ready_for_delivery', 'in_delivery')`);\n  }\n\n  async assignDeliveryPerson(orderId: string, deliveryPersonId: string): Promise<Order | undefined> {\n    const result = await db.update(orders).set({\n      deliveryPersonId,\n      status: 'in_delivery'\n    }).where(eq(orders.id, orderId)).returning();\n    return result[0];\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db.select().from(notifications).where(eq(notifications.userId, userId)).orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const result = await db.insert(notifications).values(notification).returning();\n    return result[0];\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const result = await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id)).returning();\n    return result[0];\n  }\n}\n\n// Use PostgresStorage instead of MemStorage\nexport const storage = new PostgresStorage();","size_bytes":34167},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Pharmacy,\n  type InsertPharmacy,\n  type Prescription,\n  type InsertPrescription,\n  type Order,\n  type InsertOrder,\n  type Notification,\n  type InsertNotification,\n  type PasswordResetCode,\n  type InsertPasswordResetCode,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  loginUser(phone: string, password: string): Promise<User | null>;\n  resetUserPassword(email: string, newPassword: string): Promise<void>;\n  getUserStats(userId: string): Promise<{\n    totalOrders: number;\n    totalSpent: number;\n    totalSavings: number;\n    loyaltyPoints: number;\n  }>;\n\n  // Admin operations\n  getPendingUsers(): Promise<User[]>;\n  updateUserVerificationStatus(userId: string, status: \"approved\" | \"rejected\" | \"pending\"): Promise<User | null>;\n  getApplicationStats(): Promise<{\n    patients: number;\n    pharmaciens: number;\n    livreurs: number;\n    orders: number;\n    pendingOrders: number;\n    activeDeliveries: number;\n    completedDeliveries: number;\n  }>;\n\n  // Pharmacy operations\n  getPharmacies(lat?: number, lng?: number, radius?: number): Promise<Pharmacy[]>;\n  getPharmacy(id: string): Promise<Pharmacy | undefined>;\n  createPharmacy(pharmacy: InsertPharmacy): Promise<Pharmacy>;\n  updatePharmacy(id: string, updates: Partial<InsertPharmacy>): Promise<Pharmacy | undefined>;\n  getPharmacyByUserId(userId: string): Promise<Pharmacy | undefined>;\n  getPharmacyById(pharmacyId: string): Promise<Pharmacy | undefined>;\n\n  // Prescription operations\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  getUserPrescriptions(userId: string): Promise<Prescription[]>;\n  updatePrescriptionStatus(id: string, status: string): Promise<Prescription | undefined>;\n\n  // Order operations\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getCurrentOrder(userId: string): Promise<Order | undefined>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  updateOrderMedications(id: string, medications: any[]): Promise<Order | undefined>;\n  deleteOrder(id: string): Promise<boolean>;\n\n  // Double confirmation delivery operations\n  confirmDeliveryArrival(orderId: string): Promise<Order | undefined>;\n  confirmDeliveryCompletion(orderId: string): Promise<Order | undefined>;\n\n  // Delivery person operations (using User type with role='livreur')\n  getAvailableDeliveryPersonnel(): Promise<User[]>;\n  getAvailableDeliveryPersonnelForPharmacy(pharmacyId: string): Promise<User[]>;\n  getDeliveryOrders(): Promise<Order[]>;\n  assignDeliveryPerson(orderId: string, deliveryPersonId: string): Promise<Order | undefined>;\n  getMyAssignedOrders(deliveryPersonId: string): Promise<Order[]>;\n  acceptDeliveryAssignment(orderId: string, deliveryPersonId: string): Promise<Order | undefined>;\n  rejectDeliveryAssignment(orderId: string, deliveryPersonId: string, isExpired?: boolean): Promise<boolean>;\n  cleanupExpiredAssignments(): Promise<void>;\n\n  // Notification operations\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<Notification | undefined>;\n\n  // Password reset operations\n  createPasswordResetCode(resetCode: InsertPasswordResetCode): Promise<PasswordResetCode>;\n  getValidPasswordResetCode(email: string, code: string): Promise<PasswordResetCode | undefined>;\n  markPasswordResetCodeUsed(id: string): Promise<void>;\n\n  // Consolidated delivery data is in users table - no separate profile/vehicle tables needed\n\n  // Order cleanup operations  \n  cleanupOldOrders(): Promise<number>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private pharmacies: Map<string, Pharmacy> = new Map();\n  private prescriptions: Map<string, Prescription> = new Map();\n  private orders: Map<string, Order> = new Map();\n  // Removed deliveryPersons map - using users with role='livreur' instead\n  private notifications: Map<string, Notification> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Seed test users for each role\n    const testUsers = [\n      {\n        firstName: \"Admin\",\n        lastName: \"YahoPharma\",\n        phone: \"+225 01 23 45 67\",\n        address: \"Si√®ge YahoPharma, Abidjan\",\n        password: \"admin123\",\n        role: \"admin\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const\n      },\n      {\n        firstName: \"Dr. Marie\",\n        lastName: \"Kouassi\",\n        phone: \"+225 07 11 22 33\",\n        address: \"Pharmacie de la Paix, Abidjan\",\n        password: \"pharma123\",\n        role: \"pharmacien\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const\n      },\n      {\n        firstName: \"Dr. Adjoua\",\n        lastName: \"Bamba\",\n        phone: \"+225 05 44 33 22\",\n        address: \"Pharmacie Centrale Plus, Marcory\",\n        password: \"pharma2024\",\n        role: \"pharmacien\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const\n      },\n      {\n        firstName: \"Jean-Claude\",\n        lastName: \"Koffi\",\n        phone: \"+225 07 44 55 66\",\n        address: \"Zone livraison Abidjan\",\n        password: \"livreur123\",\n        role: \"livreur\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const,\n        deliveryApplicationStatus: \"pending\" as const,\n        appliedPharmacyId: null, // Sera d√©fini plus tard\n        motivationLetter: \"Fort de mon exp√©rience de plusieurs ann√©es dans la livraison √† Abidjan, je souhaite mettre mes comp√©tences au service de votre pharmacie pour assurer un service de qualit√© √† vos patients.\",\n        experience: \"5 ans d'exp√©rience en livraison dans diff√©rents secteurs. Excellente connaissance de toutes les zones d'Abidjan. Ponctuel et fiable.\",\n        availability: \"Disponible du lundi au vendredi de 7h √† 19h, et samedi de 8h √† 16h. Possibilit√© d'urgences le dimanche.\"\n      },\n      {\n        firstName: \"Aya\",\n        lastName: \"Diallo\",\n        phone: \"+225 05 77 88 99\",\n        address: \"Cocody, Abidjan\",\n        password: \"patient123\",\n        role: \"patient\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const\n      }\n    ];\n\n    for (const userData of testUsers) {\n      await this.createUser(userData);\n    }\n\n    // Seed pharmacies\n    const testPharmacies = [\n      {\n        name: \"Pharmacie Dr. Marie Kouassi\",\n        address: \"Quartier Riviera Golf, Cocody\",\n        latitude: 5.3364,\n        longitude: -4.0267,\n        phone: \"+225 07 11 22 33\",\n        rating: 4.8,\n        deliveryTime: \"25\",\n        isOpen: true,\n        openingHours: {\n          monday: { open: \"08:00\", close: \"20:00\" },\n          tuesday: { open: \"08:00\", close: \"20:00\" },\n          wednesday: { open: \"08:00\", close: \"20:00\" },\n          thursday: { open: \"08:00\", close: \"20:00\" },\n          friday: { open: \"08:00\", close: \"20:00\" },\n          saturday: { open: \"08:00\", close: \"18:00\" },\n          sunday: { open: \"09:00\", close: \"17:00\" }\n        }\n      },\n      {\n        name: \"Pharmacie de la Paix\",\n        address: \"Boulevard de la Paix, Cocody\",\n        latitude: 5.3364,\n        longitude: -4.0267,\n        phone: \"+225 27 22 44 55 66\",\n        rating: 4.5,\n        deliveryTime: \"30\",\n        isOpen: true\n      },\n      {\n        name: \"Pharmacie du Plateau\",\n        address: \"Avenue Chardy, Plateau\",\n        latitude: 5.3198,\n        longitude: -4.0267,\n        phone: \"+225 27 20 21 22 23\",\n        rating: 4.2,\n        deliveryTime: \"25\",\n        isOpen: true\n      },\n      {\n        name: \"Pharmacie Centrale Plus\",\n        address: \"Boulevard VGE, Marcory\",\n        latitude: 5.2845,\n        longitude: -3.9731,\n        phone: \"+225 05 44 33 22\",\n        rating: 4.7,\n        deliveryTime: \"20\",\n        isOpen: true,\n        openingHours: {\n          monday: { open: \"08:00\", close: \"20:00\" },\n          tuesday: { open: \"08:00\", close: \"20:00\" },\n          wednesday: { open: \"08:00\", close: \"20:00\" },\n          thursday: { open: \"08:00\", close: \"20:00\" },\n          friday: { open: \"08:00\", close: \"20:00\" },\n          saturday: { open: \"09:00\", close: \"18:00\" },\n          sunday: { open: \"10:00\", close: \"16:00\" }\n        }\n      },\n      {\n        name: \"Ithiel Pharma\",\n        address: \"Avenue des Martyrs, Yopougon\",\n        latitude: 5.3456,\n        longitude: -4.0892,\n        phone: \"+225 27 23 45 67 89\",\n        rating: 4.6,\n        deliveryTime: \"25\",\n        isOpen: true,\n        openingHours: {\n          monday: { open: \"07:30\", close: \"19:30\" },\n          tuesday: { open: \"07:30\", close: \"19:30\" },\n          wednesday: { open: \"07:30\", close: \"19:30\" },\n          thursday: { open: \"07:30\", close: \"19:30\" },\n          friday: { open: \"07:30\", close: \"19:30\" },\n          saturday: { open: \"08:00\", close: \"18:00\" },\n          sunday: { open: \"09:00\", close: \"17:00\" }\n        }\n      }\n    ];\n\n    for (const pharmacyData of testPharmacies) {\n      await this.createPharmacy(pharmacyData);\n    }\n\n    // Cr√©er des commandes de test pour le dashboard livreur\n    await this.createTestDeliveryOrders();\n\n    // Cr√©er des candidatures de test pour les pharmacies\n    await this.createTestDeliveryApplications();\n  }\n\n  private async createTestDeliveryOrders() {\n    // R√©cup√©rer les utilisateurs de test\n    const patient = Array.from(this.users.values()).find(u => u.role === 'patient');\n    const livreur = Array.from(this.users.values()).find(u => u.role === 'livreur');\n    const pharmacies = Array.from(this.pharmacies.values());\n\n    if (!patient || !livreur || pharmacies.length === 0) return;\n\n    // Cr√©er quelques commandes de test\n    const testOrders = [\n      {\n        userId: patient.id,\n        pharmacyId: pharmacies[0].id,\n        deliveryAddress: \"Riviera Golf, Cocody, Abidjan\",\n        deliveryLatitude: 5.3364,\n        deliveryLongitude: -4.0267,\n        medications: [\n          { name: \"Parac√©tamol 500mg\", quantity: 2, price: \"1500\", dosage: \"1 comprim√© 3x/jour\" },\n          { name: \"Amoxicilline 250mg\", quantity: 1, price: \"3500\", dosage: \"1 g√©lule 2x/jour\" }\n        ],\n        status: \"ready_for_delivery\",\n        totalAmount: \"5000\",\n        deliveryPersonId: livreur.id // Assign√©e au livreur\n      },\n      {\n        userId: patient.id,\n        pharmacyId: pharmacies[1].id,\n        deliveryAddress: \"Plateau, Abidjan\",\n        deliveryLatitude: 5.3198,\n        deliveryLongitude: -4.0267,\n        medications: [\n          { name: \"Doliprane 1000mg\", quantity: 1, price: \"2500\", dosage: \"1 comprim√© si douleur\" }\n        ],\n        status: \"in_delivery\",\n        totalAmount: \"2500\",\n        deliveryPersonId: livreur.id // En cours de livraison\n      },\n      {\n        userId: patient.id,\n        pharmacyId: pharmacies[2].id,\n        deliveryAddress: \"Marcory Zone 4, Abidjan\",\n        deliveryLatitude: 5.2845,\n        deliveryLongitude: -3.9731,\n        medications: [\n          { name: \"Vitamine C\", quantity: 1, price: \"1200\", dosage: \"1 comprim√©/jour\" }\n        ],\n        status: \"ready_for_delivery\",\n        totalAmount: \"1200\"\n        // Pas de deliveryPersonId - disponible pour assignation\n      }\n    ];\n\n    for (const orderData of testOrders) {\n      const orderId = randomUUID();\n      const order: Order = {\n        id: orderId,\n        ...orderData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.orders.set(orderId, order);\n    }\n\n    console.log(`‚úÖ ${testOrders.length} commandes de test cr√©√©es pour le dashboard livreur`);\n  }\n\n  private async createTestDeliveryApplications() {\n    // R√©cup√©rer les pharmacies et cr√©er quelques livreurs candidats\n    const pharmacies = Array.from(this.pharmacies.values());\n    if (pharmacies.length === 0) return;\n\n    // Cr√©er des livreurs candidats\n    const testDeliveryApplicants = [\n      {\n        firstName: \"Mohamed\",\n        lastName: \"Traore\",\n        phone: \"+225 07 88 99 00\",\n        address: \"Adjam√©, Abidjan\",\n        password: \"livreur456\",\n        role: \"livreur\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const,\n        deliveryApplicationStatus: \"pending\" as const,\n        appliedPharmacyId: pharmacies[0].id, // Postule √† la premi√®re pharmacie\n        motivationLetter: \"Je suis tr√®s motiv√© √† rejoindre votre √©quipe de livraison. J'ai de l'exp√©rience dans la livraison et je connais bien Abidjan.\",\n        experience: \"2 ans d'exp√©rience en livraison √† moto dans la r√©gion d'Abidjan. Ancien livreur chez UberEats.\",\n        availability: \"Disponible du lundi au samedi de 8h √† 18h. Flexible pour les urgences le weekend.\"\n      },\n      {\n        firstName: \"Fatou\",\n        lastName: \"Coulibaly\",\n        phone: \"+225 05 11 22 33\",\n        address: \"Treichville, Abidjan\",\n        password: \"livreur789\",\n        role: \"livreur\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const,\n        deliveryApplicationStatus: \"pending\" as const,\n        appliedPharmacyId: pharmacies[1] ? pharmacies[1].id : pharmacies[0].id, // Postule √† la deuxi√®me pharmacie ou premi√®re si pas de deuxi√®me\n        motivationLetter: \"En tant que femme livreur, je souhaite contribuer √† am√©liorer l'acc√®s aux m√©dicaments dans ma communaut√©.\",\n        experience: \"1 an d'exp√©rience en livraison de colis. Excellente connaissance de Treichville et environs.\",\n        availability: \"Disponible tous les jours de 9h √† 17h. Pr√©f√©rence pour les livraisons en journ√©e.\"\n      },\n      {\n        firstName: \"Ibrahim\",\n        lastName: \"Ouattara\",\n        phone: \"+225 01 44 55 66\",\n        address: \"Koumassi, Abidjan\",\n        password: \"livreur101\",\n        role: \"livreur\" as const,\n        language: \"fr\",\n        isActive: true,\n        verificationStatus: \"approved\" as const,\n        deliveryApplicationStatus: \"pending\" as const,\n        appliedPharmacyId: pharmacies[0].id, // Postule aussi √† la premi√®re pharmacie\n        motivationLetter: \"Je cherche une opportunit√© stable dans le secteur de la sant√©. La livraison de m√©dicaments me semble √™tre un travail valorisant.\",\n        experience: \"Nouveau dans la livraison mais tr√®s motiv√©. J'ai un permis de conduire valide et une moto en bon √©tat.\",\n        availability: \"Tr√®s flexible, disponible 7j/7 y compris les urgences de nuit.\"\n      }\n    ];\n\n    for (const applicantData of testDeliveryApplicants) {\n      // V√©rifier qu'un utilisateur avec ce t√©l√©phone n'existe pas d√©j√†\n      const existingUser = await this.getUserByPhone(applicantData.phone);\n      if (!existingUser) {\n        await this.createUser(applicantData);\n        console.log(`‚úÖ Candidat livreur cr√©√©: ${applicantData.firstName} ${applicantData.lastName} -> Pharmacie ${applicantData.appliedPharmacyId}`);\n      }\n    }\n\n    console.log(`‚úÖ ${testDeliveryApplicants.length} candidatures de livreurs cr√©√©es pour test`);\n\n    // Mettre √† jour Jean-Claude avec une candidature vers la premi√®re pharmacie\n    const jeanClaude = Array.from(this.users.values()).find(u => u.firstName === \"Jean-Claude\" && u.lastName === \"Koffi\");\n    if (jeanClaude && pharmacies.length > 0) {\n      await this.updateUser(jeanClaude.id, {\n        deliveryApplicationStatus: \"pending\" as const,\n        appliedPharmacyId: pharmacies[0].id,\n        motivationLetter: \"Fort de mon exp√©rience de plusieurs ann√©es dans la livraison √† Abidjan, je souhaite mettre mes comp√©tences au service de votre pharmacie pour assurer un service de qualit√© √† vos patients.\",\n        experience: \"5 ans d'exp√©rience en livraison dans diff√©rents secteurs. Excellente connaissance de toutes les zones d'Abidjan. Ponctuel et fiable.\",\n        availability: \"Disponible du lundi au vendredi de 7h √† 19h, et samedi de 8h √† 16h. Possibilit√© d'urgences le dimanche.\"\n      });\n      console.log(`‚úÖ Jean-Claude mis √† jour avec candidature pour pharmacie ${pharmacies[0].id}`);\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.phone === phone);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(user.password, 10);\n\n    const newUser: User = {\n      id,\n      ...user,\n      password: hashedPassword,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      // Default values for new fields related to delivery applications\n      appliedPharmacyId: undefined,\n      deliveryApplicationStatus: user.role === 'livreur' ? 'pending' : 'none',\n      pharmacyId: undefined, // This will be set upon approval\n    };\n\n    this.users.set(id, newUser);\n    return newUser;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser = {\n      ...user,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async loginUser(phone: string, password: string): Promise<User | null> {\n    const user = await this.getUserByPhone(phone);\n    if (!user) return null;\n\n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) return null;\n\n    // Allow login for livreurs if they are approved, regardless of deliveryApplicationStatus\n    // The frontend will handle showing pending validation if needed\n    // Only block login if user account itself is not verified yet\n\n    return user;\n  }\n\n  async resetUserPassword(email: string, newPassword: string): Promise<void> {\n    const user = await this.getUserByEmail(email);\n    if (!user) throw new Error('User not found');\n    \n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    user.updatedAt = new Date();\n    this.users.set(user.id, user);\n  }\n\n  // Admin operations\n  async getPendingUsers(): Promise<User[]> {\n    return Array.from(this.users.values())\n      .filter(user => user.verificationStatus === 'pending' && ['pharmacien', 'livreur'].includes(user.role));\n  }\n\n  async updateUserVerificationStatus(userId: string, status: \"approved\" | \"rejected\" | \"pending\"): Promise<User | null> {\n    const user = this.users.get(userId);\n    if (!user) return null;\n\n    user.verificationStatus = status;\n    user.updatedAt = new Date();\n\n    // If a livreur is approved, ensure their application status reflects this\n    if (user.role === 'livreur' && status === 'approved') {\n      // Assuming verification and application are linked or handled separately\n      // If verification implies immediate approval for delivery, set status here\n      if (user.deliveryApplicationStatus === 'pending') {\n         user.deliveryApplicationStatus = 'approved';\n      }\n    } else if (user.role === 'livreur' && status === 'rejected') {\n      user.deliveryApplicationStatus = 'rejected';\n      user.appliedPharmacyId = undefined; // Clear application if rejected\n    }\n\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async getApplicationStats(): Promise<{\n    patients: number;\n    pharmaciens: number;\n    livreurs: number;\n    orders: number;\n    pendingOrders: number;\n    activeDeliveries: number;\n    completedDeliveries: number;\n  }> {\n    const usersArray = Array.from(this.users.values());\n    const ordersArray = Array.from(this.orders.values());\n\n    const patients = usersArray.filter(u => u.role === 'patient').length;\n    const pharmaciens = usersArray.filter(u => u.role === 'pharmacien' && u.verificationStatus === 'approved').length;\n    const livreurs = usersArray.filter(u => u.role === 'livreur' && u.verificationStatus === 'approved').length;\n    const orders = ordersArray.length;\n    const pendingOrders = ordersArray.filter(o => o.status === 'pending').length;\n    const activeDeliveries = ordersArray.filter(o => ['confirmed', 'preparing', 'ready_for_delivery', 'in_transit', 'in_delivery'].includes(o.status)).length;\n    const completedDeliveries = ordersArray.filter(o => o.status === 'delivered').length;\n\n    return {\n      patients,\n      pharmaciens,\n      livreurs,\n      orders,\n      pendingOrders,\n      activeDeliveries,\n      completedDeliveries\n    };\n  }\n\n  async getUserStats(userId: string): Promise<{\n    totalOrders: number;\n    totalSpent: number;\n    totalSavings: number;\n    loyaltyPoints: number;\n  }> {\n    // Filtrer toutes les commandes appartenant √† cet utilisateur\n    const userOrders = Array.from(this.orders.values()).filter(order => {\n      const isUserOrder = order.userId === userId;\n      console.log(`Checking order ${order.id}: userId=${order.userId}, targetUserId=${userId}, match=${isUserOrder}`);\n      return isUserOrder;\n    });\n\n    console.log(`Found ${userOrders.length} orders for user ${userId}`);\n\n    const totalOrders = userOrders.length;\n    const totalSpent = userOrders.reduce((sum, order) => {\n      const amount = parseFloat(order.totalAmount || '0');\n      console.log(`Order ${order.id}: totalAmount=${order.totalAmount}, parsed=${amount}`);\n      return sum + amount;\n    }, 0);\n\n    // Calcul des √©conomies bas√© sur les promotions et r√©ductions\n    const totalSavings = userOrders.reduce((sum, order) => {\n      // Supposons une √©conomie moyenne de 5% sur chaque commande\n      return sum + (parseFloat(order.totalAmount || '0') * 0.05);\n    }, 0);\n\n    // Points de fid√©lit√© : 1 point par 100 FCFA d√©pens√©s\n    const loyaltyPoints = Math.floor(totalSpent / 100);\n\n    console.log(`User stats for ${userId}:`, {\n      totalOrders,\n      totalSpent,\n      totalSavings: Math.round(totalSavings),\n      loyaltyPoints\n    });\n\n    return {\n      totalOrders,\n      totalSpent,\n      totalSavings: Math.round(totalSavings),\n      loyaltyPoints\n    };\n  }\n\n  // Admin methods for complete management\n  async getAllOrdersForAdmin(): Promise<any[]> {\n    const allOrders = Array.from(this.orders.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    return allOrders.map(order => {\n      const pharmacy = this.pharmacies.get(order.pharmacyId);\n      const patient = this.users.get(order.userId);\n      const deliveryPerson = order.deliveryPersonId ? this.users.get(order.deliveryPersonId) : null;\n\n      return {\n        ...order,\n        pharmacy: pharmacy ? {\n          id: pharmacy.id,\n          name: pharmacy.name,\n          address: pharmacy.address,\n          phone: pharmacy.phone\n        } : null,\n        patient: patient ? {\n          firstName: patient.firstName,\n          lastName: patient.lastName,\n          phone: patient.phone\n        } : null,\n        deliveryPerson: deliveryPerson ? {\n          firstName: deliveryPerson.firstName,\n          lastName: deliveryPerson.lastName,\n          phone: deliveryPerson.phone\n        } : null,\n        totalAmount: order.totalAmount || '0'\n      };\n    });\n  }\n\n  async getWeeklyStats(weekDate: Date): Promise<{ totalRevenue: number; ordersCount: number }> {\n    const startOfWeek = new Date(weekDate);\n    startOfWeek.setDate(weekDate.getDate() - weekDate.getDay());\n    startOfWeek.setHours(0, 0, 0, 0);\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(startOfWeek.getDate() + 6);\n    endOfWeek.setHours(23, 59, 59, 999);\n\n    const weekOrders = Array.from(this.orders.values()).filter(order => {\n      const orderDate = new Date(order.createdAt);\n      return orderDate >= startOfWeek && orderDate <= endOfWeek && \n             ['confirmed', 'ready_for_delivery', 'in_delivery', 'delivered'].includes(order.status);\n    });\n\n    const totalRevenue = weekOrders.reduce((sum, order) => {\n      return sum + (parseFloat(order.totalAmount || '0') || 0);\n    }, 0);\n\n    return {\n      totalRevenue,\n      ordersCount: weekOrders.length\n    };\n  }\n\n  async getAllPharmaciesForAdmin(): Promise<any[]> {\n    const allPharmacies = Array.from(this.pharmacies.values());\n\n    return allPharmacies.map(pharmacy => {\n      // Compter les commandes de cette pharmacie\n      const pharmacyOrders = Array.from(this.orders.values()).filter(order => order.pharmacyId === pharmacy.id);\n      const totalRevenue = pharmacyOrders.reduce((sum, order) => {\n        return sum + (parseFloat(order.totalAmount || '0') || 0);\n      }, 0);\n\n      return {\n        ...pharmacy,\n        totalOrders: pharmacyOrders.length,\n        totalRevenue: totalRevenue,\n        completedOrders: pharmacyOrders.filter(o => o.status === 'delivered').length\n      };\n    });\n  }\n\n  async getAllDeliveryPersonnelForAdmin(): Promise<any[]> {\n    const deliveryPersonnel = Array.from(this.users.values()).filter(user => user.role === 'livreur');\n\n    return deliveryPersonnel.map(person => {\n      // Compter les livraisons de cette personne\n      const personDeliveries = Array.from(this.orders.values()).filter(order => order.deliveryPersonId === person.id);\n      const pharmacy = person.pharmacyId ? this.pharmacies.get(person.pharmacyId) : null;\n\n      return {\n        ...person,\n        totalDeliveries: personDeliveries.filter(o => o.status === 'delivered').length,\n        activeDeliveries: personDeliveries.filter(o => ['ready_for_delivery', 'in_delivery'].includes(o.status)).length,\n        pharmacyName: pharmacy?.name || null,\n        rating: 5.0, // Default rating\n        isActive: person.isActive !== false // Default to true if not set\n      };\n    });\n  }\n\n  // Pharmacy operations\n  async getPharmacies(lat?: number, lng?: number, radius?: number): Promise<Pharmacy[]> {\n    // Nettoyer les doublons √† chaque r√©cup√©ration\n    await this.cleanupDuplicatePharmacies();\n\n    const pharmacies = Array.from(this.pharmacies.values());\n\n    if (lat !== undefined && lng !== undefined) {\n      return pharmacies.sort((a, b) => {\n        const distA = this.calculateDistance(lat, lng, a.latitude || 0, a.longitude || 0);\n        const distB = this.calculateDistance(lat, lng, b.latitude || 0, b.longitude || 0);\n        return distA - distB;\n      });\n    }\n\n    return pharmacies;\n  }\n\n  private calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  async getPharmacy(id: string): Promise<Pharmacy | undefined> {\n    return this.pharmacies.get(id);\n  }\n\n  async getPharmacyById(pharmacyId: string): Promise<Pharmacy | undefined> {\n    return this.pharmacies.get(pharmacyId);\n  }\n\n  async createPharmacy(pharmacy: InsertPharmacy): Promise<Pharmacy> {\n    const id = randomUUID();\n    const newPharmacy: Pharmacy = {\n      id,\n      ...pharmacy,\n      createdAt: new Date(),\n    };\n\n    this.pharmacies.set(id, newPharmacy);\n    console.log('‚úÖ Pharmacie cr√©√©e:', { id, name: newPharmacy.name, phone: newPharmacy.phone });\n    return newPharmacy;\n  }\n\n  async updatePharmacy(id: string, updates: Partial<InsertPharmacy>): Promise<Pharmacy | undefined> {\n    const existing = this.pharmacies.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const updated: Pharmacy = {\n      ...existing,\n      ...updates,\n      id, // Preserve the original ID\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n\n    this.pharmacies.set(id, updated);\n    console.log('üîÑ Pharmacie mise √† jour:', { id, name: updated.name, phone: updated.phone });\n    return updated;\n  }\n\n  // Nettoyer les doublons de pharmacies bas√©es sur le t√©l√©phone\n  async cleanupDuplicatePharmacies(): Promise<void> {\n    const pharmaciesByPhone = new Map<string, Pharmacy[]>();\n\n    // Grouper par num√©ro de t√©l√©phone\n    for (const pharmacy of this.pharmacies.values()) {\n      if (pharmacy.phone) {\n        if (!pharmaciesByPhone.has(pharmacy.phone)) {\n          pharmaciesByPhone.set(pharmacy.phone, []);\n        }\n        pharmaciesByPhone.get(pharmacy.phone)!.push(pharmacy);\n      }\n    }\n\n    // Supprimer les doublons\n    for (const [phone, duplicates] of pharmaciesByPhone.entries()) {\n      if (duplicates.length > 1) {\n        // Garder la plus r√©cente (derni√®re cr√©√©e)\n        const sorted = duplicates.sort((a, b) => \n          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n        );\n        const keepPharmacy = sorted[0];\n        const toDelete = sorted.slice(1);\n\n        console.log(`üßπ Nettoyage doublons pour ${phone}: garder ${keepPharmacy.id}, supprimer`, \n          toDelete.map(p => p.id));\n\n        // Supprimer les doublons\n        for (const pharmacy of toDelete) {\n          this.pharmacies.delete(pharmacy.id);\n        }\n      }\n    }\n  }\n\n  async getPharmacyByUserId(userId: string): Promise<Pharmacy | undefined> {\n    const user = this.users.get(userId);\n    console.log('getPharmacyByUserId - User details:', { userId, role: user?.role, pharmacyId: user?.pharmacyId, phone: user?.phone });\n\n    if (!user || user.role !== 'pharmacien') return undefined;\n\n    // First check if user has a pharmacyId assigned\n    if (user.pharmacyId) {\n      const pharmacy = this.pharmacies.get(user.pharmacyId);\n      console.log('getPharmacyByUserId - Pharmacy by pharmacyId:', pharmacy ? pharmacy.id : 'not found');\n      if (pharmacy) return pharmacy;\n    }\n\n    // Fallback: try to find pharmacy by phone number\n    const allPharmacies = Array.from(this.pharmacies.values());\n    console.log('getPharmacyByUserId - All pharmacies:', allPharmacies.map(p => ({ id: p.id, phone: p.phone, name: p.name })));\n\n    let pharmacy = allPharmacies.find(p => p.phone === user.phone);\n    console.log('getPharmacyByUserId - Pharmacy by phone match:', pharmacy ? pharmacy.id : 'not found');\n\n    // If still not found, try to find by name pattern\n    if (!pharmacy) {\n      const expectedName = `Pharmacie ${user.firstName} ${user.lastName}`;\n      console.log('getPharmacyByUserId - Searching for pharmacy with name:', expectedName);\n      pharmacy = allPharmacies.find(p => p.name === expectedName);\n      console.log('getPharmacyByUserId - Pharmacy by name match:', pharmacy ? pharmacy.id : 'not found');\n    }\n\n    // Additional fallback: try partial name matches\n    if (!pharmacy) {\n      const userFullName = `${user.firstName} ${user.lastName}`.toLowerCase();\n      pharmacy = allPharmacies.find(p => \n        p.name.toLowerCase().includes(user.firstName.toLowerCase()) || \n        p.name.toLowerCase().includes(user.lastName.toLowerCase()) ||\n        userFullName.includes(p.name.toLowerCase())\n      );\n      console.log('getPharmacyByUserId - Pharmacy by partial name match:', pharmacy ? pharmacy.id : 'not found');\n    }\n\n    // If still not found, auto-create a pharmacy for this pharmacist user\n    if (!pharmacy) {\n      const pharmacyName = `Pharmacie ${user.firstName} ${user.lastName}`;\n      console.log('getPharmacyByUserId - Auto-creating pharmacy:', pharmacyName);\n\n      const newPharmacyData: InsertPharmacy = {\n        name: pharmacyName,\n        address: user.address || \"Abidjan, C√¥te d'Ivoire\",\n        latitude: 5.3364, // Default Abidjan coordinates\n        longitude: -4.0267,\n        phone: user.phone,\n        rating: 4.5,\n        deliveryTime: \"30\",\n        isOpen: true,\n        openingHours: {\n          monday: { open: \"08:00\", close: \"20:00\" },\n          tuesday: { open: \"08:00\", close: \"20:00\" },\n          wednesday: { open: \"08:00\", close: \"20:00\" },\n          thursday: { open: \"08:00\", close: \"20:00\" },\n          friday: { open: \"08:00\", close: \"20:00\" },\n          saturday: { open: \"08:00\", close: \"18:00\" },\n          sunday: { open: \"09:00\", close: \"17:00\" }\n        }\n      };\n\n      pharmacy = await this.createPharmacy(newPharmacyData);\n      console.log('getPharmacyByUserId - Auto-created pharmacy with ID:', pharmacy.id);\n    }\n\n    // If found but user doesn't have pharmacyId set, update it\n    if (pharmacy && !user.pharmacyId) {\n      await this.updateUser(userId, { pharmacyId: pharmacy.id });\n      console.log('getPharmacyByUserId - Updated user with pharmacyId:', pharmacy.id);\n    }\n\n    return pharmacy;\n  }\n\n  async updatePharmacy(id: string, updates: Partial<InsertPharmacy>): Promise<Pharmacy | undefined> {\n    const pharmacy = this.pharmacies.get(id);\n    if (!pharmacy) return undefined;\n\n    const updatedPharmacy: Pharmacy = {\n      ...pharmacy,\n      ...updates,\n    };\n\n    this.pharmacies.set(id, updatedPharmacy);\n    return updatedPharmacy;\n  }\n\n  // Prescription operations\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    return this.prescriptions.get(id);\n  }\n\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    const id = randomUUID();\n    const newPrescription: Prescription = {\n      id,\n      ...prescription,\n      createdAt: new Date(),\n    };\n\n    this.prescriptions.set(id, newPrescription);\n    return newPrescription;\n  }\n\n  async getUserPrescriptions(userId: string): Promise<Prescription[]> {\n    return Array.from(this.prescriptions.values())\n      .filter(p => p.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async updatePrescriptionStatus(id: string, status: string): Promise<Prescription | undefined> {\n    const prescription = this.prescriptions.get(id);\n    if (!prescription) return undefined;\n\n    prescription.status = status as any;\n    this.prescriptions.set(id, prescription);\n    return prescription;\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const newOrder: Order = {\n      id,\n      ...order,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.orders.set(id, newOrder);\n    return newOrder;\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    const userOrders = Array.from(this.orders.values())\n      .filter(order => order.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Enrichir avec les informations de la pharmacie\n    const enrichedOrders = userOrders.map(order => {\n      const pharmacy = this.pharmacies.get(order.pharmacyId);\n      return {\n        ...order,\n        pharmacy: pharmacy ? {\n          id: pharmacy.id,\n          name: pharmacy.name,\n          address: pharmacy.address,\n          phone: pharmacy.phone,\n          rating: pharmacy.rating\n        } : null,\n        // S'assurer que le montant est affich√© m√™me si c'est 0\n        totalAmount: order.totalAmount || '0'\n      };\n    });\n\n    return enrichedOrders;\n  }\n\n  async getCurrentOrder(userId: string): Promise<Order | undefined> {\n    return Array.from(this.orders.values())\n      .filter(o => o.userId === userId && !['delivered', 'cancelled'].includes(o.status))\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())[0];\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n\n    order.status = status as any;\n    order.updatedAt = new Date();\n\n    if (status === 'delivered') {\n      order.deliveredAt = new Date();\n    }\n\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrderMedications(id: string, medications: any[]): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n\n    order.medications = medications;\n    order.updatedAt = new Date();\n    this.orders.set(id, order);\n    return order;\n  }\n\n  // Delivery person operations (using User table instead)\n\n  // Helper method to get daily order count for a delivery person\n  getDailyOrderCount(deliveryPersonId: string): number {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Start of today\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1); // Start of tomorrow\n    \n    return Array.from(this.orders.values()).filter(order => {\n      if (order.deliveryPersonId !== deliveryPersonId) return false;\n      if (!order.assignedAt) return false;\n      \n      const assignedDate = new Date(order.assignedAt);\n      return assignedDate >= today && assignedDate < tomorrow;\n    }).length;\n  }\n\n  // Get delivery personnel for a specific pharmacy with daily order counts\n  async getAvailableDeliveryPersonnelForPharmacy(pharmacyId: string): Promise<User[]> {\n    const filtered = Array.from(this.users.values()).filter(user => {\n      const isLivreur = user.role === 'livreur';\n      const isApproved = user.verificationStatus === 'approved';\n      const isActive = user.isActive !== false; // Default to true if not set\n      const isAssignedToPharmacy = user.pharmacyId === pharmacyId;\n      const isApplicationApproved = user.deliveryApplicationStatus === 'approved';\n\n      console.log(`Checking livreur ${user.firstName} ${user.lastName}:`, {\n        isLivreur,\n        isApproved,\n        isActive,\n        pharmacyId: user.pharmacyId,\n        requestedPharmacyId: pharmacyId,\n        isAssignedToPharmacy,\n        deliveryApplicationStatus: user.deliveryApplicationStatus,\n        isApplicationApproved,\n        shouldInclude: isLivreur && isApproved && isActive && isAssignedToPharmacy && isApplicationApproved\n      });\n\n      // For debugging: also include users that are assigned to pharmacy but not approved yet\n      if (isLivreur && isApproved && isActive && isAssignedToPharmacy) {\n        console.log(`‚úÖ Found eligible livreur: ${user.firstName} ${user.lastName} - Status: ${user.deliveryApplicationStatus}`);\n      }\n\n      return isLivreur && isApproved && isActive && isAssignedToPharmacy && isApplicationApproved;\n    });\n\n    console.log(`üîÑ Filtering delivery personnel for pharmacy ${pharmacyId}: found ${filtered.length} eligible personnel out of ${Array.from(this.users.values()).filter(u => u.role === 'livreur').length} total delivery personnel`);\n\n    // Additional debug: show all livreurs for this pharmacy regardless of status\n    const allLivreursForPharmacy = Array.from(this.users.values()).filter(user => \n      user.role === 'livreur' && user.pharmacyId === pharmacyId\n    );\n    console.log(`üìã All livreurs assigned to pharmacy ${pharmacyId}:`, allLivreursForPharmacy.map(u => ({\n      name: `${u.firstName} ${u.lastName}`,\n      status: u.deliveryApplicationStatus,\n      verified: u.verificationStatus,\n      active: u.isActive\n    })));\n\n    // Add daily order count for each delivery person\n    const personnelWithDailyCount = filtered.map(person => ({\n      ...person,\n      dailyOrderCount: this.getDailyOrderCount(person.id)\n    }));\n\n    return personnelWithDailyCount;\n  }\n\n  // Modified method to filter approved delivery personnel who have been approved by a pharmacy\n  async getAvailableDeliveryPersonnel(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user => \n      user.role === 'livreur' && \n      user.verificationStatus === 'approved' &&\n      user.isActive === true\n    );\n  }\n\n  // New method to get the owner of a pharmacy (pharmacist user)\n  async getPharmacyOwner(pharmacyId: string): Promise<any | null> {\n    const users = Array.from(this.users.values());\n    const owner = users.find(user => user.role === 'pharmacien' && user.pharmacyId === pharmacyId);\n\n    if (!owner) {\n      // Fallback: try to find by pharmacy phone number\n      const pharmacy = this.pharmacies.get(pharmacyId);\n      if (pharmacy && pharmacy.phone) {\n        const ownerByPhone = users.find(user => \n          user.role === 'pharmacien' && user.phone === pharmacy.phone\n        );\n        if (ownerByPhone) {\n          // Update user with pharmacy ID for future reference\n          await this.updateUser(ownerByPhone.id, { pharmacyId });\n          return ownerByPhone;\n        }\n      }\n    }\n\n    return owner || null;\n  }\n\n  // New method to get pending delivery applications for a specific pharmacy\n  async getDeliveryApplicationsForPharmacy(pharmacyId: string): Promise<any[]> {\n    console.log('üîç Recherche des candidatures pour pharmacie:', pharmacyId);\n\n    const applications = Array.from(this.users.values()).filter(user => {\n      const isLivreur = user.role === 'livreur';\n      const hasApplied = user.appliedPharmacyId === pharmacyId;\n      const isPending = user.deliveryApplicationStatus === 'pending';\n\n      console.log(`User ${user.firstName} ${user.lastName}:`, {\n        isLivreur,\n        appliedPharmacyId: user.appliedPharmacyId,\n        hasApplied,\n        deliveryApplicationStatus: user.deliveryApplicationStatus,\n        isPending,\n        matches: isLivreur && hasApplied && isPending\n      });\n\n      return isLivreur && hasApplied && isPending;\n    });\n\n    console.log(`üìã Trouv√© ${applications.length} candidatures pour la pharmacie ${pharmacyId}`);\n\n    return applications.map(user => ({\n      id: user.id,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      phone: user.phone,\n      address: user.address,\n      createdAt: user.createdAt,\n      verificationStatus: user.verificationStatus,\n      appliedPharmacyId: user.appliedPharmacyId,\n      deliveryApplicationStatus: user.deliveryApplicationStatus,\n      idDocumentUrl: user.idDocumentUrl,\n      drivingLicenseUrl: user.drivingLicenseUrl,\n      professionalDocumentUrl: user.professionalDocumentUrl,\n      motivationLetter: user.motivationLetter,\n      experience: user.experience,\n      availability: user.availability\n    }));\n  }\n\n  // New method to get pharmacist orders\n  async getPharmacistOrders(pharmacyId: string): Promise<any[]> {\n    const orders = Array.from(this.orders.values()).filter(order => \n      order.pharmacyId === pharmacyId\n    );\n\n    // Enrich with user and pharmacy data\n    return orders.map(order => ({\n      ...order,\n      user: this.users.get(order.userId),\n      pharmacy: this.pharmacies.get(order.pharmacyId)\n    }));\n  }\n\n  // New method to get all pharmacist orders (fallback)\n  async getAllPharmacistOrders(): Promise<any[]> {\n    const orders = Array.from(this.orders.values());\n\n    // Enrich with user and pharmacy data\n    return orders.map(order => ({\n      ...order,\n      user: this.users.get(order.userId),\n      pharmacy: this.pharmacies.get(order.pharmacyId)\n    }));\n  }\n\n  // New method to get all prescriptions\n  async getAllPrescriptions(): Promise<any[]> {\n    const prescriptions = Array.from(this.prescriptions.values());\n\n    // Enrich with user data\n    return prescriptions.map(prescription => ({\n      ...prescription,\n      user: this.users.get(prescription.userId)\n    }));\n  }\n\n  // New method to respond to a delivery application (approve or reject)\n  async respondToDeliveryApplication(applicationId: string, action: string, pharmacyId: string | undefined): Promise<any | null> {\n    const user = this.users.get(applicationId);\n    if (!user || user.role !== 'livreur' || user.deliveryApplicationStatus !== 'pending') {\n      console.log(`‚ùå Cannot respond to application: user not found or invalid status`, {\n        userId: applicationId,\n        userExists: !!user,\n        userRole: user?.role,\n        currentStatus: user?.deliveryApplicationStatus\n      });\n      return null;\n    }\n\n    console.log(`üìù Processing delivery application response:`, {\n      userId: applicationId,\n      userName: `${user.firstName} ${user.lastName}`,\n      action,\n      pharmacyId,\n      currentPharmacyId: user.pharmacyId,\n      appliedPharmacyId: user.appliedPharmacyId\n    });\n\n    if (action === 'approve') {\n      user.deliveryApplicationStatus = 'approved';\n      user.pharmacyId = pharmacyId; // Assign the livreur to the pharmacy\n      user.appliedPharmacyId = undefined; // Clear the applied pharmacy ID\n\n      console.log(`‚úÖ Approved delivery application for ${user.firstName} ${user.lastName}`, {\n        newPharmacyId: user.pharmacyId,\n        newStatus: user.deliveryApplicationStatus\n      });\n\n      // Create a notification for the livreur\n      await this.createNotification({\n        userId: user.id,\n        title: 'Candidature accept√©e !',\n        body: 'F√©licitations ! Votre candidature a √©t√© accept√©e. Vous pouvez maintenant acc√©der √† votre tableau de bord.',\n        type: 'delivery_application_response',\n        isRead: false,\n      });\n    } else { // action === 'reject'\n      user.deliveryApplicationStatus = 'rejected';\n      user.appliedPharmacyId = undefined; // Clear the applied pharmacy ID\n      user.pharmacyId = undefined; // Remove pharmacy assignment\n\n      console.log(`‚ùå Rejected delivery application for ${user.firstName} ${user.lastName}`);\n\n      // Create a notification for the livreur\n      await this.createNotification({\n        userId: user.id,\n        title: 'Candidature non retenue',\n        body: 'Votre candidature n\\'a pas √©t√© retenue cette fois. Vous pouvez postuler √† une autre pharmacie.',\n        type: 'delivery_application_response',\n        isRead: false,\n      });\n    }\n\n    this.users.set(applicationId, user);\n    console.log(`üíæ Updated user in storage:`, {\n      userId: user.id,\n      pharmacyId: user.pharmacyId,\n      deliveryApplicationStatus: user.deliveryApplicationStatus\n    });\n\n    return user;\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const newNotification: Notification = {\n      id,\n      ...notification,\n      createdAt: new Date(),\n    };\n\n    this.notifications.set(id, newNotification);\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const notification = this.notifications.get(id);\n    if (!notification) return undefined;\n\n    notification.isRead = true;\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  // New method to get pharmacist orders\n  async getPharmacistOrders(pharmacyId: string): Promise<any[]> {\n    const orders = Array.from(this.orders.values()).filter(order => \n      order.pharmacyId === pharmacyId\n    );\n\n    // Enrich with user and pharmacy data\n    return orders.map(order => ({\n      ...order,\n      user: this.users.get(order.userId),\n      pharmacy: this.pharmacies.get(order.pharmacyId)\n    }));\n  }\n\n  // New method to get all pharmacist orders (fallback)\n  async getAllPharmacistOrders(): Promise<any[]> {\n    const orders = Array.from(this.orders.values());\n\n    // Enrich with user and pharmacy data\n    return orders.map(order => ({\n      ...order,\n      user: this.users.get(order.userId),\n      pharmacy: this.pharmacies.get(order.pharmacyId)\n    }));\n  }\n\n  // New method to get all prescriptions\n  async getAllPrescriptions(): Promise<any[]> {\n    const prescriptions = Array.from(this.prescriptions.values());\n\n    // Enrich with user data\n    return prescriptions.map(prescription => ({\n      ...prescription,\n      user: this.users.get(prescription.userId)\n    }));\n  }\n\n  // M√©thodes suppl√©mentaires pour les pharmaciens\n  async getAllPharmacistOrders(): Promise<Order[]> {\n    const allOrders = Array.from(this.orders.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Enrichir avec les informations de la pharmacie et de l'utilisateur\n    const enrichedOrders = allOrders.map(order => {\n      const pharmacy = this.pharmacies.get(order.pharmacyId);\n      const user = this.users.get(order.userId);\n      return {\n        ...order,\n        pharmacy: pharmacy ? {\n          id: pharmacy.id,\n          name: pharmacy.name,\n          address: pharmacy.address,\n          phone: pharmacy.phone,\n          rating: pharmacy.rating\n        } : null,\n        patient: user ? {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone\n        } : null,\n        totalAmount: order.totalAmount || '0'\n      };\n    });\n\n    return enrichedOrders;\n  }\n\n  async getPharmacistOrders(pharmacyId: string): Promise<Order[]> {\n    const pharmacyOrders = Array.from(this.orders.values())\n      .filter(order => order.pharmacyId === pharmacyId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Enrichir avec les informations de l'utilisateur\n    const enrichedOrders = pharmacyOrders.map(order => {\n      const user = this.users.get(order.userId);\n      const pharmacy = this.pharmacies.get(order.pharmacyId);\n      return {\n        ...order,\n        pharmacy: pharmacy ? {\n          id: pharmacy.id,\n          name: pharmacy.name,\n          address: pharmacy.address,\n          phone: pharmacy.phone,\n          rating: pharmacy.rating\n        } : null,\n        patient: user ? {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone\n        } : null,\n        totalAmount: order.totalAmount || '0'\n      };\n    });\n\n    return enrichedOrders;\n  }\n\n  async getAllPrescriptions(): Promise<Prescription[]> {\n    return Array.from(this.prescriptions.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getOrderById(orderId: string): Promise<Order | undefined> {\n    const order = this.orders.get(orderId);\n    if (!order) return undefined;\n\n    // Enrichir avec les informations de la pharmacie\n    const pharmacy = this.pharmacies.get(order.pharmacyId);\n    return {\n      ...order,\n      pharmacy: pharmacy ? {\n        id: pharmacy.id,\n        name: pharmacy.name,\n        address: pharmacy.address,\n        phone: pharmacy.phone,\n        rating: pharmacy.rating\n      } : null,\n      totalAmount: order.totalAmount || '0',\n      patientId: order.userId // Ajouter un alias pour la compatibilit√©\n    };\n  }\n\n  async updateOrderStatus(id: string, status: string, totalAmount?: number): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n\n    order.status = status as any;\n    order.updatedAt = new Date();\n\n    if (totalAmount !== undefined) {\n      order.totalAmount = totalAmount.toString();\n    }\n\n    if (status === 'delivered') {\n      order.deliveredAt = new Date();\n    }\n\n    this.orders.set(id, order);\n\n    // Retourner l'ordre enrichi\n    const pharmacy = this.pharmacies.get(order.pharmacyId);\n    return {\n      ...order,\n      pharmacy: pharmacy ? {\n        id: pharmacy.id,\n        name: pharmacy.name,\n        address: pharmacy.address,\n        phone: pharmacy.phone,\n        rating: pharmacy.rating\n      } : null,\n      totalAmount: order.totalAmount || '0'\n    };\n  }\n\n  async getDeliveryOrders(): Promise<Order[]> {\n    const deliveryOrders = Array.from(this.orders.values())\n      .filter(order => ['ready_for_delivery', 'in_transit', 'delivered'].includes(order.status))\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Enrichir avec les informations de la pharmacie et de l'utilisateur\n    const enrichedOrders = deliveryOrders.map(order => {\n      const pharmacy = this.pharmacies.get(order.pharmacyId);\n      const user = this.users.get(order.userId);\n      return {\n        ...order,\n        pharmacy: pharmacy ? {\n          id: pharmacy.id,\n          name: pharmacy.name,\n          address: pharmacy.address,\n          phone: pharmacy.phone,\n          rating: pharmacy.rating\n        } : null,\n        patient: user ? {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          phone: user.phone\n        } : null,\n        totalAmount: order.totalAmount || '0'\n      };\n    });\n\n    return enrichedOrders;\n  }\n\n  async assignDeliveryPerson(orderId: string, deliveryPersonId: string): Promise<Order | undefined> {\n    const order = this.orders.get(orderId);\n    if (!order) return undefined;\n\n    order.deliveryPersonId = deliveryPersonId;\n    // Keep status as 'ready_for_delivery' when assigned, change to 'in_delivery' when delivery starts\n    order.updatedAt = new Date();\n\n    // Set assignment time to track expiration\n    order.assignedAt = new Date();\n    // Set status to 'assigned_pending_acceptance'\n    order.status = 'assigned_pending_acceptance';\n\n\n    this.orders.set(orderId, order);\n\n    // Cr√©er des notifications pour le livreur et le patient\n    const deliveryPerson = this.users.get(deliveryPersonId);\n    const patient = this.users.get(order.userId);\n    const pharmacy = this.pharmacies.get(order.pharmacyId);\n\n    if (deliveryPerson) {\n      // Notification pour le livreur\n      await this.createNotification({\n        userId: deliveryPersonId,\n        title: 'Nouvelle livraison assign√©e',\n        body: `Commande #${order.id.slice(0, 8)} - ${order.deliveryAddress}`,\n        type: 'delivery_assigned',\n        orderId: orderId,\n        isRead: false\n      });\n    }\n\n    if (patient) {\n      // Notification pour le patient\n      await this.createNotification({\n        userId: order.userId,\n        title: 'Livreur assign√© √† votre commande',\n        message: `${deliveryPerson?.firstName} ${deliveryPerson?.lastName} va livrer votre commande. Contact: ${deliveryPerson?.phone}`,\n        type: 'delivery_assigned',\n        isRead: false\n      });\n    }\n\n    // Retourner l'ordre enrichi\n    return {\n      ...order,\n      pharmacy: pharmacy ? {\n        id: pharmacy.id,\n        name: pharmacy.name,\n        address: pharmacy.address,\n        phone: pharmacy.phone,\n        rating: pharmacy.rating\n      } : null,\n      patient: patient ? {\n        firstName: patient.firstName,\n        lastName: patient.lastName,\n        phone: patient.phone\n      } : null,\n      deliveryPerson: deliveryPerson ? {\n        firstName: deliveryPerson.firstName,\n        lastName: deliveryPerson.lastName,\n        phone: deliveryPerson.phone\n      } : null,\n      totalAmount: order.totalAmount || '0'\n    };\n  }\n\n  async getMyAssignedOrders(deliveryPersonId: string): Promise<Order[]> {\n    // Nettoyer les assignations expir√©es\n    await this.cleanupExpiredAssignments();\n\n    // R√©cup√©rer les commandes assign√©es √† ce livreur\n    const assignedOrders = Array.from(this.orders.values()).filter(order => \n      order.deliveryPersonId === deliveryPersonId && \n      ['assigned_pending_acceptance', 'in_transit', 'delivered'].includes(order.status)\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Enrichir avec les donn√©es de pharmacie et patient\n    return assignedOrders.map(order => {\n      const pharmacy = order.pharmacyId ? this.pharmacies.get(order.pharmacyId) : null;\n      const patient = this.users.get(order.userId);\n\n      return {\n        ...order,\n        pharmacy,\n        patient\n      };\n    });\n  }\n\n  async acceptDeliveryAssignment(orderId: string, deliveryPersonId: string): Promise<Order | undefined> {\n    const order = this.orders.get(orderId);\n    if (!order || order.deliveryPersonId !== deliveryPersonId || order.status !== 'assigned_pending_acceptance') {\n      return undefined;\n    }\n\n    // V√©rifier si l'assignation n'a pas expir√© (3 minutes)\n    if (order.assignedAt) {\n      const assignedTime = new Date(order.assignedAt).getTime();\n      const now = new Date().getTime();\n      const diffMinutes = (now - assignedTime) / (1000 * 60);\n\n      if (diffMinutes > 3) {\n        // Expir√©e, r√©jecter automatiquement\n        await this.rejectDeliveryAssignment(orderId, deliveryPersonId, true);\n        return undefined;\n      }\n    }\n\n    // Accepter la livraison\n    order.status = 'in_transit';\n    order.updatedAt = new Date();\n    this.orders.set(orderId, order);\n\n    // Notifier le patient\n    await this.createNotification({\n      userId: order.userId,\n      title: 'Livreur en route',\n      body: `Votre livreur a accept√© la livraison et est en route vers votre adresse.`,\n      type: 'delivery_accepted',\n      orderId: orderId,\n      isRead: false\n    });\n\n    return order;\n  }\n\n  async rejectDeliveryAssignment(orderId: string, deliveryPersonId: string, isExpired: boolean = false): Promise<boolean> {\n    const order = this.orders.get(orderId);\n    if (!order || order.deliveryPersonId !== deliveryPersonId || order.status !== 'assigned_pending_acceptance') {\n      return false;\n    }\n\n    // R√©assigner la commande (retourner en statut ready_for_delivery car elle √©tait d√©j√† pr√™te)\n    order.status = 'ready_for_delivery';\n    order.deliveryPersonId = undefined;\n    order.assignedAt = undefined;\n    order.updatedAt = new Date();\n    this.orders.set(orderId, order);\n\n    // Notifier selon le type de rejet\n    if (!isExpired) {\n      await this.createNotification({\n        userId: deliveryPersonId,\n        title: 'Livraison refus√©e',\n        body: `Vous avez refus√© la commande #${orderId.slice(0, 8)}. Elle sera r√©assign√©e √† un autre livreur.`,\n        type: 'delivery_rejected',\n        orderId: orderId,\n        isRead: false\n      });\n    }\n\n    return true;\n  }\n\n  async cleanupExpiredAssignments(): Promise<void> {\n    const threeMinutesAgo = new Date(Date.now() - 3 * 60 * 1000);\n\n    const expiredOrders = Array.from(this.orders.values()).filter(order => \n      order.status === 'assigned_pending_acceptance' && \n      order.assignedAt && \n      new Date(order.assignedAt) < threeMinutesAgo\n    );\n\n    for (const order of expiredOrders) {\n      const expiredDeliveryPersonId = order.deliveryPersonId; // Sauvegarder l'ID avant de le supprimer\n\n      // Retourner au statut ready_for_delivery (pas preparing) car la commande √©tait d√©j√† pr√™te\n      order.status = 'ready_for_delivery';\n      order.deliveryPersonId = undefined;\n      order.assignedAt = undefined;\n      order.updatedAt = new Date();\n      this.orders.set(order.id, order);\n\n      // Notifier le livreur que l'assignation a expir√©\n      if (expiredDeliveryPersonId) {\n        await this.createNotification({\n          userId: expiredDeliveryPersonId,\n          title: 'Assignation expir√©e',\n          body: `La commande #${order.id.slice(0, 8)} a √©t√© r√©assign√©e car vous n'avez pas r√©pondu dans les 3 minutes.`,\n          type: 'assignment_expired',\n          orderId: order.id,\n          isRead: false\n        });\n      }\n    }\n  }\n\n\n\n  async confirmDeliveryCompletion(orderId: string): Promise<Order | undefined> {\n    const order = this.orders.get(orderId);\n    if (!order) return undefined;\n\n    // Accepter plusieurs statuts pour la confirmation de livraison\n    if (!['arrived_pending_confirmation', 'in_transit', 'in_delivery'].includes(order.status)) {\n      return undefined;\n    }\n\n    // Marquer la livraison comme termin√©e avec confirmation directe du patient\n    order.status = 'delivered';\n    order.patientConfirmedAt = new Date();\n    order.deliveredAt = new Date();\n    order.updatedAt = new Date();\n    this.orders.set(orderId, order);\n\n    // Notifier le livreur que la livraison est confirm√©e\n    if (order.deliveryPersonId) {\n      await this.createNotification({\n        userId: order.deliveryPersonId,\n        title: 'Livraison confirm√©e',\n        body: 'Le patient a confirm√© la r√©ception. Livraison termin√©e avec succ√®s !',\n        type: 'delivery_completed',\n        orderId: orderId,\n        isRead: false\n      });\n    }\n\n    return order;\n  }\n\n  async deleteOrder(id: string): Promise<boolean> {\n    const deleted = this.orders.delete(id);\n    console.log(`Order ${id} ${deleted ? 'successfully deleted' : 'not found'} from memory storage`);\n    return deleted;\n  }\n\n  async cleanupOldOrders(): Promise<number> {\n    const now = new Date();\n    const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    const fiveDaysAgo = new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000);\n\n    let deletedCount = 0;\n    const ordersToDelete: string[] = [];\n\n    // Parcourir toutes les commandes\n    for (const [orderId, order] of this.orders.entries()) {\n      const orderDate = new Date(order.createdAt);\n      \n      // Supprimer si:\n      // - Plus de 24h et statut != 'delivered' \n      // - Plus de 5 jours et statut == 'delivered'\n      if (order.status !== 'delivered' && orderDate < twentyFourHoursAgo) {\n        ordersToDelete.push(orderId);\n      } else if (order.status === 'delivered' && orderDate < fiveDaysAgo) {\n        ordersToDelete.push(orderId);\n      }\n    }\n\n    // Supprimer les commandes identifi√©es\n    for (const orderId of ordersToDelete) {\n      this.orders.delete(orderId);\n      deletedCount++;\n    }\n\n    if (deletedCount > 0) {\n      console.log(`üóëÔ∏è Nettoyage automatique: ${deletedCount} commandes supprim√©es`);\n    }\n\n    return deletedCount;\n  }\n\n  // Password reset operations (in-memory storage)\n  private passwordResetCodes: Map<string, PasswordResetCode> = new Map();\n\n  async createPasswordResetCode(resetCode: InsertPasswordResetCode): Promise<PasswordResetCode> {\n    const id = randomUUID();\n    const newResetCode: PasswordResetCode = {\n      id,\n      ...resetCode,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.passwordResetCodes.set(id, newResetCode);\n    return newResetCode;\n  }\n\n  async getValidPasswordResetCode(email: string, code: string): Promise<PasswordResetCode | undefined> {\n    const now = new Date();\n    return Array.from(this.passwordResetCodes.values()).find(resetCode => \n      resetCode.email === email &&\n      resetCode.code === code &&\n      !resetCode.used &&\n      resetCode.expiresAt > now\n    );\n  }\n\n  async markPasswordResetCodeUsed(id: string): Promise<void> {\n    const resetCode = this.passwordResetCodes.get(id);\n    if (resetCode) {\n      resetCode.used = true;\n      resetCode.updatedAt = new Date();\n      this.passwordResetCodes.set(id, resetCode);\n    }\n  }\n}","size_bytes":63081},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/firebase-schema.ts":{"content":"import { z } from \"zod\";\n\n// Firebase-compatible schemas (without Drizzle-specific features)\n\n// User schema for Firestore\nexport const userSchema = z.object({\n  id: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n  phone: z.string(),\n  address: z.string(),\n  password: z.string(), // Hashed password\n  role: z.enum([\"patient\", \"pharmacien\", \"livreur\", \"admin\"]).default(\"patient\"),\n  language: z.string().default(\"fr\"),\n  profileImageUrl: z.string().optional(),\n  pharmacyId: z.string().optional(), // For pharmacists and approved delivery persons\n  isActive: z.boolean().default(true),\n  // Identity validation fields (Pharmacists and Delivery personnel)\n  idDocumentUrl: z.string().optional(), // ID card\n  professionalDocumentUrl: z.string().optional(), // Pharmacist diploma\n  drivingLicenseUrl: z.string().optional(), // Driving license\n  verificationStatus: z.enum([\"pending\", \"approved\", \"rejected\"]).default(\"pending\"),\n  // Delivery application fields\n  deliveryApplicationStatus: z.enum([\"none\", \"pending\", \"approved\", \"rejected\"]).default(\"none\").optional(),\n  appliedPharmacyId: z.string().optional(), // Pharmacy the delivery person applied to\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n// Pharmacy schema\nexport const pharmacySchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  address: z.string(),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n  phone: z.string().optional(),\n  rating: z.number().default(0.0),\n  deliveryTime: z.string().default(\"30\"),\n  isOpen: z.boolean().default(true),\n  openingHours: z.record(z.any()).optional(),\n  createdAt: z.date(),\n});\n\n// Prescription schema\nexport const prescriptionSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  imageUrl: z.string(),\n  status: z.enum([\"pending\", \"processed\", \"fulfilled\"]).default(\"pending\"),\n  medications: z.array(z.any()).optional(),\n  createdAt: z.date(),\n});\n\n// Order schema\nexport const orderSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  pharmacyId: z.string(),\n  prescriptionId: z.string().optional(),\n  status: z.enum([\"pending\", \"confirmed\", \"preparing\", \"in_transit\", \"delivered\", \"cancelled\"]).default(\"pending\"),\n  totalAmount: z.number().optional(),\n  deliveryAddress: z.string(),\n  deliveryLatitude: z.number().optional(),\n  deliveryLongitude: z.number().optional(),\n  deliveryNotes: z.string().optional(),\n  medications: z.array(z.object({\n    name: z.string(),\n    surBon: z.boolean().optional(),\n  })).optional(),\n  bonDocuments: z.string().optional(),\n  estimatedDelivery: z.date().optional(),\n  deliveredAt: z.date().optional(),\n  deliveryPersonId: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n// Delivery person schema\nexport const deliveryPersonSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  phone: z.string(),\n  currentLatitude: z.number().optional(),\n  currentLongitude: z.number().optional(),\n  isAvailable: z.boolean().default(true),\n  rating: z.number().default(5.0),\n  createdAt: z.date(),\n});\n\n// Notification schema\nexport const notificationSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  title: z.string(),\n  body: z.string(),\n  type: z.string(), // order_update, delivery, promotion, etc.\n  orderId: z.string().optional(),\n  isRead: z.boolean().default(false),\n  createdAt: z.date(),\n});\n\n// Insert schemas (omitting auto-generated fields)\nexport const insertUserSchema = userSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const registerSchema = insertUserSchema.omit({\n  idDocumentUrl: true,\n  professionalDocumentUrl: true,\n  drivingLicenseUrl: true,\n  verificationStatus: true,\n}).extend({\n  confirmPassword: z.string().min(6),\n  role: z.enum([\"patient\", \"pharmacien\", \"livreur\", \"admin\"]).default(\"patient\"),\n  // Files for identity validation (optional but required based on role)\n  idDocument: z.any().optional(),\n  professionalDocument: z.any().optional(),\n  drivingLicense: z.any().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginSchema = z.object({\n  phone: z.string().min(1, \"Le num√©ro de t√©l√©phone est requis\"),\n  password: z.string().min(1, \"Le mot de passe est requis\"),\n});\n\nexport const insertPharmacySchema = pharmacySchema.omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPrescriptionSchema = prescriptionSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = orderSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = notificationSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Pharmacy = z.infer<typeof pharmacySchema>;\nexport type InsertPharmacy = z.infer<typeof insertPharmacySchema>;\n\nexport type Prescription = z.infer<typeof prescriptionSchema>;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\n\nexport type Order = z.infer<typeof orderSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type DeliveryPerson = z.infer<typeof deliveryPersonSchema>;\n\nexport type Notification = z.infer<typeof notificationSchema>;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;","size_bytes":5404},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  phone: varchar(\"phone\").notNull().unique(),\n  email: varchar(\"email\"),\n  address: varchar(\"address\").notNull(),\n  password: varchar(\"password\").notNull(), // Mot de passe hach√©\n  role: varchar(\"role\").notNull().default(\"patient\"), // patient, pharmacien, livreur, admin\n  language: varchar(\"language\").default(\"fr\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  pharmacyId: varchar(\"pharmacy_id\").references(() => pharmacies.id), // Pour les pharmaciens et livreurs\n  isActive: boolean(\"is_active\").default(true),\n  // Champs pour validation d'identit√© (Pharmaciens et Livreurs)\n  idDocumentUrl: text(\"id_document_url\"), // Carte d'identit√©\n  professionalDocumentUrl: text(\"professional_document_url\"), // Dipl√¥me pharmacien\n  drivingLicenseUrl: text(\"driving_license_url\"), // Permis de conduire\n  verificationStatus: varchar(\"verification_status\").default(\"pending\"), // pending, approved, rejected\n  deliveryApplicationStatus: varchar(\"delivery_application_status\").default(\"none\"), // none, pending, approved, rejected (pour livreurs)\n  appliedPharmacyId: varchar(\"applied_pharmacy_id\").references(() => pharmacies.id), // Pharmacie √† laquelle le livreur a postul√©\n  // Champs GPS avanc√©s pour tracking haute pr√©cision (livreurs)\n  lat: decimal(\"lat\", { precision: 10, scale: 8 }), // Latitude GPS actuelle\n  lng: decimal(\"lng\", { precision: 11, scale: 8 }), // Longitude GPS actuelle\n  speed: decimal(\"speed\", { precision: 5, scale: 2 }), // Vitesse en km/h\n  bearing: decimal(\"bearing\", { precision: 5, scale: 2 }), // Direction/cap en degr√©s (0-360)\n  accuracy: decimal(\"accuracy\", { precision: 6, scale: 2 }), // Pr√©cision GPS en m√®tres\n  lastLocationUpdate: timestamp(\"last_location_update\"), // Derni√®re mise √† jour GPS\n  isActiveTracking: boolean(\"is_active_tracking\").default(false), // Si le livreur est en mode tracking actif\n  // Champs livreur consolid√©s (anciennement dans delivery_profiles et delivery_vehicles)\n  emergencyContactName: varchar(\"emergency_contact_name\"), // Contact d'urgence\n  emergencyContactPhone: varchar(\"emergency_contact_phone\"), // T√©l√©phone d'urgence\n  bankAccountNumber: varchar(\"bank_account_number\"), // Compte bancaire pour paiements\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"5.0\"), // Note du livreur\n  totalDeliveries: varchar(\"total_deliveries\").default(\"0\"), // Nombre de livraisons effectu√©es\n  isAvailable: boolean(\"is_available\").default(true), // Disponibilit√© actuelle\n  currentOrderId: varchar(\"current_order_id\"), // Commande en cours (foreign key will be added later)\n  // Informations du v√©hicule (pour livreurs)\n  vehicleType: varchar(\"vehicle_type\"), // moto, scooter, voiture, v√©lo, tricycle\n  vehicleBrand: varchar(\"vehicle_brand\"), // Yamaha, Honda, Toyota, etc.\n  vehicleModel: varchar(\"vehicle_model\"), // Mod√®le du v√©hicule\n  vehicleColor: varchar(\"vehicle_color\"), // Couleur du v√©hicule\n  vehicleLicensePlate: varchar(\"vehicle_license_plate\"), // Plaque d'immatriculation (TR√àS VISIBLE)\n  vehicleInsuranceNumber: varchar(\"vehicle_insurance_number\"), // Num√©ro d'assurance\n  vehicleRegistrationDocumentUrl: text(\"vehicle_registration_document_url\"), // Carte grise\n  vehicleInsuranceDocumentUrl: text(\"vehicle_insurance_document_url\"), // Attestation d'assurance\n  vehicleVerificationStatus: varchar(\"vehicle_verification_status\").default(\"pending\"), // pending, approved, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const pharmacies = pgTable(\"pharmacies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  phone: varchar(\"phone\"),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0.0\"),\n  reviewCount: varchar(\"review_count\").default(\"0\"),\n  deliveryTime: varchar(\"delivery_time\", { length: 10 }),\n  isOpen: boolean(\"is_open\").default(true),\n  isEmergency24h: boolean(\"is_emergency_24h\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, processed, fulfilled\n  medications: jsonb(\"medications\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  pharmacyId: varchar(\"pharmacy_id\").references(() => pharmacies.id).notNull(),\n  prescriptionId: varchar(\"prescription_id\").references(() => prescriptions.id),\n  status: varchar(\"status\").default(\"pending\"), // pending, confirmed, preparing, assigned_pending_acceptance, in_transit, arrived_pending_confirmation, delivered, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  deliveryLatitude: decimal(\"delivery_latitude\", { precision: 10, scale: 8 }),\n  deliveryLongitude: decimal(\"delivery_longitude\", { precision: 11, scale: 8 }),\n  deliveryNotes: text(\"delivery_notes\"),\n  medications: jsonb(\"medications\"), // Array of {name: string, surBon: boolean}\n  bonDocuments: text(\"bon_documents\"), // Reference to uploaded documents\n  estimatedDelivery: timestamp(\"estimated_delivery\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  deliveryPersonId: varchar(\"delivery_person_id\"),\n  assignedAt: timestamp(\"assigned_at\"), // Timestamp pour l'assignation et calcul du timeout\n  // Double confirmation system\n  deliveryPersonConfirmedAt: timestamp(\"delivery_person_confirmed_at\"), // Quand le livreur confirme √™tre arriv√©\n  patientConfirmedAt: timestamp(\"patient_confirmed_at\"), // Quand le patient confirme avoir re√ßu\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tables supprim√©es - informations consolid√©es dans users\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  body: text(\"body\").notNull(),\n  type: varchar(\"type\").notNull(), // order_update, delivery, promotion, etc.\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const passwordResetCodes = pgTable(\"password_reset_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull(),\n  code: varchar(\"code\", { length: 6 }).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isUsed: boolean(\"is_used\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  idDocumentUrl: z.string().optional(),\n  professionalDocumentUrl: z.string().optional(),\n  drivingLicenseUrl: z.string().optional(),\n  deliveryApplicationStatus: z.enum([\"none\", \"pending\", \"approved\", \"rejected\"]).optional(),\n  appliedPharmacyId: z.string().optional(),\n});\n\n// Auth schemas\nexport const registerSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  idDocumentUrl: true,\n  professionalDocumentUrl: true,\n  drivingLicenseUrl: true,\n  verificationStatus: true,\n}).extend({\n  email: z.string().email(\"Adresse email invalide\"),\n  confirmPassword: z.string().min(6),\n  role: z.enum([\"patient\", \"pharmacien\", \"livreur\", \"admin\"]).default(\"patient\"),\n  // Files pour validation d'identit√© (optionnels mais requis selon le r√¥le)\n  idDocument: z.any().optional(),\n  professionalDocument: z.any().optional(),\n  drivingLicense: z.any().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginSchema = z.object({\n  phone: z.string().min(1, \"Le num√©ro de t√©l√©phone est requis\"),\n  password: z.string().min(1, \"Le mot de passe est requis\"),\n});\n\nexport const insertPharmacySchema = createInsertSchema(pharmacies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPasswordResetCodeSchema = createInsertSchema(passwordResetCodes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Password reset schemas\nexport const requestPasswordResetSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n});\n\nexport const verifyResetCodeSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  code: z.string().length(6, \"Le code doit contenir 6 chiffres\"),\n});\n\nexport const resetPasswordSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  code: z.string().length(6, \"Le code doit contenir 6 chiffres\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caract√®res\"),\n  confirmPassword: z.string().min(6, \"Confirmez votre mot de passe\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n});\n\n// Sch√©mas supprim√©s - informations consolid√©es dans users\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Pharmacy = typeof pharmacies.$inferSelect;\nexport type InsertPharmacy = z.infer<typeof insertPharmacySchema>;\n\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\n// Removed DeliveryPerson type - using User type with role='livreur' instead\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type PasswordResetCode = typeof passwordResetCodes.$inferSelect;\nexport type InsertPasswordResetCode = z.infer<typeof insertPasswordResetCodeSchema>;\n\n// Types supprim√©s - informations consolid√©es dans users","size_bytes":11275},"client/public/sw-notifications.js":{"content":"// Service Worker pour les notifications Pharma Express CI\nconst CACHE_NAME = 'pharma-notifications-v1';\nconst NOTIFICATION_CACHE = 'pharma-sounds-v1';\n\n// Sons et ic√¥nes √† mettre en cache\nconst NOTIFICATION_ASSETS = [\n  '/sounds/order-pending.mp3',\n  '/sounds/order-confirmed.mp3',\n  '/sounds/order-preparing.mp3',\n  '/sounds/order-ready.mp3',\n  '/sounds/delivery-started.mp3',\n  '/sounds/delivery-arrival.mp3',\n  '/sounds/delivery-complete.mp3',\n  '/sounds/order-cancelled.mp3',\n  '/icons/pharma-icon-192.png',\n  '/icons/pharma-icon-72.png'\n];\n\n// Installation du Service Worker\nself.addEventListener('install', (event) => {\n  console.log('üîß Installation du Service Worker Notifications');\n  \n  event.waitUntil(\n    caches.open(NOTIFICATION_CACHE)\n      .then(cache => {\n        console.log('üì¶ Mise en cache des assets de notification');\n        return cache.addAll(NOTIFICATION_ASSETS);\n      })\n      .catch(error => {\n        console.log('‚ö†Ô∏è Certains assets de notification non disponibles:', error);\n        // Ne pas faire √©chouer l'installation si certains sons manquent\n        return Promise.resolve();\n      })\n  );\n  \n  self.skipWaiting();\n});\n\n// Activation du Service Worker\nself.addEventListener('activate', (event) => {\n  console.log('‚úÖ Activation du Service Worker Notifications');\n  \n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME && cacheName !== NOTIFICATION_CACHE) {\n            console.log('üóëÔ∏è Suppression ancien cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  \n  self.clients.claim();\n});\n\n// √âcouter les messages de l'application principale\nself.addEventListener('message', (event) => {\n  console.log('üì® Message re√ßu dans SW:', event.data);\n  \n  if (event.data && event.data.type) {\n    switch (event.data.type) {\n      case 'SHOW_NOTIFICATION':\n        showNotification(event.data.payload);\n        break;\n      case 'PLAY_SOUND':\n        // Le son sera jou√© par l'application principale\n        break;\n      default:\n        console.log('Type de message non reconnu:', event.data.type);\n    }\n  }\n});\n\n// Fonction pour afficher une notification\nfunction showNotification(payload) {\n  const { title, message, status, orderId, urgency = 'medium' } = payload;\n  \n  const notificationOptions = {\n    body: message,\n    icon: '/icons/pharma-icon-192.png',\n    badge: '/icons/pharma-icon-72.png',\n    tag: `pharma-order-${orderId || 'general'}`,\n    requireInteraction: urgency === 'high',\n    vibrate: urgency === 'high' ? [200, 100, 200] : [100],\n    data: {\n      orderId,\n      status,\n      timestamp: Date.now(),\n      url: getNotificationUrl(status, orderId)\n    },\n    actions: [\n      {\n        action: 'view',\n        title: 'üëÅÔ∏è Voir d√©tails',\n        icon: '/icons/pharma-icon-72.png'\n      },\n      {\n        action: 'track',\n        title: 'üìç Suivre livraison',\n        icon: '/icons/pharma-icon-72.png'\n      }\n    ]\n  };\n\n  // Personnaliser selon le statut\n  switch (status) {\n    case 'confirmed':\n      notificationOptions.badge = '‚úÖ';\n      break;\n    case 'preparing':\n      notificationOptions.badge = 'üîÑ';\n      break;\n    case 'ready_for_delivery':\n      notificationOptions.badge = 'üì¶';\n      break;\n    case 'in_transit':\n      notificationOptions.badge = 'üöö';\n      notificationOptions.requireInteraction = true;\n      break;\n    case 'in_delivery':\n      notificationOptions.badge = 'üéØ';\n      notificationOptions.requireInteraction = true;\n      notificationOptions.vibrate = [300, 100, 300, 100, 300];\n      break;\n    case 'delivered':\n      notificationOptions.badge = 'üéâ';\n      break;\n    case 'cancelled':\n      notificationOptions.badge = '‚ùå';\n      break;\n  }\n\n  self.registration.showNotification(title, notificationOptions)\n    .then(() => {\n      console.log('üîî Notification affich√©e:', title);\n    })\n    .catch(error => {\n      console.error('‚ùå Erreur affichage notification:', error);\n    });\n}\n\n// D√©terminer l'URL de redirection selon le statut\nfunction getNotificationUrl(status, orderId) {\n  const baseUrl = self.location.origin;\n  \n  switch (status) {\n    case 'in_transit':\n    case 'in_delivery':\n      return `${baseUrl}/delivery-tracking?orderId=${orderId}`;\n    case 'confirmed':\n      return `${baseUrl}/order-validation?orderId=${orderId}`;\n    default:\n      return `${baseUrl}/dashboard`;\n  }\n}\n\n// G√©rer les clics sur les notifications\nself.addEventListener('notificationclick', (event) => {\n  console.log('üñ±Ô∏è Clic sur notification:', event.action, event.notification.data);\n  \n  event.notification.close();\n  \n  const { orderId, status } = event.notification.data || {};\n  let targetUrl = getNotificationUrl(status, orderId);\n  \n  // Actions personnalis√©es\n  switch (event.action) {\n    case 'view':\n      targetUrl = `${self.location.origin}/dashboard`;\n      break;\n    case 'track':\n      if (orderId && ['in_transit', 'in_delivery'].includes(status)) {\n        targetUrl = `${self.location.origin}/delivery-tracking?orderId=${orderId}`;\n      }\n      break;\n    default:\n      // Utiliser l'URL par d√©faut\n      break;\n  }\n  \n  event.waitUntil(\n    clients.matchAll({ type: 'window' }).then(clientList => {\n      // V√©rifier si l'application est d√©j√† ouverte\n      for (const client of clientList) {\n        if (client.url.includes(self.location.origin) && 'focus' in client) {\n          client.postMessage({\n            type: 'NOTIFICATION_CLICKED',\n            payload: { orderId, status, action: event.action }\n          });\n          return client.focus();\n        }\n      }\n      \n      // Ouvrir une nouvelle fen√™tre si l'app n'est pas ouverte\n      if (clients.openWindow) {\n        return clients.openWindow(targetUrl);\n      }\n    })\n  );\n});\n\n// G√©rer la fermeture des notifications\nself.addEventListener('notificationclose', (event) => {\n  console.log('üîï Notification ferm√©e:', event.notification.tag);\n});\n\n// Synchronisation en arri√®re-plan pour v√©rifier les mises √† jour de commandes\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'check-orders') {\n    event.waitUntil(checkOrderUpdates());\n  }\n});\n\n// Fonction pour v√©rifier les mises √† jour de commandes\nasync function checkOrderUpdates() {\n  try {\n    console.log('üîÑ V√©rification des mises √† jour de commandes...');\n    \n    // Cette fonction sera appel√©e p√©riodiquement pour v√©rifier les changements\n    // m√™me quand l'application est ferm√©e\n    \n    const response = await fetch('/api/orders/check-updates', {\n      method: 'GET',\n      credentials: 'include'\n    });\n    \n    if (response.ok) {\n      const updates = await response.json();\n      \n      updates.forEach(update => {\n        showNotification({\n          title: getStatusTitle(update.status),\n          message: getStatusMessage(update.status),\n          status: update.status,\n          orderId: update.orderId,\n          urgency: getStatusUrgency(update.status)\n        });\n      });\n    }\n  } catch (error) {\n    console.log('Erreur v√©rification mises √† jour:', error);\n  }\n}\n\n// Fonctions utilitaires pour les messages\nfunction getStatusTitle(status) {\n  const titles = {\n    confirmed: '‚úÖ Commande confirm√©e',\n    preparing: 'üîÑ En pr√©paration',\n    ready_for_delivery: 'üì¶ Pr√™te pour livraison',\n    in_transit: 'üöö Livraison en route',\n    in_delivery: 'üéØ Livreur en approche',\n    delivered: 'üéâ Livraison termin√©e',\n    cancelled: '‚ùå Commande annul√©e'\n  };\n  return titles[status] || 'üîî Mise √† jour commande';\n}\n\nfunction getStatusMessage(status) {\n  const messages = {\n    confirmed: 'Votre commande a √©t√© confirm√©e par la pharmacie',\n    preparing: 'Votre commande est en cours de pr√©paration',\n    ready_for_delivery: 'Votre commande est pr√™te et en attente du livreur',\n    in_transit: 'Le livreur est en route vers vous',\n    in_delivery: 'Le livreur arrive bient√¥t √† destination',\n    delivered: 'Votre commande a √©t√© livr√©e avec succ√®s',\n    cancelled: 'Votre commande a √©t√© annul√©e'\n  };\n  return messages[status] || 'Le statut de votre commande a √©t√© mis √† jour';\n}\n\nfunction getStatusUrgency(status) {\n  const urgencies = {\n    confirmed: 'medium',\n    preparing: 'medium',\n    ready_for_delivery: 'medium',\n    in_transit: 'high',\n    in_delivery: 'high',\n    delivered: 'medium',\n    cancelled: 'low'\n  };\n  return urgencies[status] || 'medium';\n}","size_bytes":8513},"client/public/sw.js":{"content":"const CACHE_NAME = 'pharma-express-v1';\nconst urlsToCache = [\n  '/',\n  '/static/css/main.css',\n  '/static/js/main.js',\n  '/manifest.json'\n];\n\n// Install event\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n\n// Push notification event\nself.addEventListener('push', event => {\n  const options = {\n    body: event.data ? event.data.text() : 'Nouvelle notification',\n    icon: '/icon-192x192.png',\n    badge: '/icon-192x192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    }\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('Pharma Express CI', options)\n  );\n});\n\n// Notification click event\nself.addEventListener('notificationclick', event => {\n  event.notification.close();\n  event.waitUntil(\n    clients.openWindow('/')\n  );\n});\n","size_bytes":1183},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport PWAInstallPrompt from \"@/components/pwa-install-prompt\";\nimport LanguageSelection from \"@/pages/language-selection\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Home from \"@/pages/home\";\nimport Camera from \"@/pages/camera\";\nimport Pharmacies from \"@/pages/pharmacies\";\nimport OrderPage from \"./pages/order\";\nimport OrderValidationPage from \"./pages/order-validation\";\nimport PendingValidation from \"./pages/pending-validation\";\nimport SupervisorLock from \"./pages/supervisorlock\";\nimport DeliveryTracking from \"@/pages/delivery-tracking\";\nimport Profile from \"@/pages/profile\";\nimport EditProfile from \"@/pages/edit-profile\";\nimport DeliveryAddress from \"@/pages/delivery-address\";\nimport HelpCenter from \"./pages/help-center\";\nimport PrivacyPolicy from \"./pages/privacy-policy\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport ForgotPassword from \"@/pages/forgot-password\";\nimport VerifyResetCode from \"@/pages/verify-reset-code\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport NotFound from \"@/pages/not-found\";\nimport DashboardPatient from \"@/pages/dashboard-patient\";\nimport DashboardPharmacien from \"@/pages/dashboard-pharmacien\";\nimport DashboardLivreur from \"./pages/dashboard-livreur\";\nimport DeliveryMapLivreur from \"./pages/delivery-map-livreur\";\nimport DashboardAdmin from \"@/pages/dashboard-admin\";\nimport PharmacyProfile from \"@/pages/pharmacy-profile\";\nimport CreatePharmacy from \"@/pages/create-pharmacy\";\nimport DeliveryApplication from \"./pages/delivery-application\";\nimport ApplicationStatus from \"@/pages/application-status\";\nimport SuspendedPage from \"@/pages/suspended\";\nimport DeliveryHiringPending from \"./pages/delivery-hiring-pending\";\nimport { lazy } from 'react';\n\n\nfunction RoleDashboard() {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  // Check if user is suspended (isActive = false)\n  if (user.isActive === false) {\n    return <SuspendedPage />;\n  }\n\n  // Check if professional account is pending validation\n  if (user.role === \"pharmacien\" && user.verificationStatus === \"pending\") {\n    return <PendingValidation />;\n  }\n\n  // For delivery persons, check verification status vs delivery application status\n  if (user.role === \"livreur\") {\n    // If user account validation is pending (by admin), show admin validation page\n    if (user.verificationStatus === \"pending\") {\n      return <PendingValidation />;\n    }\n    // If user is approved but delivery application is pending (by pharmacy), show hiring page\n    if (user.verificationStatus === \"approved\" && user.deliveryApplicationStatus === \"pending\") {\n      return <DeliveryHiringPending />;\n    }\n  }\n\n  // Check if professional account was rejected\n  if ((user.role === \"pharmacien\" || user.role === \"livreur\") && user.verificationStatus === \"rejected\") {\n    return <PendingValidation />; // Could create a separate rejection page\n  }\n\n  // Check if delivery application was rejected\n  if (user.role === \"livreur\" && user.deliveryApplicationStatus === \"rejected\") {\n    return <PendingValidation />;\n  }\n\n  switch (user.role) {\n    case \"admin\":\n      return <DashboardAdmin />;\n    case \"pharmacien\":\n      return <DashboardPharmacien />;\n    case \"livreur\":\n      return <DashboardLivreur />;\n    case \"patient\":\n    default:\n      return <DashboardPatient />;\n  }\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Afficher un loading pendant la v√©rification de l'authentification\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Routes publiques - pages d'auth */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n      <Route path=\"/verify-reset-code\" component={VerifyResetCode} />\n      <Route path=\"/reset-password\" component={ResetPassword} />\n\n      {/* Routes prot√©g√©es - n√©cessitent l'authentification */}\n      {isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={RoleDashboard} />\n          <Route path=\"/home\" component={RoleDashboard} />\n          <Route path=\"/dashboard\" component={RoleDashboard} />\n          <Route path=\"/dashboard-patient\" component={DashboardPatient} />\n          <Route path=\"/dashboard-pharmacien\" component={DashboardPharmacien} />\n          <Route path=\"/dashboard-livreur\" component={DashboardLivreur} />\n          <Route path=\"/delivery-map-livreur\" component={DeliveryMapLivreur} />\n          <Route path=\"/dashboard-admin\" component={DashboardAdmin} />\n          <Route path=\"/pending-validation\" component={PendingValidation} />\n          <Route path=\"/camera\" component={Camera} />\n          <Route path=\"/pharmacies\" component={Pharmacies} />\n          <Route path=\"/order\" component={OrderPage} />\n          <Route path=\"/order-validation\" component={OrderValidationPage} />\n          <Route path=\"/pending-validation\" component={PendingValidation} />\n          <Route path=\"/delivery-hiring-pending\" component={DeliveryHiringPending} />\n          <Route path=\"/suspended\" component={SuspendedPage} />\n          <Route path=\"/supervisorlock\" component={SupervisorLock} />\n          <Route path=\"/delivery\" component={DeliveryTracking} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/edit-profile\" component={EditProfile} />\n          <Route path=\"/pharmacy-profile\" component={PharmacyProfile} />\n          <Route path=\"/create-pharmacy\" component={CreatePharmacy} />\n          <Route path=\"/delivery-application\" component={DeliveryApplication} />\n          <Route path=\"/application-status\" component={ApplicationStatus} />\n          <Route path=\"/delivery-application-status\" component={ApplicationStatus} />\n          <Route path=\"/delivery-tracking\" component={DeliveryTracking} />\n          <Route path=\"/delivery-address\" component={DeliveryAddress} />\n          <Route path=\"/help-center\" component={HelpCenter} />\n          <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n          <Route component={NotFound} />\n        </>\n      ) : (\n        <>\n          {/* Routes pour les utilisateurs non connect√©s */}\n          <Route path=\"/\" component={LanguageSelection} />\n          <Route path=\"/onboarding\" component={Onboarding} />\n        </>\n      )}\n\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    // Register service worker\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', async () => {\n        try {\n          const registration = await navigator.serviceWorker.register('/sw.js');\n          console.log('SW registered: ', registration);\n        } catch (registrationError) {\n          console.log('SW registration failed: ', registrationError);\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <Toaster />\n          <PWAInstallPrompt />\n          <Router />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":7807},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Leaflet map styles */\n.leaflet-container {\n  font-family: inherit;\n}\n\n.leaflet-popup-content-wrapper {\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n.leaflet-popup-content {\n  font-size: 14px;\n  margin: 8px 12px;\n}\n\n/* Custom marker animations */\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n    transform: translate3d(0,0,0);\n  }\n  40%, 43% {\n    animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    transform: translate3d(0, -30px, 0);\n  }\n  70% {\n    animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    transform: translate3d(0, -15px, 0);\n  }\n  90% {\n    transform: translate3d(0,-4px,0);\n  }\n}\n\n.delivery-marker {\n  animation: bounce 1s infinite;\n}\n\n/* Animation pour les marqueurs de destination */\n@keyframes destinationPulse {\n  0% {\n    transform: scale(1);\n    filter: drop-shadow(0 4px 12px rgba(0,0,0,0.5));\n  }\n  50% {\n    transform: scale(1.05);\n    filter: drop-shadow(0 6px 16px rgba(0,0,0,0.6));\n  }\n  100% {\n    transform: scale(1);\n    filter: drop-shadow(0 4px 12px rgba(0,0,0,0.5));\n  }\n}\n\n.delivery-destination-marker {\n  animation: destinationPulse 2s ease-in-out infinite;\n  z-index: 1000;\n}\n\n/* Pulse animation for live indicator */\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.9;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Pharma Express specific colors */\n  --pharma-green: hsl(142, 76%, 36%);\n  --pharma-green-dark: hsl(142, 76%, 31%);\n  --pharma-blue: hsl(217, 91%, 60%);\n  --pharma-bg: hsl(0, 0%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-pharma-bg text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .pharma-green {\n    color: var(--pharma-green);\n  }\n  \n  .bg-pharma-green {\n    background-color: var(--pharma-green);\n  }\n  \n  .border-pharma-green {\n    border-color: var(--pharma-green);\n  }\n  \n  .pharma-blue {\n    color: var(--pharma-blue);\n  }\n  \n  .bg-pharma-blue {\n    background-color: var(--pharma-blue);\n  }\n  \n  .bg-pharma-bg {\n    background-color: var(--pharma-bg);\n  }\n\n  .fade-in {\n    animation: fadeIn 0.3s ease-in;\n  }\n\n  .notification-badge {\n    animation: pulse 2s infinite;\n  }\n\n  .delivery-icon {\n    animation: bounce 2s infinite;\n  }\n\n  .camera-preview {\n    aspect-ratio: 4/3;\n    background: #000;\n    border-radius: 12px;\n    overflow: hidden;\n    position: relative;\n  }\n\n  .map-container {\n    height: 200px;\n    background: linear-gradient(45deg, #e5e7eb, #f3f4f6);\n    border-radius: 12px;\n    position: relative;\n    overflow: hidden;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-10px);\n  }\n  60% {\n    transform: translateY(-5px);\n  }\n}\n","size_bytes":4699},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\n\ninterface BottomNavigationProps {\n  currentPage: 'home' | 'pharmacies' | 'orders' | 'profile' | 'delivery';\n}\n\nexport default function BottomNavigation({ currentPage }: BottomNavigationProps) {\n  const [, setLocation] = useLocation();\n\n  const navigationItems = [\n    {\n      key: 'home',\n      label: 'Accueil',\n      icon: (\n        <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n        </svg>\n      ),\n      path: '/home'\n    },\n    {\n      key: 'pharmacies',\n      label: 'Pharmacies',\n      icon: (\n        <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M3 4a1 1 0 011-1h1a1 1 0 011 1v.01h10V4a1 1 0 011-1h1a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V4zm3 2v11h8V6H6z\" />\n          <path fillRule=\"evenodd\" d=\"M8 8a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1zm0 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\n        </svg>\n      ),\n      path: '/pharmacies'\n    },\n    {\n      key: 'orders',\n      label: 'Commandes',\n      icon: (\n        <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\" />\n          <path fillRule=\"evenodd\" d=\"M4 5a2 2 0 012-2v1a2 2 0 002 2h4a2 2 0 002-2V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 3a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3z\" clipRule=\"evenodd\" />\n        </svg>\n      ),\n      path: '/delivery'\n    },\n    {\n      key: 'profile',\n      label: 'Profil',\n      icon: (\n        <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path fillRule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clipRule=\"evenodd\" />\n        </svg>\n      ),\n      path: '/profile'\n    }\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-50\">\n      <div className=\"flex items-center justify-around\">\n        {navigationItems.map((item) => (\n          <button\n            key={item.key}\n            onClick={() => setLocation(item.path)}\n            className={`flex flex-col items-center py-2 px-3 ${\n              currentPage === item.key ? 'text-pharma-green' : 'text-gray-400 hover:text-pharma-green'\n            } transition-colors`}\n            data-testid={`nav-${item.key}`}\n          >\n            {item.icon}\n            <span className=\"text-xs font-medium mt-1\">{item.label}</span>\n          </button>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2711},"client/src/components/pwa-install-prompt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { usePWA } from \"@/hooks/use-pwa\";\n\nexport default function PWAInstallPrompt() {\n  const { deferredPrompt, isInstallable, installApp } = usePWA();\n  const [showPrompt, setShowPrompt] = useState(false);\n\n  useEffect(() => {\n    if (isInstallable && !localStorage.getItem('pwa-install-dismissed')) {\n      const timer = setTimeout(() => setShowPrompt(true), 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [isInstallable]);\n\n  const handleInstall = async () => {\n    const success = await installApp();\n    if (success) {\n      setShowPrompt(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    localStorage.setItem('pwa-install-dismissed', 'true');\n  };\n\n  if (!showPrompt || !isInstallable) return null;\n\n  return (\n    <div className=\"fixed bottom-20 left-4 right-4 z-50 fade-in\" data-testid=\"pwa-install-prompt\">\n      <Card className=\"shadow-lg border border-gray-200\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-pharma-green rounded-lg p-2\">\n              <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-gray-900\" data-testid=\"text-install-title\">\n                Installer l'app\n              </h3>\n              <p className=\"text-sm text-gray-600\" data-testid=\"text-install-description\">\n                Ajoutez Pharma Express CI √† votre √©cran d'accueil\n              </p>\n            </div>\n            <Button\n              onClick={handleInstall}\n              className=\"bg-pharma-green text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-pharma-green/90\"\n              data-testid=\"button-install-app\"\n            >\n              Installer\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleDismiss}\n              className=\"text-gray-400 hover:text-gray-600\"\n              data-testid=\"button-dismiss-install\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n              </svg>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2964},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport type { Language } from '@/lib/i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>(() => {\n    // R√©cup√©rer la langue sauvegard√©e dans localStorage\n    const saved = localStorage.getItem('pharma-language');\n    return (saved as Language) || 'fr';\n  });\n\n  useEffect(() => {\n    // Sauvegarder la langue dans localStorage\n    localStorage.setItem('pharma-language', language);\n  }, [language]);\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":1093},"client/src/hooks/use-geolocation.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface GeolocationState {\n  latitude: number | null;\n  longitude: number | null;\n  error: string | null;\n  loading: boolean;\n}\n\nexport function useGeolocation() {\n  const [state, setState] = useState<GeolocationState>({\n    latitude: null,\n    longitude: null,\n    error: null,\n    loading: false,\n  });\n\n  const getCurrentPosition = () => {\n    if (!navigator.geolocation) {\n      setState(prev => ({\n        ...prev,\n        error: \"Geolocation is not supported by this browser.\",\n        loading: false,\n      }));\n      return;\n    }\n\n    setState(prev => ({ ...prev, loading: true, error: null }));\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          error: null,\n          loading: false,\n        });\n      },\n      (error) => {\n        setState(prev => ({\n          ...prev,\n          error: error.message,\n          loading: false,\n        }));\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0,\n      }\n    );\n  };\n\n  useEffect(() => {\n    getCurrentPosition();\n  }, []);\n\n  return {\n    ...state,\n    refetch: getCurrentPosition,\n  };\n}\n","size_bytes":1282},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-notifications.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useNotifications() {\n  const [permission, setPermission] = useState<NotificationPermission>('default');\n  const [hasUnread, setHasUnread] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if ('Notification' in window) {\n      setPermission(Notification.permission);\n    }\n  }, []);\n\n  const requestPermission = async (): Promise<boolean> => {\n    if (!('Notification' in window)) {\n      toast({\n        title: \"Notifications non support√©es\",\n        description: \"Votre navigateur ne supporte pas les notifications\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    const result = await Notification.requestPermission();\n    setPermission(result);\n\n    if (result === 'granted') {\n      toast({\n        title: \"Notifications activ√©es\",\n        description: \"Vous recevrez des mises √† jour sur vos commandes\",\n      });\n      return true;\n    } else {\n      toast({\n        title: \"Notifications refus√©es\",\n        description: \"Activez les notifications dans les param√®tres de votre navigateur\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n  };\n\n  const showNotification = (title: string, options?: NotificationOptions) => {\n    if (permission === 'granted') {\n      const notification = new Notification(title, {\n        icon: '/icon-192x192.png',\n        badge: '/icon-192x192.png',\n        ...options,\n      });\n\n      notification.onclick = () => {\n        window.focus();\n        notification.close();\n      };\n\n      setHasUnread(true);\n    }\n  };\n\n  const markAsRead = () => {\n    setHasUnread(false);\n  };\n\n  // Subscribe to push notifications (would integrate with backend)\n  const subscribeToPush = async () => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      try {\n        const registration = await navigator.serviceWorker.ready;\n        const subscription = await registration.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: 'your-vapid-public-key', // Replace with actual VAPID key\n        });\n        \n        // Send subscription to backend\n        console.log('Push subscription:', subscription);\n        return subscription;\n      } catch (error) {\n        console.error('Failed to subscribe to push notifications:', error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  return {\n    permission,\n    hasUnread,\n    requestPermission,\n    showNotification,\n    markAsRead,\n    subscribeToPush,\n  };\n}\n","size_bytes":2587},"client/src/hooks/use-pwa.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\nexport function usePWA() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [isInstallable, setIsInstallable] = useState(false);\n\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: BeforeInstallPromptEvent) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setIsInstallable(true);\n    };\n\n    const handleAppInstalled = () => {\n      setDeferredPrompt(null);\n      setIsInstallable(false);\n      console.log('PWA was installed');\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt as EventListener);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt as EventListener);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const installApp = async (): Promise<boolean> => {\n    if (!deferredPrompt) return false;\n\n    try {\n      await deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        setDeferredPrompt(null);\n        setIsInstallable(false);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error installing PWA:', error);\n      return false;\n    }\n  };\n\n  return {\n    deferredPrompt,\n    isInstallable,\n    installApp,\n  };\n}\n","size_bytes":1684},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    // Utiliser requestAnimationFrame pour √©viter les conflits DOM\n    requestAnimationFrame(() => {\n      dispatch({\n        type: \"REMOVE_TOAST\",\n        toastId: toastId,\n      })\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) => {\n    requestAnimationFrame(() => {\n      dispatch({\n        type: \"UPDATE_TOAST\",\n        toast: { ...props, id },\n      })\n    })\n  }\n  \n  const dismiss = () => {\n    requestAnimationFrame(() => {\n      dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n    })\n  }\n\n  // Utiliser requestAnimationFrame pour √©viter les conflits DOM\n  requestAnimationFrame(() => {\n    dispatch({\n      type: \"ADD_TOAST\",\n      toast: {\n        ...props,\n        id,\n        open: true,\n        onOpenChange: (open) => {\n          if (!open) dismiss()\n        },\n      },\n    })\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":4245},"client/src/hooks/useAuth.tsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  \n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const isAuthenticated = !!user && !error;\n  \n  const logout = async () => {\n    try {\n      await apiRequest('/api/auth/logout', 'POST', {});\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear the query cache and redirect\n      queryClient.clear();\n      window.location.href = '/login';\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    error,\n    logout\n  };\n}","size_bytes":859},"client/src/hooks/useOrderNotifications.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useAuth } from './useAuth';\n\n// Types pour les statuts de commande\ntype OrderStatus = 'pending' | 'confirmed' | 'preparing' | 'ready_for_delivery' | 'in_transit' | 'in_delivery' | 'delivered' | 'cancelled';\n\n// Configuration des sons par statut\nconst NOTIFICATION_SOUNDS: Record<OrderStatus, { file: string; title: string; message: string; urgency: 'low' | 'medium' | 'high' }> = {\n  pending: {\n    file: '/sounds/order-pending.mp3',\n    title: 'üîÑ Commande en attente',\n    message: 'Votre commande est en cours de traitement',\n    urgency: 'low'\n  },\n  confirmed: {\n    file: '/sounds/order-confirmed.mp3',\n    title: '‚úÖ Commande confirm√©e',\n    message: 'Votre commande a √©t√© confirm√©e par la pharmacie',\n    urgency: 'medium'\n  },\n  preparing: {\n    file: '/sounds/order-preparing.mp3',\n    title: 'üîÑ En pr√©paration',\n    message: 'Votre commande est en cours de pr√©paration',\n    urgency: 'medium'\n  },\n  ready_for_delivery: {\n    file: '/sounds/order-ready.mp3',\n    title: 'üì¶ Pr√™te pour livraison',\n    message: 'Votre commande est pr√™te et en attente du livreur',\n    urgency: 'medium'\n  },\n  in_transit: {\n    file: '/sounds/delivery-started.mp3',\n    title: 'üöö Livraison en route',\n    message: 'Le livreur est en route vers vous',\n    urgency: 'high'\n  },\n  in_delivery: {\n    file: '/sounds/delivery-arrival.mp3',\n    title: 'üéØ Livreur en approche',\n    message: 'Le livreur arrive bient√¥t √† destination',\n    urgency: 'high'\n  },\n  delivered: {\n    file: '/sounds/delivery-complete.mp3',\n    title: 'üéâ Livraison termin√©e',\n    message: 'Votre commande a √©t√© livr√©e avec succ√®s',\n    urgency: 'medium'\n  },\n  cancelled: {\n    file: '/sounds/order-cancelled.mp3',\n    title: '‚ùå Commande annul√©e',\n    message: 'Votre commande a √©t√© annul√©e',\n    urgency: 'low'\n  }\n};\n\nexport function useOrderNotifications() {\n  const { user } = useAuth();\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(false);\n  const [permissionStatus, setPermissionStatus] = useState<NotificationPermission>('default');\n  const audioRefs = useRef<Record<string, HTMLAudioElement>>({});\n  const lastOrderStatusRef = useRef<Record<string, OrderStatus>>({});\n\n  // Initialiser les fichiers audio\n  useEffect(() => {\n    Object.entries(NOTIFICATION_SOUNDS).forEach(([status, config]) => {\n      const audio = new Audio(config.file);\n      audio.preload = 'auto';\n      audio.volume = 0.8;\n      audioRefs.current[status] = audio;\n    });\n\n    return () => {\n      // Nettoyer les r√©f√©rences audio\n      Object.values(audioRefs.current).forEach(audio => {\n        audio.pause();\n        audio.currentTime = 0;\n      });\n    };\n  }, []);\n\n  // Demander permission pour les notifications\n  const requestNotificationPermission = async () => {\n    if (!('Notification' in window)) {\n      console.log('Ce navigateur ne supporte pas les notifications');\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      setPermissionStatus(permission);\n      setIsNotificationsEnabled(permission === 'granted');\n      \n      if (permission === 'granted') {\n        // Enregistrer le service worker pour les notifications\n        await registerServiceWorker();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Erreur lors de la demande de permission:', error);\n      return false;\n    }\n  };\n\n  // Enregistrer le service worker\n  const registerServiceWorker = async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.register('/sw-notifications.js');\n        console.log('Service Worker enregistr√©:', registration);\n        return registration;\n      } catch (error) {\n        console.error('Erreur enregistrement Service Worker:', error);\n      }\n    }\n  };\n\n  // Jouer le son pour un statut donn√©\n  const playNotificationSound = async (status: OrderStatus) => {\n    try {\n      const audio = audioRefs.current[status];\n      if (audio) {\n        audio.currentTime = 0;\n        await audio.play();\n        \n        // Vibration sur mobile\n        if ('vibrator' in navigator || 'vibrate' in navigator) {\n          const pattern = NOTIFICATION_SOUNDS[status].urgency === 'high' ? [200, 100, 200] : [100];\n          navigator.vibrate?.(pattern);\n        }\n      }\n    } catch (error) {\n      console.log('Impossible de jouer le son:', error);\n    }\n  };\n\n  // Afficher une notification syst√®me\n  const showSystemNotification = async (status: OrderStatus, orderId?: string) => {\n    if (!isNotificationsEnabled || permissionStatus !== 'granted') return;\n\n    const config = NOTIFICATION_SOUNDS[status];\n    \n    try {\n      // Essayer d'utiliser le Service Worker d'abord\n      if ('serviceWorker' in navigator) {\n        const registration = await navigator.serviceWorker.ready;\n        if (registration.showNotification) {\n          await registration.showNotification(config.title, {\n            body: config.message,\n            icon: '/icons/pharma-icon-192.png',\n            badge: '/icons/pharma-icon-72.png',\n            tag: `order-${orderId || 'general'}`,\n            requireInteraction: config.urgency === 'high',\n            data: {\n              orderId,\n              status,\n              timestamp: Date.now()\n            }\n          });\n          return;\n        }\n      }\n      \n      // Fallback vers Notification API standard\n      if ('Notification' in window && Notification.permission === 'granted') {\n        const notification = new Notification(config.title, {\n          body: config.message,\n          icon: '/icons/pharma-icon-192.png',\n          badge: '/icons/pharma-icon-72.png',\n          tag: `order-${orderId || 'general'}`,\n          data: {\n            orderId,\n            status,\n            timestamp: Date.now()\n          }\n        });\n\n        // Auto-fermeture apr√®s d√©lai selon urgence\n        const autoCloseDelay = config.urgency === 'high' ? 10000 : 5000;\n        setTimeout(() => notification.close(), autoCloseDelay);\n\n        notification.onclick = () => {\n          window.focus();\n          // Rediriger vers la page de suivi si n√©cessaire\n          if (orderId && ['in_transit', 'in_delivery'].includes(status)) {\n            window.location.href = '/delivery-tracking';\n          } else {\n            window.location.href = '/dashboard';\n          }\n          notification.close();\n        };\n      }\n    } catch (error) {\n      console.log('Notification syst√®me non disponible:', error);\n    }\n  };\n\n  // Fonction principale pour notifier un changement de statut\n  const notifyOrderStatusChange = async (orderId: string, newStatus: OrderStatus, playSound: boolean = true) => {\n    const previousStatus = lastOrderStatusRef.current[orderId];\n    \n    // Ne notifier que si le statut a vraiment chang√©\n    if (previousStatus === newStatus) return;\n\n    lastOrderStatusRef.current[orderId] = newStatus;\n\n    // Jouer le son si demand√© (d√©sactiv√© car maintenant g√©r√© dans l'app)\n    // if (playSound && isNotificationsEnabled) {\n    //   await playNotificationSound(newStatus);\n    // }\n\n    // Afficher notification syst√®me (utilise le son par d√©faut du navigateur)\n    await showSystemNotification(newStatus, orderId);\n\n    // Log pour debug\n    console.log(`üîî Notification: Commande ${orderId.slice(0, 8)} ‚Üí ${newStatus}`);\n  };\n\n  // Fonction pour tester les notifications\n  const testNotification = async (status: OrderStatus = 'confirmed') => {\n    await playNotificationSound(status);\n    await showSystemNotification(status, 'test-order');\n  };\n\n  // V√©rifier le statut des permissions au chargement\n  useEffect(() => {\n    if ('Notification' in window) {\n      setPermissionStatus(Notification.permission);\n      setIsNotificationsEnabled(Notification.permission === 'granted');\n    }\n  }, []);\n\n  return {\n    isNotificationsEnabled,\n    permissionStatus,\n    requestNotificationPermission,\n    notifyOrderStatusChange,\n    testNotification,\n    playNotificationSound,\n    showSystemNotification\n  };\n}","size_bytes":8134},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/camera.ts":{"content":"// Camera utilities for prescription capture\nexport interface CameraCapture {\n  blob: Blob;\n  dataUrl: string;\n  width: number;\n  height: number;\n}\n\nexport const getCameraConstraints = (facingMode: 'user' | 'environment' = 'environment') => ({\n  video: {\n    facingMode,\n    width: { ideal: 1920 },\n    height: { ideal: 1080 },\n    aspectRatio: { ideal: 4/3 }\n  },\n  audio: false\n});\n\nexport const startCameraStream = async (\n  videoElement: HTMLVideoElement, \n  facingMode: 'user' | 'environment' = 'environment'\n): Promise<MediaStream> => {\n  try {\n    const constraints = getCameraConstraints(facingMode);\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    \n    videoElement.srcObject = stream;\n    videoElement.play();\n    \n    return stream;\n  } catch (error) {\n    console.error('Error accessing camera:', error);\n    throw new Error('Impossible d\\'acc√©der √† la cam√©ra. V√©rifiez les permissions.');\n  }\n};\n\nexport const stopCameraStream = (stream: MediaStream): void => {\n  stream.getTracks().forEach(track => track.stop());\n};\n\nexport const captureFromCamera = async (videoElement: HTMLVideoElement): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      \n      if (!context) {\n        reject(new Error('Impossible de cr√©er le contexte canvas'));\n        return;\n      }\n\n      // Set canvas dimensions to match video\n      canvas.width = videoElement.videoWidth;\n      canvas.height = videoElement.videoHeight;\n\n      // Draw video frame to canvas\n      context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n      // Convert to blob\n      canvas.toBlob((blob) => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          reject(new Error('Impossible de cr√©er l\\'image'));\n        }\n      }, 'image/jpeg', 0.8);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const captureWithEnhancements = async (\n  videoElement: HTMLVideoElement,\n  options: {\n    quality?: number;\n    maxWidth?: number;\n    maxHeight?: number;\n    format?: 'jpeg' | 'png' | 'webp';\n  } = {}\n): Promise<CameraCapture> => {\n  const {\n    quality = 0.8,\n    maxWidth = 1920,\n    maxHeight = 1080,\n    format = 'jpeg'\n  } = options;\n\n  return new Promise((resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      \n      if (!context) {\n        reject(new Error('Impossible de cr√©er le contexte canvas'));\n        return;\n      }\n\n      let { videoWidth: width, videoHeight: height } = videoElement;\n\n      // Scale down if needed\n      if (width > maxWidth || height > maxHeight) {\n        const aspectRatio = width / height;\n        if (width > maxWidth) {\n          width = maxWidth;\n          height = width / aspectRatio;\n        }\n        if (height > maxHeight) {\n          height = maxHeight;\n          width = height * aspectRatio;\n        }\n      }\n\n      canvas.width = width;\n      canvas.height = height;\n\n      // Apply image enhancements for better prescription readability\n      context.filter = 'contrast(1.2) brightness(1.1) saturate(1.1)';\n      context.drawImage(videoElement, 0, 0, width, height);\n\n      // Convert to blob and data URL\n      canvas.toBlob((blob) => {\n        if (blob) {\n          const dataUrl = canvas.toDataURL(`image/${format}`, quality);\n          resolve({\n            blob,\n            dataUrl,\n            width,\n            height\n          });\n        } else {\n          reject(new Error('Impossible de cr√©er l\\'image'));\n        }\n      }, `image/${format}`, quality);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const validatePrescriptionImage = (blob: Blob): Promise<boolean> => {\n  return new Promise((resolve) => {\n    // Basic validation - check file size and type\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n\n    if (blob.size > maxSize) {\n      resolve(false);\n      return;\n    }\n\n    if (!allowedTypes.includes(blob.type)) {\n      resolve(false);\n      return;\n    }\n\n    // Additional validation could include:\n    // - Image dimensions check\n    // - Blur detection\n    // - Text detection using OCR\n    // - Prescription format validation\n\n    resolve(true);\n  });\n};\n\nexport const compressImage = (\n  blob: Blob, \n  maxSizeKB: number = 1024\n): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      if (!ctx) {\n        reject(new Error('Impossible de cr√©er le contexte canvas'));\n        return;\n      }\n\n      // Calculate new dimensions to reduce file size\n      let { width, height } = img;\n      const maxDimension = 1200;\n      \n      if (width > maxDimension || height > maxDimension) {\n        const aspectRatio = width / height;\n        if (width > height) {\n          width = maxDimension;\n          height = width / aspectRatio;\n        } else {\n          height = maxDimension;\n          width = height * aspectRatio;\n        }\n      }\n\n      canvas.width = width;\n      canvas.height = height;\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Try different quality levels until we get under the size limit\n      let quality = 0.8;\n      const tryCompress = () => {\n        canvas.toBlob((compressedBlob) => {\n          if (compressedBlob) {\n            if (compressedBlob.size <= maxSizeKB * 1024 || quality <= 0.1) {\n              resolve(compressedBlob);\n            } else {\n              quality -= 0.1;\n              tryCompress();\n            }\n          } else {\n            reject(new Error('Compression failed'));\n          }\n        }, 'image/jpeg', quality);\n      };\n\n      tryCompress();\n    };\n\n    img.onerror = () => reject(new Error('Invalid image'));\n    img.src = URL.createObjectURL(blob);\n  });\n};\n\n// Check camera permissions\nexport const checkCameraPermissions = async (): Promise<boolean> => {\n  try {\n    if (!navigator.permissions) {\n      // Fallback: try to access camera directly\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      stream.getTracks().forEach(track => track.stop());\n      return true;\n    }\n\n    const permission = await navigator.permissions.query({ name: 'camera' as PermissionName });\n    return permission.state === 'granted';\n  } catch (error) {\n    return false;\n  }\n};\n\n// Request camera permissions\nexport const requestCameraPermissions = async (): Promise<boolean> => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    console.error('Camera permission denied:', error);\n    return false;\n  }\n};\n","size_bytes":6937},"client/src/lib/i18n.ts":{"content":"// Syst√®me de traduction simple pour Fran√ßais/Anglais\nexport const translations = {\n  fr: {\n    // Navigation et g√©n√©ral\n    \"welcome\": \"Bienvenue\",\n    \"loading\": \"Chargement...\",\n    \"error\": \"Erreur\",\n    \"continue\": \"Continuer\",\n    \"back\": \"Retour\",\n    \"next\": \"Suivant\",\n    \"cancel\": \"Annuler\",\n    \"confirm\": \"Confirmer\",\n    \"save\": \"Enregistrer\",\n    \"edit\": \"Modifier\",\n    \"delete\": \"Supprimer\",\n    \n    // Authentification\n    \"login\": \"Se connecter\",\n    \"register\": \"S'inscrire\",\n    \"logout\": \"Se d√©connecter\",\n    \"phone\": \"Num√©ro de t√©l√©phone\",\n    \"password\": \"Mot de passe\",\n    \"confirmPassword\": \"Confirmer le mot de passe\",\n    \"firstName\": \"Pr√©nom\",\n    \"lastName\": \"Nom\",\n    \"address\": \"Adresse de domicile\",\n    \"language\": \"Langue pr√©f√©r√©e\",\n    \"alreadyHaveAccount\": \"D√©j√† un compte ?\",\n    \"noAccountYet\": \"Pas encore de compte ?\",\n    \"createAccount\": \"Cr√©er votre compte\",\n    \"loginToAccount\": \"Connectez-vous √† votre compte\",\n    \n    // Choix de langue\n    \"chooseLanguage\": \"Choisir votre langue\",\n    \"languageDescription\": \"S√©lectionnez votre langue pr√©f√©r√©e pour utiliser l'application\",\n    \"french\": \"Fran√ßais\",\n    \"english\": \"English\",\n    \n    // Onboarding\n    \"welcome_title\": \"Bienvenue chez Pharma Express CI\",\n    \"welcome_description\": \"Votre pharmacie de proximit√©, livr√©e directement chez vous en C√¥te d'Ivoire\",\n    \"getStarted\": \"Commencer\",\n    \n    // Pages principales\n    \"home\": \"Accueil\",\n    \"pharmacies\": \"Pharmacies\",\n    \"camera\": \"Ordonnance\",\n    \"delivery\": \"Livraison\",\n    \"profile\": \"Profil\",\n    \n    // Pharmacies\n    \"nearbyPharmacies\": \"Pharmacies √† proximit√©\",\n    \"searchPharmacies\": \"Rechercher des pharmacies\",\n    \"openNow\": \"Ouvert maintenant\",\n    \"closed\": \"Ferm√©\",\n    \"deliveryTime\": \"Temps de livraison\",\n    \"rating\": \"Note\",\n    \"minutes\": \"min\",\n    \n    // Ordonnances\n    \"uploadPrescription\": \"T√©l√©charger une ordonnance\",\n    \"takePrescriptionPhoto\": \"Prendre une photo de votre ordonnance\",\n    \"uploadFromGallery\": \"Choisir depuis la galerie\",\n    \"prescriptionUploaded\": \"Ordonnance t√©l√©charg√©e\",\n    \"prescriptionProcessing\": \"Traitement en cours...\",\n    \n    // Profil\n    \"myProfile\": \"Mon profil\",\n    \"personalInfo\": \"Informations personnelles\",\n    \"contactInfo\": \"Informations de contact\",\n    \"preferences\": \"Pr√©f√©rences\",\n    \"updateProfile\": \"Mettre √† jour le profil\",\n    \"profileUpdated\": \"Profil mis √† jour avec succ√®s\",\n    \n    // Messages d'erreur et succ√®s\n    \"loginSuccess\": \"Connexion r√©ussie\",\n    \"loginError\": \"Erreur de connexion\",\n    \"registerSuccess\": \"Inscription r√©ussie\",\n    \"registerError\": \"Erreur d'inscription\",\n    \"passwordsDontMatch\": \"Les mots de passe ne correspondent pas\",\n    \"phoneRequired\": \"Le num√©ro de t√©l√©phone est requis\",\n    \"passwordRequired\": \"Le mot de passe est requis\",\n    \"fieldRequired\": \"Ce champ est requis\",\n    \n    // PWA\n    \"installApp\": \"Installer l'application\",\n    \"installPrompt\": \"Ajouter Pharma Express CI √† votre √©cran d'accueil\"\n  },\n  \n  en: {\n    // Navigation and general\n    \"welcome\": \"Welcome\",\n    \"loading\": \"Loading...\",\n    \"error\": \"Error\",\n    \"continue\": \"Continue\",\n    \"back\": \"Back\",\n    \"next\": \"Next\",\n    \"cancel\": \"Cancel\",\n    \"confirm\": \"Confirm\",\n    \"save\": \"Save\",\n    \"edit\": \"Edit\",\n    \"delete\": \"Delete\",\n    \n    // Authentication\n    \"login\": \"Log in\",\n    \"register\": \"Sign up\",\n    \"logout\": \"Log out\",\n    \"phone\": \"Phone number\",\n    \"password\": \"Password\",\n    \"confirmPassword\": \"Confirm password\",\n    \"firstName\": \"First name\",\n    \"lastName\": \"Last name\",\n    \"address\": \"Home address\",\n    \"language\": \"Preferred language\",\n    \"alreadyHaveAccount\": \"Already have an account?\",\n    \"noAccountYet\": \"Don't have an account yet?\",\n    \"createAccount\": \"Create your account\",\n    \"loginToAccount\": \"Log in to your account\",\n    \n    // Language choice\n    \"chooseLanguage\": \"Choose your language\",\n    \"languageDescription\": \"Select your preferred language to use the app\",\n    \"french\": \"Fran√ßais\",\n    \"english\": \"English\",\n    \n    // Onboarding\n    \"welcome_title\": \"Welcome to Pharma Express CI\",\n    \"welcome_description\": \"Your neighborhood pharmacy, delivered directly to your home in C√¥te d'Ivoire\",\n    \"getStarted\": \"Get Started\",\n    \n    // Main pages\n    \"home\": \"Home\",\n    \"pharmacies\": \"Pharmacies\",\n    \"camera\": \"Prescription\",\n    \"delivery\": \"Delivery\",\n    \"profile\": \"Profile\",\n    \n    // Pharmacies\n    \"nearbyPharmacies\": \"Nearby Pharmacies\",\n    \"searchPharmacies\": \"Search pharmacies\",\n    \"openNow\": \"Open now\",\n    \"closed\": \"Closed\",\n    \"deliveryTime\": \"Delivery time\",\n    \"rating\": \"Rating\",\n    \"minutes\": \"min\",\n    \n    // Prescriptions\n    \"uploadPrescription\": \"Upload prescription\",\n    \"takePrescriptionPhoto\": \"Take a photo of your prescription\",\n    \"uploadFromGallery\": \"Choose from gallery\",\n    \"prescriptionUploaded\": \"Prescription uploaded\",\n    \"prescriptionProcessing\": \"Processing...\",\n    \n    // Profile\n    \"myProfile\": \"My profile\",\n    \"personalInfo\": \"Personal information\",\n    \"contactInfo\": \"Contact information\",\n    \"preferences\": \"Preferences\",\n    \"updateProfile\": \"Update profile\",\n    \"profileUpdated\": \"Profile updated successfully\",\n    \n    // Error and success messages\n    \"loginSuccess\": \"Login successful\",\n    \"loginError\": \"Login error\",\n    \"registerSuccess\": \"Registration successful\",\n    \"registerError\": \"Registration error\",\n    \"passwordsDontMatch\": \"Passwords don't match\",\n    \"phoneRequired\": \"Phone number is required\",\n    \"passwordRequired\": \"Password is required\",\n    \"fieldRequired\": \"This field is required\",\n    \n    // PWA\n    \"installApp\": \"Install app\",\n    \"installPrompt\": \"Add Pharma Express CI to your home screen\"\n  }\n};\n\nexport type Language = 'fr' | 'en';\nexport type TranslationKey = keyof typeof translations.fr;\n\nexport function getTranslation(key: TranslationKey, language: Language): string {\n  return translations[language][key] || translations['fr'][key] || key;\n}\n\n// Hook pour utiliser les traductions\nexport function useTranslation(language: Language = 'fr') {\n  return {\n    t: (key: TranslationKey) => getTranslation(key, language),\n    language\n  };\n}","size_bytes":6225},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"// IndexedDB utilities for offline data caching\ninterface CacheData {\n  data: any;\n  timestamp: number;\n  expiry?: number;\n}\n\nclass OfflineStorage {\n  private dbName = 'pharma-express-db';\n  private version = 1;\n  private db: IDBDatabase | null = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create object stores\n        if (!db.objectStoreNames.contains('pharmacies')) {\n          db.createObjectStore('pharmacies', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('orders')) {\n          db.createObjectStore('orders', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('prescriptions')) {\n          db.createObjectStore('prescriptions', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('user')) {\n          db.createObjectStore('user', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('cache')) {\n          db.createObjectStore('cache', { keyPath: 'key' });\n        }\n      };\n    });\n  }\n\n  async set(store: string, key: string, data: any, expiry?: number): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readwrite');\n      const objectStore = transaction.objectStore(store);\n      \n      const cacheData: CacheData = {\n        data,\n        timestamp: Date.now(),\n        expiry: expiry ? Date.now() + expiry : undefined\n      };\n\n      const request = objectStore.put({ key, ...cacheData });\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async get(store: string, key: string): Promise<any> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readonly');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.get(key);\n\n      request.onsuccess = () => {\n        const result = request.result;\n        if (!result) {\n          resolve(null);\n          return;\n        }\n\n        // Check if data has expired\n        if (result.expiry && Date.now() > result.expiry) {\n          this.delete(store, key);\n          resolve(null);\n          return;\n        }\n\n        resolve(result.data);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async delete(store: string, key: string): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readwrite');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.delete(key);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAll(store: string): Promise<any[]> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readonly');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.getAll();\n\n      request.onsuccess = () => {\n        const results = request.result.map(item => item.data).filter(Boolean);\n        resolve(results);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clear(store: string): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([store], 'readwrite');\n      const objectStore = transaction.objectStore(store);\n      const request = objectStore.clear();\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Cache API responses with TTL\n  async cacheApiResponse(endpoint: string, data: any, ttl: number = 300000): Promise<void> {\n    await this.set('cache', endpoint, data, ttl);\n  }\n\n  async getCachedApiResponse(endpoint: string): Promise<any> {\n    return await this.get('cache', endpoint);\n  }\n\n  // Store user data for offline access\n  async storeUserData(user: any): Promise<void> {\n    await this.set('user', 'current', user);\n  }\n\n  async getUserData(): Promise<any> {\n    return await this.get('user', 'current');\n  }\n\n  // Store pharmacies for offline browsing\n  async storePharmacies(pharmacies: any[]): Promise<void> {\n    for (const pharmacy of pharmacies) {\n      await this.set('pharmacies', pharmacy.id, pharmacy);\n    }\n  }\n\n  async getStoredPharmacies(): Promise<any[]> {\n    return await this.getAll('pharmacies');\n  }\n\n  // Store orders for offline viewing\n  async storeOrder(order: any): Promise<void> {\n    await this.set('orders', order.id, order);\n  }\n\n  async getStoredOrders(): Promise<any[]> {\n    return await this.getAll('orders');\n  }\n\n  // Store prescriptions\n  async storePrescription(prescription: any): Promise<void> {\n    await this.set('prescriptions', prescription.id, prescription);\n  }\n\n  async getStoredPrescriptions(): Promise<any[]> {\n    return await this.getAll('prescriptions');\n  }\n}\n\nexport const offlineStorage = new OfflineStorage();\n\n// Initialize storage when the module is imported\nofflineStorage.init().catch(console.error);\n","size_bytes":5570},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/application-status.tsx":{"content":"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, FileText, Clock, CheckCircle, XCircle, AlertCircle, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\nexport default function ApplicationStatus() {\n  const [, setLocation] = useLocation();\n  const { user, refetch: refetchUser } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCancelConfirm, setShowCancelConfirm] = useState(false);\n\n  // Get applied pharmacy info if user has applied\n  const { data: pharmacy, isLoading: pharmacyLoading } = useQuery({\n    queryKey: ['/api/pharmacies', user?.appliedPharmacyId],\n    enabled: !!user?.appliedPharmacyId,\n    queryFn: async () => {\n      const response = await fetch(`/api/pharmacies/${user.appliedPharmacyId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch pharmacy');\n      }\n      return response.json();\n    }\n  });\n\n  // Mutation to cancel application\n  const cancelApplicationMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/livreur/cancel-application\", \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Candidature annul√©e\",\n        description: \"Votre candidature a √©t√© annul√©e avec succ√®s. Vous pouvez maintenant postuler ailleurs.\",\n      });\n      // Refresh user data\n      refetchUser();\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setShowCancelConfirm(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'annuler la candidature\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  if (!user || user.role !== 'livreur') {\n    setLocation('/');\n    return null;\n  }\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return {\n          label: 'En attente de validation',\n          color: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n          icon: <Clock className=\"h-4 w-4\" />,\n          description: 'Votre candidature est en cours d\\'examen par la pharmacie.'\n        };\n      case 'approved':\n        return {\n          label: 'Candidature accept√©e',\n          color: 'bg-green-100 text-green-800 border-green-200',\n          icon: <CheckCircle className=\"h-4 w-4\" />,\n          description: 'F√©licitations ! Votre candidature a √©t√© accept√©e. Vous pouvez maintenant acc√©der √† votre tableau de bord.'\n        };\n      case 'rejected':\n        return {\n          label: 'Candidature non retenue',\n          color: 'bg-red-100 text-red-800 border-red-200',\n          icon: <XCircle className=\"h-4 w-4\" />,\n          description: 'Votre candidature n\\'a pas √©t√© retenue cette fois. Vous pouvez postuler √† une autre pharmacie.'\n        };\n      default:\n        return {\n          label: 'Aucune candidature',\n          color: 'bg-gray-100 text-gray-800 border-gray-200',\n          icon: <AlertCircle className=\"h-4 w-4\" />,\n          description: 'Vous n\\'avez pas encore postul√© pour une pharmacie.'\n        };\n    }\n  };\n\n  const statusInfo = getStatusInfo(user.deliveryApplicationStatus || 'none');\n  const hasActiveApplication = user.appliedPharmacyId && user.deliveryApplicationStatus === 'pending';\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 p-4\">\n        <div className=\"max-w-md mx-auto flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/pharmacies')}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div className=\"flex-1\">\n            <h1 className=\"text-lg font-semibold text-gray-900\">√âtat de ma candidature</h1>\n            <p className=\"text-sm text-gray-600\">Suivi de votre demande</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-md mx-auto p-4 space-y-4\">\n        {/* Status Card */}\n        <Card className=\"border-l-4 border-l-pharma-green\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Statut de la candidature</CardTitle>\n              <Badge className={`flex items-center space-x-1 ${statusInfo.color}`}>\n                {statusInfo.icon}\n                <span>{statusInfo.label}</span>\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              {statusInfo.description}\n            </p>\n\n            {/* Pharmacy Info if applied */}\n            {pharmacy && user.appliedPharmacyId && !pharmacyLoading && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-blue-800 mb-2 flex items-center\">\n                  üè• Pharmacie concern√©e\n                </h4>\n                <p className=\"text-sm text-blue-700\">\n                  <strong>Nom:</strong> {pharmacy.name}\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  <strong>Adresse:</strong> {pharmacy.address}\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  <strong>T√©l√©phone:</strong> {pharmacy.phone}\n                </p>\n              </div>\n            )}\n\n            {pharmacyLoading && user.appliedPharmacyId && (\n              <div className=\"bg-blue-50 p-4 rounded-lg animate-pulse\">\n                <div className=\"h-4 bg-blue-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-blue-200 rounded mb-1\"></div>\n                <div className=\"h-3 bg-blue-200 rounded\"></div>\n              </div>\n            )}\n\n            {/* User application info */}\n            {(user.deliveryApplicationStatus === 'pending' || user.appliedPharmacyId) && (\n              <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-yellow-800 mb-2 flex items-center\">\n                  <FileText className=\"h-4 w-4 mr-1\" />\n                  Informations de candidature\n                </h4>\n                <div className=\"space-y-2 text-sm text-yellow-700\">\n                  <p><strong>Candidature envoy√©e:</strong> {user.createdAt ? new Date(user.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'}</p>\n                  <p><strong>Statut:</strong> {user.deliveryApplicationStatus || 'En attente'}</p>\n                  {user.appliedPharmacyId && (\n                    <p><strong>Pharmacie vis√©e:</strong> {pharmacy?.name || 'Chargement...'}</p>\n                  )}\n                  <p><strong>Documents fournis:</strong></p>\n                  <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                    {user.idDocumentUrl && <li>Carte d'identit√© ‚úì</li>}\n                    {user.drivingLicenseUrl && <li>Permis de conduire ‚úì</li>}\n                    {user.professionalDocumentUrl && <li>CV ‚úì</li>}\n                  </ul>\n                </div>\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\"space-y-2\">\n              {user.deliveryApplicationStatus === 'approved' && (\n                <Button\n                  onClick={() => setLocation('/dashboard-livreur')}\n                  className=\"w-full bg-green-600 hover:bg-green-700\"\n                >\n                  Acc√©der au tableau de bord üöÄ\n                </Button>\n              )}\n\n              {user.deliveryApplicationStatus === 'rejected' && (\n                <Button\n                  onClick={() => setLocation('/pharmacies')}\n                  className=\"w-full bg-pharma-green hover:bg-pharma-green/90\"\n                >\n                  Postuler √† une autre pharmacie\n                </Button>\n              )}\n\n              {user.deliveryApplicationStatus === 'pending' && (\n                <>\n                  <div className=\"text-center text-sm text-gray-500 p-4 border rounded-lg bg-gray-50\">\n                    <Clock className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                    <p>Candidature en cours d'examen...</p>\n                    <p className=\"text-xs mt-1\">La pharmacie vous contactera sous 24-48h</p>\n                  </div>\n                  \n                  {/* Cancel Application Button */}\n                  {hasActiveApplication && (\n                    <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                      <p className=\"text-sm text-red-600 mb-3\">\n                        Vous souhaitez annuler votre candidature et postuler ailleurs ?\n                      </p>\n                      {!showCancelConfirm ? (\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setShowCancelConfirm(true)}\n                          className=\"w-full border-red-300 text-red-600 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Annuler ma candidature\n                        </Button>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-xs text-red-700 font-medium\">\n                            √ätes-vous s√ªr ? Cette action est irr√©versible.\n                          </p>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setShowCancelConfirm(false)}\n                              className=\"flex-1\"\n                            >\n                              Annuler\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => cancelApplicationMutation.mutate()}\n                              disabled={cancelApplicationMutation.isPending}\n                              className=\"flex-1 bg-red-600 hover:bg-red-700\"\n                            >\n                              {cancelApplicationMutation.isPending ? 'Annulation...' : 'Confirmer'}\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </>\n              )}\n\n              {!user.appliedPharmacyId && (\n                <Button\n                  onClick={() => setLocation('/pharmacies')}\n                  className=\"w-full bg-pharma-green hover:bg-pharma-green/90\"\n                >\n                  Postuler maintenant\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Timeline Card for pending applications */}\n        {user.deliveryApplicationStatus === 'pending' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Processus de validation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-green-700\">Candidature envoy√©e</p>\n                    <p className=\"text-sm text-gray-600\">Documents re√ßus par la pharmacie</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center animate-pulse\">\n                    <Clock className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-yellow-700\">Examen en cours</p>\n                    <p className=\"text-sm text-gray-600\">La pharmacie examine votre candidature</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center\">\n                    <AlertCircle className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-500\">D√©cision finale</p>\n                    <p className=\"text-sm text-gray-600\">Vous serez notifi√© du r√©sultat</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13260},"client/src/pages/camera.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { captureFromCamera } from \"@/lib/camera\";\n\nexport default function Camera() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [isFlashOn, setIsFlashOn] = useState(false);\n\n  useEffect(() => {\n    startCamera();\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const startCamera = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' },\n        audio: false\n      });\n      setStream(mediaStream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Erreur de cam√©ra\",\n        description: \"Impossible d'acc√©der √† la cam√©ra\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const uploadPrescriptionMutation = useMutation({\n    mutationFn: async (imageBlob: Blob) => {\n      const formData = new FormData();\n      formData.append('prescription', imageBlob, 'prescription.jpg');\n      return apiRequest('/api/prescriptions', 'POST', formData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Photo captur√©e\",\n        description: \"Photo sauvegard√©e avec succ√®s\",\n      });\n      // Ne pas rediriger automatiquement - laisser l'utilisateur continuer\n      goBack();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'enregistrer la photo\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const capturePhoto = async () => {\n    if (!videoRef.current) return;\n    \n    try {\n      const imageBlob = await captureFromCamera(videoRef.current);\n      uploadPrescriptionMutation.mutate(imageBlob);\n    } catch (error) {\n      toast({\n        title: \"Erreur de capture\",\n        description: \"Impossible de prendre la photo\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleFlash = () => {\n    setIsFlashOn(!isFlashOn);\n    // Note: Flash control is limited in web browsers\n    // This would typically require native app functionality\n  };\n\n  const goBack = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black relative\">\n      {/* Header */}\n      <div className=\"absolute top-0 left-0 right-0 z-10 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10 bg-black/30 backdrop-blur-sm rounded-full text-white hover:bg-black/50\"\n            data-testid=\"button-back\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          <h2 className=\"text-white font-semibold\" data-testid=\"text-camera-title\">\n            Scanner l'ordonnance\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleFlash}\n            className={`w-10 h-10 backdrop-blur-sm rounded-full text-white hover:bg-white/30 ${isFlashOn ? 'bg-white/30' : 'bg-black/30'}`}\n            data-testid=\"button-flash\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n        </div>\n      </div>\n\n      {/* Camera Preview */}\n      <div className=\"h-screen bg-gray-900 flex items-center justify-center\">\n        {stream ? (\n          <video\n            ref={videoRef}\n            autoPlay\n            playsInline\n            className=\"w-full h-full object-cover\"\n            data-testid=\"video-camera-preview\"\n          />\n        ) : (\n          <div className=\"text-center text-white\">\n            <svg className=\"w-16 h-16 mx-auto mb-4 opacity-50\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n            </svg>\n            <p className=\"text-lg font-medium mb-2\">Cam√©ra en cours de chargement...</p>\n            <p className=\"text-white/70 text-sm\">Pr√©paration de la capture</p>\n          </div>\n        )}\n      </div>\n\n      {/* Camera Overlay Guide */}\n      <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n        <div className=\"w-80 h-60 border-4 border-white rounded-2xl border-dashed opacity-50\"></div>\n      </div>\n\n      {/* Bottom Controls */}\n      <div className=\"absolute bottom-0 left-0 right-0 p-6\">\n        <div className=\"flex items-center justify-center space-x-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"w-14 h-14 bg-white/20 backdrop-blur-sm rounded-full text-white hover:bg-white/30\"\n            data-testid=\"button-gallery\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          \n          <Button\n            onClick={capturePhoto}\n            disabled={uploadPrescriptionMutation.isPending}\n            className=\"w-20 h-20 bg-white rounded-full hover:bg-gray-100 shadow-lg\"\n            data-testid=\"button-capture\"\n          >\n            <div className=\"w-16 h-16 bg-pharma-green rounded-full flex items-center justify-center\">\n              {uploadPrescriptionMutation.isPending ? (\n                <div className=\"w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n              ) : (\n                <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n                </svg>\n              )}\n            </div>\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"w-14 h-14 bg-white/20 backdrop-blur-sm rounded-full text-white hover:bg-white/30\"\n            data-testid=\"button-switch-camera\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" />\n            </svg>\n          </Button>\n        </div>\n        <p className=\"text-white text-center mt-4 text-sm\" data-testid=\"text-camera-instruction\">\n          Positionnez l'ordonnance dans le cadre\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7744},"client/src/pages/create-pharmacy.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, MapPin, Phone, Clock } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function CreatePharmacy() {\n  const [location, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [pharmacyData, setPharmacyData] = useState({\n    name: `Pharmacie ${user?.firstName} ${user?.lastName}`,\n    address: user?.address || 'Abidjan, C√¥te d\\'Ivoire',\n    phone: user?.phone || '',\n    deliveryTime: '30'\n  });\n\n  const createPharmacyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // First create the pharmacy\n      const pharmacyResponse = await apiRequest('/api/pharmacies', 'POST', {\n        name: data.name,\n        address: data.address,\n        phone: data.phone,\n        deliveryTime: data.deliveryTime,\n        latitude: 5.2893 + (Math.random() - 0.5) * 0.1,\n        longitude: -3.9882 + (Math.random() - 0.5) * 0.1,\n        rating: 4.5,\n        isOpen: true,\n        isEmergency24h: false\n      });\n      \n      if (!pharmacyResponse.ok) {\n        const errorData = await pharmacyResponse.json();\n        throw new Error(errorData.message || 'Erreur lors de la cr√©ation de la pharmacie');\n      }\n      \n      const pharmacy = await pharmacyResponse.json();\n      return pharmacy;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pharmacies/my-pharmacy'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      toast({ \n        title: \"Pharmacie cr√©√©e\", \n        description: \"Votre pharmacie a √©t√© cr√©√©e avec succ√®s.\" \n      });\n      navigate('/pharmacy-profile');\n    },\n    onError: (error) => {\n      console.error('Error creating pharmacy:', error);\n      toast({ \n        title: \"Erreur\", \n        description: \"Impossible de cr√©er la pharmacie. Veuillez r√©essayer.\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!pharmacyData.name || !pharmacyData.address || !pharmacyData.phone) {\n      toast({\n        title: \"Champs requis\",\n        description: \"Veuillez remplir tous les champs obligatoires.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    createPharmacyMutation.mutate(pharmacyData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white border-b sticky top-0 z-10\">\n        <div className=\"max-w-4xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate('/dashboard-pharmacien')}\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold\">Cr√©er votre Pharmacie</h1>\n              <p className=\"text-sm text-gray-600\">Configurez les informations de votre √©tablissement</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-2xl mx-auto p-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5 text-blue-600\" />\n              Informations de la Pharmacie\n            </CardTitle>\n            <CardDescription>\n              Renseignez les d√©tails de votre pharmacie pour que les patients puissent vous trouver\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\" className=\"text-sm font-medium\">\n                  Nom de la pharmacie *\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={pharmacyData.name}\n                  onChange={(e) => setPharmacyData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Ex: Pharmacie de la Paix\"\n                  className=\"w-full\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\" className=\"text-sm font-medium\">\n                  Adresse compl√®te *\n                </Label>\n                <Textarea\n                  id=\"address\"\n                  value={pharmacyData.address}\n                  onChange={(e) => setPharmacyData(prev => ({ ...prev, address: e.target.value }))}\n                  placeholder=\"Ex: Boulevard de la Paix, Cocody, Abidjan\"\n                  className=\"w-full\"\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-sm font-medium\">\n                  Num√©ro de t√©l√©phone *\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={pharmacyData.phone}\n                  onChange={(e) => setPharmacyData(prev => ({ ...prev, phone: e.target.value }))}\n                  placeholder=\"Ex: +225 27 22 44 55 66\"\n                  className=\"w-full\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"deliveryTime\" className=\"text-sm font-medium\">\n                  Temps de livraison estim√© (minutes)\n                </Label>\n                <Input\n                  id=\"deliveryTime\"\n                  type=\"number\"\n                  value={pharmacyData.deliveryTime}\n                  onChange={(e) => setPharmacyData(prev => ({ ...prev, deliveryTime: e.target.value }))}\n                  placeholder=\"30\"\n                  min=\"10\"\n                  max=\"120\"\n                  className=\"w-full\"\n                />\n                <p className=\"text-xs text-gray-500\">\n                  Temps moyen de pr√©paration et livraison de vos commandes\n                </p>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Clock className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-blue-900 mb-1\">Configuration initiale</h4>\n                    <p className=\"text-sm text-blue-700\">\n                      Votre pharmacie sera cr√©√©e avec les param√®tres de base. Vous pourrez configurer les horaires d'ouverture, \n                      les frais de livraison et autres d√©tails directement depuis votre tableau de bord apr√®s la cr√©ation.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => navigate('/dashboard-pharmacien')}\n                  className=\"flex-1\"\n                >\n                  Annuler\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createPharmacyMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {createPharmacyMutation.isPending ? 'Cr√©ation...' : 'Cr√©er ma pharmacie'}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8050},"client/src/pages/dashboard-admin.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { BarChart3, Users, Package, MapPin, Settings, User, TrendingUp, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function DashboardAdmin() {\n  const { user } = useAuth();\n\n  // Utiliser les vraies donn√©es depuis l'API\n  const { data: appStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  const { data: allOrders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/admin/orders\"],\n  });\n\n  const { data: allPharmacies, isLoading: pharmaciesLoading } = useQuery({\n    queryKey: [\"/api/admin/pharmacies\"],\n  });\n\n  const { data: weeklyStats } = useQuery({\n    queryKey: [\"/api/admin/weekly-stats\", new Date()],\n  });\n\n  const [recentActivity] = useState([\n    {\n      id: 1,\n      type: \"new_user\",\n      message: \"Nouveau patient inscrit\",\n      time: \"Il y a 5 min\",\n      severity: \"info\"\n    },\n    {\n      id: 2,\n      type: \"order_issue\",\n      message: \"Probl√®me de livraison signal√©\",\n      time: \"Il y a 12 min\",\n      severity: \"warning\"\n    },\n    {\n      id: 3,\n      type: \"pharmacy_join\",\n      message: \"Nouvelle pharmacie ajout√©e\",\n      time: \"Il y a 1h\",\n      severity: \"success\"\n    },\n    {\n      id: 4,\n      type: \"delivery_issue\",\n      message: \"Livreur non disponible\",\n      time: \"Il y a 2h\",\n      severity: \"error\"\n    }\n  ]);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"error\": return \"bg-red-100 text-red-800\";\n      case \"warning\": return \"bg-yellow-100 text-yellow-800\";\n      case \"success\": return \"bg-green-100 text-green-800\";\n      case \"info\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getSeverityIcon = (type: string) => {\n    switch (type) {\n      case \"order_issue\":\n      case \"delivery_issue\":\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case \"new_user\":\n      case \"pharmacy_join\":\n        return <TrendingUp className=\"h-4 w-4\" />;\n      default:\n        return <Package className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Calculer les statistiques r√©elles\n  const validatedOrders = allOrders?.filter((order: any) => \n    order.status === 'confirmed' || order.status === 'ready_for_delivery' || \n    order.status === 'in_delivery' || order.status === 'delivered'\n  ) || [];\n  \n  const activeOrders = allOrders?.filter((order: any) => \n    order.status === 'confirmed' || order.status === 'ready_for_delivery' || order.status === 'in_delivery'\n  ) || [];\n\n  const totalWeeklyRevenue = weeklyStats?.totalRevenue || 0;\n  const activePharmacies = allPharmacies?.filter((pharmacy: any) => pharmacy.isOpen) || [];\n\n  if (statsLoading || ordersLoading || pharmaciesLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Chargement des donn√©es administrateur...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-20\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-indigo-600 to-indigo-700 text-white p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">YahoPharma+ Administration</h1>\n            <p className=\"text-indigo-100\">Tableau de bord - {user?.firstName}</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-settings\">\n              <Settings className=\"h-6 w-6\" />\n            </Button>\n            <Link href=\"/profile\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-profile\">\n                <User className=\"h-6 w-6\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {/* Statistiques g√©n√©rales avec vraies donn√©es */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mb-6\">\n          <Card data-testid=\"card-stats-users\">\n            <CardContent className=\"p-4 text-center\">\n              <Users className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {(appStats?.patients + appStats?.pharmaciens + appStats?.livreurs) || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Utilisateurs</div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-stats-orders\">\n            <CardContent className=\"p-4 text-center\">\n              <Package className=\"h-6 w-6 text-orange-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-orange-600\">{activeOrders.length}</div>\n              <div className=\"text-sm text-gray-600\">Commandes actives</div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-stats-pharmacies\">\n            <CardContent className=\"p-4 text-center\">\n              <MapPin className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-green-600\">{activePharmacies.length}</div>\n              <div className=\"text-sm text-gray-600\">Pharmacies actives</div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-stats-deliverers\">\n            <CardContent className=\"p-4 text-center\">\n              <Users className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-purple-600\">{appStats?.livreurs || 0}</div>\n              <div className=\"text-sm text-gray-600\">Livreurs</div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-stats-revenue\">\n            <CardContent className=\"p-4 text-center\">\n              <BarChart3 className=\"h-6 w-6 text-indigo-600 mx-auto mb-2\" />\n              <div className=\"text-xl font-bold text-indigo-600\">{totalWeeklyRevenue.toLocaleString()}</div>\n              <div className=\"text-sm text-gray-600\">FCFA cette semaine</div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-stats-growth\">\n            <CardContent className=\"p-4 text-center\">\n              <TrendingUp className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n              <div className=\"text-xl font-bold text-green-600\">{validatedOrders.length}</div>\n              <div className=\"text-sm text-gray-600\">Commandes valid√©es</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n              Vue d'ensemble\n            </TabsTrigger>\n            <TabsTrigger value=\"pharmacies\" data-testid=\"tab-pharmacies\">\n              Pharmacies\n            </TabsTrigger>\n            <TabsTrigger value=\"deliverers\" data-testid=\"tab-deliverers\">\n              Livreurs\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" data-testid=\"tab-activity\">\n              Activit√©\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <Card data-testid=\"card-daily-overview\">\n                <CardHeader>\n                  <CardTitle>R√©sum√© du jour</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span>Nouvelles commandes</span>\n                    <span className=\"font-semibold\">{appStats?.pendingOrders || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Commandes livr√©es</span>\n                    <span className=\"font-semibold text-green-600\">{appStats?.completedDeliveries || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Livraisons en cours</span>\n                    <span className=\"font-semibold text-blue-600\">{appStats?.activeDeliveries || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total commandes</span>\n                    <span className=\"font-semibold\">{appStats?.orders || 0}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-alerts\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n                    Alertes syst√®me\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {appStats?.pendingOrders > 0 && (\n                    <div className=\"p-2 bg-yellow-50 border border-yellow-200 rounded text-sm\">\n                      {appStats.pendingOrders} commandes en attente de validation\n                    </div>\n                  )}\n                  {allPharmacies?.filter((p: any) => !p.isOpen).length > 0 && (\n                    <div className=\"p-2 bg-red-50 border border-red-200 rounded text-sm\">\n                      {allPharmacies.filter((p: any) => !p.isOpen).length} pharmacies ferm√©es\n                    </div>\n                  )}\n                  {appStats?.livreurs === 0 && (\n                    <div className=\"p-2 bg-red-50 border border-red-200 rounded text-sm\">\n                      Aucun livreur disponible\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"pharmacies\" className=\"space-y-4\">\n            <Card data-testid=\"card-top-pharmacies\">\n              <CardHeader>\n                <CardTitle>Pharmacies ({allPharmacies?.length || 0})</CardTitle>\n                <CardDescription>√âtat des pharmacies</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {allPharmacies?.slice(0, 5).map((pharmacy: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                      <div>\n                        <h4 className=\"font-medium\">{pharmacy.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{pharmacy.address}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant={pharmacy.isOpen ? \"default\" : \"secondary\"}>\n                          {pharmacy.isOpen ? \"Ouverte\" : \"Ferm√©e\"}\n                        </Badge>\n                      </div>\n                    </div>\n                  )) || (\n                    <p className=\"text-gray-500 text-center py-4\">Aucune pharmacie enregistr√©e</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"deliverers\" className=\"space-y-4\">\n            <Card data-testid=\"card-top-deliverers\">\n              <CardHeader>\n                <CardTitle>Livreurs ({appStats?.livreurs || 0})</CardTitle>\n                <CardDescription>√âtat des livreurs</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div className=\"p-3 bg-blue-50 rounded\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{appStats?.livreurs || 0}</div>\n                      <div className=\"text-sm text-gray-600\">Total livreurs</div>\n                    </div>\n                    <div className=\"p-3 bg-green-50 rounded\">\n                      <div className=\"text-2xl font-bold text-green-600\">{appStats?.activeDeliveries || 0}</div>\n                      <div className=\"text-sm text-gray-600\">En livraison</div>\n                    </div>\n                    <div className=\"p-3 bg-gray-50 rounded\">\n                      <div className=\"text-2xl font-bold text-gray-600\">\n                        {Math.max(0, (appStats?.livreurs || 0) - (appStats?.activeDeliveries || 0))}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Disponibles</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"activity\" className=\"space-y-4\">\n            <Card data-testid=\"card-recent-activity\">\n              <CardHeader>\n                <CardTitle>Activit√© r√©cente</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {recentActivity.map((activity) => (\n                    <div key={activity.id} className=\"flex items-start gap-3 p-3 border border-gray-100 rounded\">\n                      <div className={`p-1 rounded ${getSeverityColor(activity.severity)}`}>\n                        {getSeverityIcon(activity.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">{activity.message}</p>\n                        <p className=\"text-xs text-gray-500\">{activity.time}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14170},"client/src/pages/dashboard-livreur.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { useOrderNotifications } from \"@/hooks/useOrderNotifications\";\n\n// Composant Timer pour les commandes en attente d'acceptation\nfunction AssignmentTimer({ assignedAt, onExpired }: { assignedAt: string, onExpired: () => void }) {\n  const [timeLeft, setTimeLeft] = useState<number>(0);\n  const [hasExpired, setHasExpired] = useState<boolean>(false);\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      const assignedTime = new Date(assignedAt).getTime();\n      const now = new Date().getTime();\n      const diff = (assignedTime + 3 * 60 * 1000) - now; // 3 minutes en millisecondes\n      return Math.max(0, Math.floor(diff / 1000));\n    };\n\n    setTimeLeft(calculateTimeLeft());\n\n    const timer = setInterval(() => {\n      const newTimeLeft = calculateTimeLeft();\n      setTimeLeft(newTimeLeft);\n\n      if (newTimeLeft <= 0 && !hasExpired) {\n        setHasExpired(true);\n        onExpired();\n        clearInterval(timer);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [assignedAt, onExpired, hasExpired]);\n\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n\n  return (\n    <div className=\"flex items-center gap-2 text-orange-600\">\n      <Clock className=\"h-4 w-4\" />\n      <span className=\"font-mono\">\n        {minutes}:{seconds.toString().padStart(2, '0')}\n      </span>\n    </div>\n  );\n}\n\nexport default function DashboardLivreur() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"my-deliveries\");\n  const [isAvailable, setIsAvailable] = useState(true);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [expiredAssignments, setExpiredAssignments] = useState<Set<string>>(new Set());\n  const [isLocationSharing, setIsLocationSharing] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<{lat: number, lng: number} | null>(null);\n\n\n  // Syst√®me de notifications sonores pour le livreur\n  const {\n    isNotificationsEnabled,\n    permissionStatus,\n    requestNotificationPermission,\n    notifyOrderStatusChange,\n    playNotificationSound,\n    testNotification\n  } = useOrderNotifications();\n\n  // Fonction pour tester tous les sons\n  const testAllSounds = async () => {\n    const sounds = ['pending', 'confirmed', 'preparing', 'ready_for_delivery', 'in_transit', 'in_delivery', 'delivered', 'cancelled'];\n    for (const sound of sounds) {\n      await playSound(sound as any);\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Attendre 1 seconde entre chaque son\n    }\n  };\n\n  // √âtat pour tracker les statuts pr√©c√©dents des livraisons\n  const [previousDeliveryStatuses, setPreviousDeliveryStatuses] = useState<Record<string, string>>({});\n\n  // Rediriger si le livreur n'a pas encore de pharmacie assign√©e\n  if (user?.role === 'livreur' && user?.deliveryApplicationStatus !== 'approved') {\n    window.location.href = '/delivery-application';\n    return null;\n  }\n\n  // R√©cup√©rer les commandes assign√©es √† ce livreur (incluant celles en attente d'acceptation)\n  const { data: myDeliveries = [], isLoading: loadingMyDeliveries } = useQuery({\n    queryKey: [\"/api/livreur/deliveries\"],\n    enabled: true,\n    refetchInterval: 5000, // Rafra√Æchir toutes les 5 secondes pour le timeout\n  });\n\n  // R√©cup√©rer les notifications\n  const { data: notifications = [] } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    enabled: true\n  });\n\n  // Mutation pour accepter une livraison assign√©e\n  const acceptAssignmentMutation = useMutation({\n    mutationFn: (orderId: string) =>\n      apiRequest(`/api/livreur/deliveries/${orderId}/accept`, \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Livraison accept√©e\",\n        description: \"Vous pouvez maintenant effectuer cette livraison\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/livreur/deliveries\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error?.message || \"Impossible d'accepter cette livraison\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour rejeter une livraison assign√©e\n  const rejectAssignmentMutation = useMutation({\n    mutationFn: (orderId: string) =>\n      apiRequest(`/api/livreur/deliveries/${orderId}/reject`, \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Livraison refus√©e\",\n        description: \"La livraison sera r√©assign√©e √† un autre livreur\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/livreur/deliveries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de refuser cette livraison\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour accepter une livraison disponible\n  const acceptDeliveryMutation = useMutation({\n    mutationFn: (deliveryId: string) =>\n      apiRequest(`/api/deliveries/${deliveryId}/accept`, \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Livraison accept√©e\",\n        description: \"Vous pouvez maintenant commencer la livraison\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/deliveries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'accepter la livraison\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour confirmer l'arriv√©e\n  const confirmArrivalMutation = useMutation({\n    mutationFn: (deliveryId: string) =>\n      apiRequest(`/api/livreur/deliveries/${deliveryId}/status`, \"POST\", { status: 'arrived_pending_confirmation' }),\n    onSuccess: () => {\n      toast({\n        title: \"Arriv√©e confirm√©e\",\n        description: \"Le patient sera notifi√© de votre arriv√©e\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/livreur/deliveries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de confirmer l'arriv√©e\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  // Mutation pour mettre √† jour le statut d'une livraison\n  const updateDeliveryMutation = useMutation({\n    mutationFn: ({ orderId, status }: { orderId: string; status: string }) =>\n      apiRequest(`/api/livreur/deliveries/${orderId}/status`, \"POST\", { status }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Statut mis √† jour\",\n        description: variables.status === 'delivered' ? \"Livraison termin√©e avec succ√®s !\" : \"Le statut de la livraison a √©t√© mis √† jour\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/livreur/deliveries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre √† jour le statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour mettre √† jour la position GPS\n  const updateLocationMutation = useMutation({\n    mutationFn: async ({ latitude, longitude }: { latitude: number, longitude: number }) => {\n      const response = await apiRequest('/api/livreur/update-location', 'POST', {\n        latitude,\n        longitude\n      });\n      return response.json();\n    },\n    onError: (error: any) => {\n      console.error('Erreur de mise √† jour GPS:', error);\n    }\n  });\n\n  // G√©olocalisation automatique pour les livreurs\n  useEffect(() => {\n    let watchId: number | null = null;\n\n    const startLocationSharing = () => {\n      if (navigator.geolocation) {\n        setIsLocationSharing(true);\n\n        // Configuration des options de g√©olocalisation\n        const options = {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 0\n        };\n\n        // Suivi en temps r√©el de la position\n        watchId = navigator.geolocation.watchPosition(\n          (position) => {\n            const { latitude, longitude } = position.coords;\n\n            setCurrentLocation({ lat: latitude, lng: longitude });\n\n            // Mettre √† jour la position en base de donn√©es\n            updateLocationMutation.mutate({ latitude, longitude });\n\n            if (import.meta.env.DEV) {\n              console.log('üìç Position GPS livreur mise √† jour:', {\n                lat: latitude,\n                lng: longitude,\n                accuracy: position.coords.accuracy\n              });\n            }\n          },\n          (error) => {\n            console.error('Erreur de g√©olocalisation:', error);\n            setIsLocationSharing(false);\n            toast({\n              title: \"Erreur GPS\",\n              description: \"Impossible d'obtenir votre position. V√©rifiez les autorisations.\",\n              variant: \"destructive\",\n            });\n          },\n          options\n        );\n      } else {\n        toast({\n          title: \"GPS non support√©\",\n          description: \"Votre appareil ne supporte pas la g√©olocalisation.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    // D√©marrer automatiquement le partage de localisation pour les livreurs\n    if (user?.role === 'livreur') {\n      startLocationSharing();\n    }\n\n    // Nettoyage\n    return () => {\n      if (watchId !== null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [user?.role, updateLocationMutation]);\n\n\n  const handleAcceptDelivery = (orderId: string) => {\n    acceptDeliveryMutation.mutate(orderId);\n  };\n\n  const handleUpdateDeliveryStatus = (orderId: string, status: string) => {\n    updateDeliveryMutation.mutate({ orderId, status });\n  };\n\n  // Surveillance des changements de statut pour d√©clencher les notifications sonores pour livreurs\n  useEffect(() => {\n    if (myDeliveries && Array.isArray(myDeliveries)) {\n      myDeliveries.forEach((delivery: any) => {\n        const currentStatus = delivery.status;\n        const previousStatus = previousDeliveryStatuses[delivery.id];\n\n        // Si le statut a chang√© et qu'on a les notifications activ√©es\n        if (previousStatus && previousStatus !== currentStatus) {\n          console.log(`üîÑ Changement de statut livraison d√©tect√©: ${previousStatus} ‚Üí ${currentStatus} pour ${delivery.id.slice(0, 8)}`);\n\n          // Jouer le son directement dans l'application\n          playNotificationSound(currentStatus).catch(error => {\n            console.error('Erreur lecture son dans l\\'app:', error);\n          });\n\n          // D√©clencher notification syst√®me (sans son personnalis√©)\n          notifyOrderStatusChange(delivery.id, currentStatus, false);\n\n          // Notifications toast sp√©cifiques aux livreurs\n          const deliveryStatusMessages: Record<string, string> = {\n            assigned_pending_acceptance: \"üì¶ Nouvelle livraison assign√©e - Veuillez accepter\",\n            in_transit: \"üöö Livraison accept√©e - Vous pouvez commencer\",\n            arrived_pending_confirmation: \"üìç Arriv√©e confirm√©e - En attente du patient\",\n            delivered: \"‚úÖ Livraison termin√©e avec succ√®s !\",\n            cancelled: \"‚ùå Livraison annul√©e\"\n          };\n\n          if (deliveryStatusMessages[currentStatus]) {\n            toast({\n              title: \"Mise √† jour de livraison\",\n              description: deliveryStatusMessages[currentStatus],\n              duration: currentStatus === 'assigned_pending_acceptance' ? 10000 : 5000, // Plus longue pour nouvelles assignations\n            });\n          }\n        }\n\n        // Mettre √† jour le statut pr√©c√©dent\n        setPreviousDeliveryStatuses(prev => ({\n          ...prev,\n          [delivery.id]: currentStatus\n        }));\n      });\n    }\n  }, [myDeliveries, previousDeliveryStatuses, notifyOrderStatusChange, toast, playNotificationSound]);\n\n  // Initialiser les notifications au premier chargement pour les livreurs\n  useEffect(() => {\n    if (!isNotificationsEnabled && permissionStatus === 'default') {\n      const timer = setTimeout(() => {\n        toast({\n          title: \"üîî Notifications livreur\",\n          description: \"Activez les notifications pour √™tre averti des nouvelles livraisons m√™me quand l'app est ferm√©e\",\n          action: (\n            <Button size=\"sm\" onClick={requestNotificationPermission}>\n              Activer\n            </Button>\n          ),\n          duration: 10000,\n        });\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isNotificationsEnabled, permissionStatus, requestNotificationPermission, toast]);\n\n  if (loadingMyDeliveries) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6 pb-24\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-blue-600 mb-2\">\n                üöö Tableau de bord Livreur\n              </h1>\n              <p className=\"text-gray-600\">\n                Bienvenue {user?.firstName} ! G√©rez vos livraisons\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* R√©sum√© des notifications */}\n        {Array.isArray(notifications) && notifications.length > 0 && (\n          <Card className=\"mb-6 bg-purple-50 border-purple-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                  üîî\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-purple-800\">Nouvelles notifications</h3>\n                  <p className=\"text-sm text-purple-600\">\n                    {Array.isArray(notifications) ? notifications.filter((n: any) => !n.isRead).length : 0} nouvelles notifications\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Statut de Disponibilit√© */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                  isAvailable ? 'bg-green-100' : 'bg-gray-100'\n                }`}>\n                  {isAvailable ? 'üü¢' : 'üî¥'}\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">\n                    {isAvailable ? 'Disponible pour Livraisons' : 'Indisponible'}\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {isAvailable\n                      ? 'Vous recevrez des missions de livraison'\n                      : 'Activez pour recevoir des missions'\n                    }\n                  </p>\n                </div>\n              </div>\n              <Switch\n                checked={isAvailable}\n                onCheckedChange={setIsAvailable}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation GPS */}\n        <Card className=\"mb-6 bg-gradient-to-r from-orange-50 to-orange-100 border-orange-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                  üó∫Ô∏è\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-orange-800\">Navigation GPS</h3>\n                  <p className=\"text-sm text-orange-600\">\n                    Voir vos livraisons sur la carte avec vrais itin√©raires\n                  </p>\n                </div>\n              </div>\n              <Button\n                onClick={() => navigate(\"/delivery-map-livreur\")}\n                size=\"sm\"\n                className=\"bg-orange-600 hover:bg-orange-700\"\n              >\n                üß≠ Ouvrir GPS\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"my-deliveries\">\n              Mes Livraisons\n              {Array.isArray(myDeliveries) && myDeliveries.length > 0 && (\n                <Badge variant=\"default\" className=\"ml-2 bg-purple-600\">\n                  {myDeliveries.length}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"earnings\">Mes Gains</TabsTrigger>\n          </TabsList>\n\n          {/* Mes Livraisons Assign√©es */}\n          <TabsContent value=\"my-deliveries\" className=\"space-y-4\">\n            {!Array.isArray(myDeliveries) || myDeliveries.length === 0 ? (\n              <div className=\"border rounded-lg p-6 bg-gray-50 text-center\">\n                <div className=\"text-gray-400 text-4xl mb-2\">üì¶</div>\n                <h3 className=\"font-semibold mb-2\">Aucune livraison disponible</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Les commandes assign√©es ou disponibles appara√Ætront ici\n                </p>\n                <div className=\"mt-4 text-xs text-gray-500\">\n                  <p>Statut de connexion: {user ? 'Connect√©' : 'D√©connect√©'}</p>\n                  <p>ID utilisateur: {user?.id?.slice(0, 8)}...</p>\n                </div>\n              </div>\n            ) : (\n              Array.isArray(myDeliveries) ? myDeliveries.map((delivery: any) => (\n                <Card key={delivery.id} className=\"border-l-4 border-l-purple-500\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">\n                        Commande #{delivery.id.slice(0, 8)}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        {delivery.status === 'assigned_pending_acceptance' && delivery.assignedAt && (\n                          <AssignmentTimer\n                            assignedAt={delivery.assignedAt}\n                            onExpired={() => {\n                              // V√©rifier si cette assignation a d√©j√† expir√© pour √©viter les actions multiples\n                              if (!expiredAssignments.has(delivery.id)) {\n                                setExpiredAssignments(prev => new Set(prev).add(delivery.id));\n\n                                toast({\n                                  title: \"Assignation expir√©e\",\n                                  description: \"Rechargement automatique de la page en cours...\",\n                                  variant: \"destructive\",\n                                });\n\n                                // Rafra√Æchir la page apr√®s un court d√©lai pour permettre au toast d'appara√Ætre\n                                setTimeout(() => {\n                                  window.location.reload();\n                                }, 2000);\n                              }\n                            }}\n                          />\n                        )}\n                        <Badge variant={\n                          delivery.status === 'assigned_pending_acceptance' ? 'destructive' :\n                          delivery.status === 'in_transit' ? 'default' :\n                          delivery.status === 'delivered' ? 'secondary' :\n                          delivery.status === 'arrived_pending_confirmation' ? 'outline' : 'outline'\n                        }>\n                          {delivery.status === 'assigned_pending_acceptance' ? 'En attente d\\'acceptation' :\n                           delivery.status === 'in_transit' ? 'En livraison' :\n                           delivery.status === 'delivered' ? 'Livr√©e' :\n                           delivery.status === 'arrived_pending_confirmation' ? 'Arriv√©e en attente' : 'Assign√©e'}\n                        </Badge>\n                      </div>\n                    </div>\n                    <CardDescription>\n                      {delivery.pharmacy?.name || 'Pharmacie inconnue'}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Informations Patient */}\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-800 mb-2 flex items-center\">\n                        üë§ Information Patient\n                      </h4>\n                      <p className=\"text-sm text-blue-700\">\n                        <strong>Nom:</strong> {delivery.patient?.firstName} {delivery.patient?.lastName}\n                      </p>\n                      <p className=\"text-sm text-blue-700\">\n                        <strong>T√©l√©phone:</strong> {delivery.patient?.phone}\n                      </p>\n                    </div>\n\n                    {/* Adresse de Livraison */}\n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-green-800 mb-2 flex items-center\">\n                        üìç Adresse de Livraison\n                      </h4>\n                      <p className=\"text-sm text-green-700\">{delivery.deliveryAddress}</p>\n                    </div>\n\n                    {/* Informations de Livraison (sans d√©tails m√©dicaments) */}\n                    <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-yellow-800 mb-2 flex items-center\">\n                        üíä Livraison M√©dicaments\n                      </h4>\n                      <p className=\"text-sm text-yellow-700\">\n                        <strong>Nombre d'articles:</strong> {delivery.medications?.length || 0} m√©dicament(s)\n                      </p>\n                      <p className=\"text-sm text-yellow-700\">\n                        <strong>Type:</strong> Prescription m√©dicale confidentielle\n                      </p>\n                      <Separator className=\"my-2\" />\n                      <div className=\"flex justify-between font-bold\">\n                        <span>Montant √† collecter:</span>\n                        <span>{delivery.totalAmount || 0} FCFA</span>\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex gap-2\">\n                      {delivery.status === 'assigned_pending_acceptance' && (\n                        <>\n                          <Button\n                            onClick={() => acceptAssignmentMutation.mutate(delivery.id)}\n                            className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                            disabled={acceptAssignmentMutation.isPending || rejectAssignmentMutation.isPending}\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-2\" />\n                            Accepter\n                          </Button>\n                          <Button\n                            onClick={() => rejectAssignmentMutation.mutate(delivery.id)}\n                            variant=\"destructive\"\n                            className=\"flex-1\"\n                            disabled={acceptAssignmentMutation.isPending || rejectAssignmentMutation.isPending}\n                          >\n                            <XCircle className=\"h-4 w-4 mr-2\" />\n                            Refuser\n                          </Button>\n                        </>\n                      )}\n                      {delivery.status === 'in_transit' && (\n                        <>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-blue-700 font-medium\">\n                              üöö En route vers le client\n                            </p>\n                            <p className=\"text-sm text-blue-600 mt-1\">\n                              Livraison en cours\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              onClick={() => navigate(\"/delivery-map-livreur\")}\n                              className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                            >\n                              üó∫Ô∏è GPS\n                            </Button>\n                            <Button\n                              onClick={() => confirmArrivalMutation.mutate(delivery.id)}\n                              disabled={confirmArrivalMutation.isPending}\n                              className=\"bg-green-600 hover:bg-green-700 text-white\"\n                            >\n                              {confirmArrivalMutation.isPending ? 'Confirmation...' : 'üìç Confirmer arriv√©e'}\n                            </Button>\n                          </div>\n                        </>\n                      )}\n\n                      {delivery.status === 'arrived_pending_confirmation' && (\n                        <>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-orange-700 font-medium\">\n                              ‚è≥ Arriv√© sur place\n                            </p>\n                            <p className=\"text-sm text-orange-600 mt-1\">\n                              En attente de la confirmation du patient\n                            </p>\n                          </div>\n                          <Button\n                            onClick={() => navigate(\"/delivery-map-livreur\")}\n                            className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                          >\n                            üó∫Ô∏è GPS\n                          </Button>\n                        </>\n                      )}\n                      {(delivery.status === 'assigned_pending_acceptance' || delivery.status === 'in_transit') && delivery.status !== 'in_transit' && (\n                        <Button\n                          onClick={() => navigate(\"/delivery-map-livreur\")}\n                          variant=\"outline\"\n                          className=\"flex-1 border-orange-500 text-orange-600 hover:bg-orange-50\"\n                        >\n                          üó∫Ô∏è Voir sur GPS\n                        </Button>\n                      )}\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => setSelectedOrder(delivery)}\n                            className=\"flex-1\"\n                          >\n                            Voir D√©tails\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>D√©tails de la Commande #{delivery.id.slice(0, 8)}</DialogTitle>\n                            <DialogDescription>\n                              Informations compl√®tes de la livraison\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label>Statut</Label>\n                              <Badge className=\"ml-2\">\n                                {delivery.status === 'in_delivery' ? 'En livraison' :\n                                 delivery.status === 'delivered' ? 'Livr√©e' :\n                                 delivery.status === 'ready_for_delivery' && delivery.deliveryPersonId === user?.id ? 'Assign√©e' :\n                                 delivery.status === 'arrived_pending_confirmation' ? 'Arriv√©e en attente' : 'En attente'}\n                              </Badge>\n                            </div>\n                            <div>\n                              <Label>Patient</Label>\n                              <p>{delivery.patient?.firstName} {delivery.patient?.lastName}</p>\n                              <p className=\"text-sm text-gray-600\">{delivery.patient?.phone}</p>\n                            </div>\n                            <div>\n                              <Label>Adresse</Label>\n                              <p>{delivery.deliveryAddress}</p>\n                            </div>\n                            <div>\n                              <Label>Pharmacie</Label>\n                              <p>{delivery.pharmacy?.name}</p>\n                              <p className=\"text-sm text-gray-600\">{delivery.pharmacy?.phone}</p>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              )) : []\n            )}\n          </TabsContent>\n\n          {/* Gains */}\n          <TabsContent value=\"earnings\">\n            <Card>\n              <CardHeader>\n                <CardTitle>üí∞ Mes Gains</CardTitle>\n                <CardDescription>\n                  Historique de vos revenus de livraison\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-green-50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold text-green-800\">Gains Aujourd'hui</h4>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {Array.isArray(myDeliveries) ? myDeliveries.filter((d: any) =>\n                        d.status === 'delivered' &&\n                        new Date(d.deliveredAt || d.updatedAt).toDateString() === new Date().toDateString()\n                      ).length * 500 : 0} FCFA\n                    </p>\n                  </div>\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold text-blue-800\">Total Livraisons</h4>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {Array.isArray(myDeliveries) ? myDeliveries.filter((d: any) => d.status === 'delivered').length : 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n\n        </Tabs>\n      </div>\n\n      <BottomNavigation currentPage=\"delivery\" />\n    </div>\n  );\n}","size_bytes":31755},"client/src/pages/dashboard-patient.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useOrderNotifications } from \"@/hooks/useOrderNotifications\";\nimport { useAudioNotifications } from \"@/utils/audioGenerator\";\n\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { MapPin, Clock, Star, Phone, Camera, Upload, Plus, X, FileText } from \"lucide-react\";\n\nexport default function DashboardPatient() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location, navigate] = useLocation();\n  \n  // Hooks pour notifications sonores\n  const {\n    isNotificationsEnabled,\n    permissionStatus,\n    requestNotificationPermission,\n    notifyOrderStatusChange,\n    testNotification,\n    playNotificationSound\n  } = useOrderNotifications();\n  \n  const { playSound, testSound, testAllSounds } = useAudioNotifications();\n  const [activeTab, setActiveTab] = useState(\"orders\");\n  const [selectedPharmacy, setSelectedPharmacy] = useState<any>(null);\n  const [selectedOrderForTracking, setSelectedOrderForTracking] = useState<any>(null);\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [currentAddress, setCurrentAddress] = useState<string>(\"\");\n  const [orderData, setOrderData] = useState({\n    deliveryAddress: '',\n    medications: [{ name: '', surBon: false }],\n    pharmacyMessage: '',\n    bonDocuments: [] as File[],\n    prescriptionPhoto: null as File | null\n  });\n  const [prescriptionFile, setPrescriptionFile] = useState<File | null>(null);\n  const [selectedOrderForPayment, setSelectedOrderForPayment] = useState<any>(null);\n  const [paymentMethod, setPaymentMethod] = useState<string>('');\n  const [paymentDetails, setPaymentDetails] = useState({\n    waveNumber: '',\n    orangeNumber: '',\n    moovNumber: '',\n    momoNumber: ''\n  });\n\n  // Helper functions for medication management\n  const addMedication = () => {\n    setOrderData(prev => ({\n      ...prev,\n      medications: [...prev.medications, { name: '', surBon: false }]\n    }));\n  };\n\n  const removeMedication = (index: number) => {\n    setOrderData(prev => ({\n      ...prev,\n      medications: prev.medications.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateMedication = (index: number, field: 'name' | 'surBon', value: string | boolean) => {\n    setOrderData(prev => ({\n      ...prev,\n      medications: prev.medications.map((med, i) => \n        i === index ? { ...med, [field]: value } : med\n      )\n    }));\n  };\n\n  const handleDocumentUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setOrderData(prev => ({\n      ...prev,\n      bonDocuments: [...prev.bonDocuments, ...files]\n    }));\n  };\n\n  const removeDocument = (index: number) => {\n    setOrderData(prev => ({\n      ...prev,\n      bonDocuments: prev.bonDocuments.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handlePrescriptionPhoto = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setOrderData(prev => ({\n        ...prev,\n        prescriptionPhoto: file\n      }));\n    }\n  };\n\n  const removePrescriptionPhoto = () => {\n    setOrderData(prev => ({\n      ...prev,\n      prescriptionPhoto: null\n    }));\n  };\n\n  // G√©olocalisation automatique\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation({ lat: latitude, lng: longitude });\n\n          // Reverse geocoding pour obtenir l'adresse\n          try {\n            const response = await fetch(`/api/location/reverse?lat=${latitude}&lng=${longitude}`);\n            const addressData = await response.json();\n            setCurrentAddress(addressData.formatted_address);\n            setOrderData(prev => ({ ...prev, deliveryAddress: addressData.formatted_address }));\n          } catch (error) {\n            console.error(\"Erreur g√©olocalisation:\", error);\n          }\n        },\n        (error) => {\n          console.error(\"Erreur de g√©olocalisation:\", error);\n          toast({\n            title: \"G√©olocalisation\",\n            description: \"Impossible d'obtenir votre position. Veuillez saisir votre adresse manuellement.\",\n            variant: \"destructive\",\n          });\n        }\n      );\n    }\n  }, []);\n\n  // Mutation pour cr√©er une commande\n  const createOrderMutation = useMutation({\n    mutationFn: (orderDetails: any) =>\n      apiRequest(\"/api/orders\", \"POST\", orderDetails),\n    onSuccess: () => {\n      toast({\n        title: \"Commande cr√©√©e\",\n        description: \"Votre commande a √©t√© envoy√©e √† la pharmacie\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      setActiveTab(\"orders\");\n      setSelectedPharmacy(null);\n      setOrderData({ deliveryAddress: '', medications: [{ name: '', surBon: false }], pharmacyMessage: '', bonDocuments: [], prescriptionPhoto: null });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de cr√©er la commande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour le paiement\n  const paymentMutation = useMutation({\n    mutationFn: (paymentData: any) =>\n      apiRequest(\"/api/orders/payment\", \"POST\", paymentData),\n    onSuccess: () => {\n      toast({\n        title: \"Paiement confirm√©\",\n        description: \"Votre commande est maintenant en cours de livraison\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      setSelectedOrderForPayment(null);\n      setPaymentMethod('');\n      setPaymentDetails({ waveNumber: '', orangeNumber: '', moovNumber: '', momoNumber: '' });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur de paiement\",\n        description: \"Impossible de traiter le paiement. Veuillez r√©essayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour confirmer la livraison\n  const confirmDeliveryMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      console.log('üîÑ Tentative de confirmation de livraison pour:', orderId);\n      return await apiRequest(`/api/orders/${orderId}/confirm-delivery`, \"POST\");\n    },\n    onSuccess: (data, orderId) => {\n      console.log('‚úÖ Confirmation de livraison r√©ussie pour:', orderId);\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders/current'] });\n      toast({\n        title: \"Livraison confirm√©e\",\n        description: \"Votre commande a √©t√© marqu√©e comme livr√©e avec succ√®s\",\n      });\n    },\n    onError: (error: any, orderId) => {\n      console.error('‚ùå Erreur confirmation livraison pour:', orderId, error);\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de confirmer la livraison\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour annuler une commande\n  const cancelOrderMutation = useMutation({\n    mutationFn: (orderId: string) =>\n      apiRequest(`/api/orders/${orderId}/cancel`, \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Commande annul√©e\",\n        description: \"Votre commande a √©t√© annul√©e avec succ√®s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'annuler la commande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour supprimer d√©finitivement une commande\n  const deleteOrderMutation = useMutation({\n    mutationFn: (orderId: string) =>\n      apiRequest(`/api/orders/${orderId}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({\n        title: \"Commande supprim√©e\",\n        description: \"La commande a √©t√© supprim√©e d√©finitivement de la base de donn√©es\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders/current\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la commande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // R√©cup√©ration des donn√©es avec refetchInterval pour les donn√©es temps r√©el\n  const { data: orders, isLoading: ordersLoading } = useQuery({ \n    queryKey: [\"/api/orders\"],\n    refetchInterval: 10000 // Refresh toutes les 10 secondes\n  });\n\n  // Pharmacies tri√©es par distance si g√©olocalisation disponible\n  const { data: pharmacies, isLoading: pharmaciesLoading } = useQuery({ \n    queryKey: [\"/api/pharmacies\", userLocation],\n    queryFn: async () => {\n      const url = userLocation \n        ? `/api/pharmacies?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`\n        : `/api/pharmacies`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Erreur lors du chargement des pharmacies');\n      }\n      return response.json();\n    },\n    enabled: true\n  });\n\n  const { data: currentOrder } = useQuery({ \n    queryKey: [\"/api/orders/current\"],\n    refetchInterval: 5000 // Refresh toutes les 5 secondes pour suivi temps r√©el\n  });\n\n  // √âtat pour tracker les statuts pr√©c√©dents des commandes\n  const [previousOrderStatuses, setPreviousOrderStatuses] = useState<Record<string, string>>({});\n\n  // Surveillance des changements de statut pour d√©clencher les notifications sonores\n  useEffect(() => {\n    if (orders && Array.isArray(orders)) {\n      let hasChanges = false;\n      const newStatuses: Record<string, string> = {};\n      \n      orders.forEach((order: any) => {\n        const currentStatus = order.status;\n        const previousStatus = previousOrderStatuses[order.id];\n        \n        // Si le statut a chang√© et qu'on a les notifications activ√©es\n        if (previousStatus && previousStatus !== currentStatus) {\n          console.log(`üîÑ Changement de statut d√©tect√©: ${previousStatus} ‚Üí ${currentStatus} pour commande ${order.id.slice(0, 8)}`);\n          \n          // Jouer le son directement dans l'application\n          playSound(currentStatus).catch(error => {\n            console.error('Erreur lecture son dans l\\'app:', error);\n          });\n          \n          // D√©clencher notification syst√®me (sans son personnalis√©)\n          notifyOrderStatusChange(order.id, currentStatus, false);\n          \n          // Notification toast aussi\n          const statusMessages: Record<string, string> = {\n            confirmed: \"‚úÖ Votre commande a √©t√© confirm√©e par la pharmacie\",\n            preparing: \"üîÑ Votre commande est en cours de pr√©paration\",\n            ready_for_delivery: \"üì¶ Votre commande est pr√™te pour la livraison\",\n            in_transit: \"üöö Le livreur est en route vers vous !\",\n            in_delivery: \"üéØ Le livreur arrive bient√¥t !\",\n            delivered: \"üéâ Votre commande a √©t√© livr√©e avec succ√®s\",\n            cancelled: \"‚ùå Votre commande a √©t√© annul√©e\"\n          };\n          \n          if (statusMessages[currentStatus]) {\n            toast({\n              title: \"Mise √† jour de commande\",\n              description: statusMessages[currentStatus],\n              duration: currentStatus === 'in_transit' || currentStatus === 'in_delivery' ? 8000 : 5000,\n            });\n          }\n          \n          hasChanges = true;\n        }\n        \n        // Conserver le statut actuel pour la prochaine v√©rification\n        newStatuses[order.id] = currentStatus;\n      });\n      \n      // Mettre √† jour seulement s'il y a eu des changements ou de nouvelles commandes\n      if (hasChanges || Object.keys(newStatuses).length !== Object.keys(previousOrderStatuses).length) {\n        setPreviousOrderStatuses(newStatuses);\n      }\n    }\n  }, [orders, notifyOrderStatusChange, toast, playSound]);\n\n  // Initialiser les notifications au premier chargement\n  useEffect(() => {\n    if (!isNotificationsEnabled && permissionStatus === 'default') {\n      // Proposer d'activer les notifications apr√®s 3 secondes\n      const timer = setTimeout(() => {\n        toast({\n          title: \"üîî Notifications sonores\",\n          description: \"Activez les notifications pour √™tre averti des changements de statut de vos commandes m√™me quand l'app est ferm√©e\",\n          action: (\n            <Button size=\"sm\" onClick={requestNotificationPermission}>\n              Activer\n            </Button>\n          ),\n          duration: 10000,\n        });\n      }, 3000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isNotificationsEnabled, permissionStatus, requestNotificationPermission, toast]);\n\n  const handleCreateOrder = () => {\n    if (selectedPharmacy && orderData.deliveryAddress && orderData.medications.some(med => med.name.trim())) {\n      createOrderMutation.mutate({\n        pharmacyId: selectedPharmacy.id,\n        deliveryAddress: orderData.deliveryAddress,\n        deliveryNotes: orderData.pharmacyMessage,\n        medications: orderData.medications.filter(med => med.name.trim()),\n        bonDocuments: orderData.bonDocuments.length > 0 ? 'documents-uploaded' : null,\n        prescriptionPhoto: orderData.prescriptionPhoto ? 'prescription-photo-uploaded' : null,\n        status: 'pending'\n      });\n    } else {\n      toast({\n        title: \"Informations manquantes\",\n        description: \"Veuillez remplir tous les champs obligatoires\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePrescriptionUpload = async (file: File) => {\n    try {\n      const formData = new FormData();\n      formData.append('prescription', file);\n\n      const response = await fetch('/api/prescriptions/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Ordonnance envoy√©e\",\n          description: \"Votre ordonnance a √©t√© t√©l√©charg√©e avec succ√®s\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\"] });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer l'ordonnance\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openCamera = () => {\n    // Ouvrir la cam√©ra pour prendre une photo\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.capture = 'environment';\n    input.onchange = (e: any) => {\n      const file = e.target.files[0];\n      if (file) {\n        setPrescriptionFile(file);\n        handlePrescriptionUpload(file);\n      }\n    };\n    input.click();\n  };\n\n  const selectFile = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.onchange = (e: any) => {\n      const file = e.target.files[0];\n      if (file) {\n        setPrescriptionFile(file);\n        handlePrescriptionUpload(file);\n      }\n    };\n    input.click();\n  };\n\n  const getOrderStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'confirmed': return 'bg-blue-100 text-blue-800';\n      case 'preparing': return 'bg-indigo-100 text-indigo-800';\n      case 'ready_for_delivery': return 'bg-purple-100 text-purple-800';\n      case 'in_delivery': return 'bg-orange-100 text-orange-800';\n      case 'delivered': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getOrderStatusText = (status: string) => {\n    switch (status) {\n      case 'pending': return 'En attente';\n      case 'confirmed': return 'Confirm√©e';\n      case 'preparing': return 'En pr√©paration';\n      case 'ready_for_delivery': return 'Pr√™te pour livraison';\n      case 'in_delivery': return 'En cours de livraison';\n      case 'delivered': return 'Livr√©e';\n      default: return status;\n    }\n  };\n\n  const handleCancelOrder = (orderId: string) => {\n    if (confirm('√ätes-vous s√ªr de vouloir annuler cette commande ?')) {\n      cancelOrderMutation.mutate(orderId);\n    }\n  };\n\n  const handleDeleteOrder = (orderId: string) => {\n    const orderNumber = orderId.slice(0, 8);\n    const confirmMessage = `‚ö†Ô∏è ATTENTION : SUPPRESSION D√âFINITIVE ‚ö†Ô∏è\\n\\nVous √™tes sur le point de supprimer D√âFINITIVEMENT la commande #${orderNumber}.\\n\\nCette action est IRR√âVERSIBLE et supprimera compl√®tement la commande de la base de donn√©es comme si elle n'avait jamais exist√©.\\n\\n√ätes-vous absolument certain de vouloir continuer ?`;\n\n    if (confirm(confirmMessage)) {\n      const doubleConfirm = confirm(`Derni√®re confirmation :\\n\\nSupprimer D√âFINITIVEMENT la commande #${orderNumber} ?\\n\\nTapez \"CONFIRMER\" si vous √™tes s√ªr, sinon annulez.`);\n      if (doubleConfirm) {\n        deleteOrderMutation.mutate(orderId);\n      }\n    }\n  };\n\n  const handlePayment = () => {\n    if (!selectedOrderForPayment || !paymentMethod) {\n      toast({\n        title: \"Informations manquantes\",\n        description: \"Veuillez s√©lectionner un moyen de paiement\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const totalAmount = parseFloat(selectedOrderForPayment.totalAmount) + 1000;\n    const paymentData = {\n      orderId: selectedOrderForPayment.id,\n      paymentMethod,\n      amount: totalAmount,\n      deliveryFee: 1000,\n      ...paymentDetails\n    };\n\n    paymentMutation.mutate(paymentData);\n  };\n\n  const handleConfirmDelivery = (orderId: string) => {\n    console.log('üéØ HandleConfirmDelivery appel√© avec orderId:', orderId);\n    if (!orderId) {\n      console.error('‚ùå OrderId manquant');\n      toast({\n        title: \"Erreur\",\n        description: \"ID de commande manquant\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    confirmDeliveryMutation.mutate(orderId);\n  };\n\n  const getPaymentMethods = () => {\n    // Ces donn√©es devraient id√©alement venir de l'API de la pharmacie\n    return [\n      { id: 'wave', name: 'WAVE CI', number: '+225 0701234567' },\n      { id: 'orange', name: 'Orange Money', number: '+225 0701234568' },\n      { id: 'moov', name: 'Moov Money', number: '+225 0501234567' },\n      { id: 'momo', name: 'MTN MoMo', number: '+225 0501234568' }\n    ];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-blue-600 mb-2\">\n            üë• Tableau de bord Patient\n          </h1>\n          <p className=\"text-gray-600\">\n            Bienvenue {user?.firstName} ! G√©rez vos commandes et ordonnances\n          </p>\n          {currentAddress && (\n            <div className=\"flex items-center gap-2 mt-2 text-sm text-gray-600\">\n              <MapPin className=\"h-4 w-4\" />\n              <span>Votre position: {currentAddress}</span>\n            </div>\n          )}\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"orders\">Mes Commandes</TabsTrigger>\n            <TabsTrigger value=\"tracking\">Suivi Livraison</TabsTrigger>\n          </TabsList>\n\n          {/* Mes Commandes */}\n          <TabsContent value=\"orders\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"border-2 border-dashed border-blue-300 hover:border-blue-500 transition-colors cursor-pointer\">\n                <CardContent className=\"flex flex-col items-center justify-center p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n                    <span className=\"text-2xl\">üìã</span>\n                  </div>\n                  <h3 className=\"font-semibold text-lg mb-2\">Cr√©er une Commande</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Localisez une pharmacie et passez commande\n                  </p>\n                  <Button data-testid=\"button-new-order\" onClick={() => navigate(\"/pharmacies\")}>\n                    Nouvelle Commande\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {ordersLoading ? (\n                <div className=\"col-span-2 text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                  <p>Chargement de vos commandes...</p>\n                </div>\n              ) : orders && Array.isArray(orders) && orders.length > 0 ? (\n                orders.map((order: any) => (\n                  <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-sm\">Commande #{order.id.slice(0, 8)}</CardTitle>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getOrderStatusColor(order.status)}>\n                            {getOrderStatusText(order.status)}\n                          </Badge>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50\"\n                            onClick={() => handleDeleteOrder(order.id)}\n                            title=\"Supprimer d√©finitivement la commande\"\n                          >\n                            üóëÔ∏è\n                          </Button>\n                        </div>\n                      </div>\n                      <CardDescription>\n                        {new Date(order.createdAt).toLocaleDateString(\"fr-FR\", {\n                          day: 'numeric',\n                          month: 'long',\n                          year: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        })}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm\"><strong>Pharmacie:</strong> {(() => {\n                          if (order.pharmacy?.name) {\n                            return order.pharmacy.name;\n                          }\n                          if (order.pharmacyId) {\n                            // Essayer de r√©cup√©rer le nom depuis les donn√©es de pharmacies\n                            const pharmacy = pharmacies?.find((p: any) => p.id === order.pharmacyId);\n                            if (pharmacy?.name) {\n                              return pharmacy.name;\n                            }\n                          }\n                          return 'En cours d\\'attribution';\n                        })()}</p>\n                        {order.pharmacy?.isEmergency24h && (\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\" className=\"text-xs bg-red-50 text-red-700 border-red-200\">\n                              üö® De garde 24h/24\n                            </Badge>\n                          </div>\n                        )}\n                        <p className=\"text-sm\"><strong>Montant:</strong> {(() => {\n                          // Utiliser d'abord order.totalAmount s'il existe et n'est pas z√©ro\n                          if (order.totalAmount && order.totalAmount !== '0' && parseFloat(order.totalAmount) > 0) {\n                            return `${parseFloat(order.totalAmount).toFixed(0)} FCFA`;\n                          }\n                          \n                          // Sinon, calculer √† partir des m√©dicaments\n                          if (order.status === 'confirmed' || order.medications) {\n                            try {\n                              const medications = typeof order.medications === 'string' ? JSON.parse(order.medications) : order.medications;\n                              let medicationsList = [];\n\n                              if (Array.isArray(medications)) {\n                                medicationsList = medications;\n                              } else if (medications && Array.isArray(medications.items)) {\n                                medicationsList = medications.items;\n                              } else if (medications && typeof medications === 'object') {\n                                medicationsList = Object.values(medications).filter(med => med && typeof med === 'object');\n                              }\n\n                              const total = medicationsList.reduce((sum: number, med: any) => {\n                                const price = parseFloat(med.price) || 0;\n                                const isAvailable = med.available !== false;\n                                console.log(`Med: ${med.name}, Price: ${price}, Available: ${isAvailable}`);\n                                return sum + (price > 0 && isAvailable ? price : 0);\n                              }, 0);\n\n                              console.log(`Total calculated: ${total} for order ${order.id}`);\n                              return total > 0 ? `${total.toFixed(0)} FCFA` : 'En cours d\\'√©valuation';\n                            } catch (error) {\n                              console.error('Error calculating total:', error);\n                              return 'En cours d\\'√©valuation';\n                            }\n                          }\n                          \n                          return 'En cours d\\'√©valuation';\n                        })()}</p>\n                        <p className=\"text-sm\"><strong>Adresse:</strong> {order.deliveryAddress}</p>\n                        {order.deliveryNotes && (\n                          <p className=\"text-sm\"><strong>Notes:</strong> {order.deliveryNotes}</p>\n                        )}\n\n                        {/* Affichage des m√©dicaments avec prix si confirm√©s par la pharmacie */}\n                        <div className=\"mt-3 bg-gray-50 rounded-lg p-3\">\n                          <p className=\"text-sm font-medium mb-2\">D√©tails des m√©dicaments:</p>\n                          <div className=\"space-y-2\">\n                            {(() => {\n                              try {\n                                const medications = typeof order.medications === 'string' ? JSON.parse(order.medications) : order.medications;\n                                let medicationsList = [];\n\n                                if (Array.isArray(medications)) {\n                                  medicationsList = medications;\n                                } else if (medications && Array.isArray(medications.items)) {\n                                  medicationsList = medications.items;\n                                } else if (medications && typeof medications === 'object') {\n                                  medicationsList = Object.values(medications).filter(med => med && typeof med === 'object');\n                                }\n\n                                return medicationsList;\n                              } catch (error) {\n                                console.error('Erreur parsing medications:', error);\n                                return [];\n                              }\n                            })().map((med: any, index: number) => (\n                              <div key={index} className=\"flex justify-between items-center text-sm py-1 border-b border-gray-200 last:border-b-0\">\n                                <div className=\"flex flex-col\">\n                                  <span className=\"font-medium\">{med.name}</span>\n                                  <div className=\"flex gap-2 mt-1\">\n                                    {med.available !== undefined && (\n                                      <Badge variant={med.available ? \"default\" : \"destructive\"} className=\"text-xs\">\n                                        {med.available ? \"Disponible\" : \"Indisponible\"}\n                                      </Badge>\n                                    )}\n                                    {med.surBon && (\n                                      <Badge variant=\"outline\" className=\"text-xs\">Sur BON</Badge>\n                                    )}\n                                  </div>\n                                </div>\n                                {med.price && (\n                                  <span className=\"text-green-600 font-semibold\">{med.price} FCFA</span>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n\n                          {/* Calcul et affichage des totaux pour les commandes confirm√©es */}\n                          {order.status === 'confirmed' && (\n                            <div className=\"mt-4 space-y-3\">\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-sm font-medium\">Sous-total m√©dicaments:</span>\n                                <span className=\"font-semibold\">\n                                  {(() => {\n                                    // Utiliser d'abord order.totalAmount s'il existe\n                                    if (order.totalAmount && order.totalAmount !== '0' && parseFloat(order.totalAmount) > 0) {\n                                      return parseFloat(order.totalAmount).toFixed(0);\n                                    }\n                                    \n                                    try {\n                                      const medications = typeof order.medications === 'string' ? JSON.parse(order.medications) : order.medications;\n                                      let medicationsList = [];\n\n                                      if (Array.isArray(medications)) {\n                                        medicationsList = medications;\n                                      } else if (medications && Array.isArray(medications.items)) {\n                                        medicationsList = medications.items;\n                                      } else if (medications && typeof medications === 'object') {\n                                        medicationsList = Object.values(medications).filter(med => med && typeof med === 'object');\n                                      }\n\n                                      const total = medicationsList.reduce((sum: number, med: any) => {\n                                        const price = parseFloat(med.price) || 0;\n                                        const isAvailable = med.available !== false;\n                                        return sum + (price > 0 && isAvailable ? price : 0);\n                                      }, 0);\n\n                                      return total > 0 ? total.toFixed(0) : '0';\n                                    } catch (error) {\n                                      console.error('Erreur calcul total:', error);\n                                      return '0';\n                                    }\n                                  })()} FCFA\n                                </span>\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-sm font-medium\">Frais de livraison:</span>\n                                <span className=\"font-semibold\">1,000 FCFA</span>\n                              </div>\n                              <div className=\"flex items-center justify-between border-t pt-2\">\n                                <span className=\"font-medium\">Total √† payer:</span>\n                                <span className=\"font-bold text-lg\">\n                                  {(() => {\n                                    // Utiliser d'abord order.totalAmount s'il existe\n                                    if (order.totalAmount && order.totalAmount !== '0' && parseFloat(order.totalAmount) > 0) {\n                                      return (parseFloat(order.totalAmount) + 1000).toFixed(0);\n                                    }\n                                    \n                                    try {\n                                      const medications = typeof order.medications === 'string' ? JSON.parse(order.medications) : order.medications;\n                                      let medicationsList = [];\n\n                                      if (Array.isArray(medications)) {\n                                        medicationsList = medications;\n                                      } else if (medications && Array.isArray(medications.items)) {\n                                        medicationsList = medications.items;\n                                      } else if (medications && typeof medications === 'object') {\n                                        medicationsList = Object.values(medications).filter(med => med && typeof med === 'object');\n                                      }\n\n                                      const subtotal = medicationsList.reduce((sum: number, med: any) => {\n                                        const price = parseFloat(med.price) || 0;\n                                        const isAvailable = med.available !== false;\n                                        return sum + (price > 0 && isAvailable ? price : 0);\n                                      }, 0);\n\n                                      return subtotal > 0 ? (subtotal + 1000).toFixed(0) : '1000';\n                                    } catch (error) {\n                                      console.error('Erreur calcul total final:', error);\n                                      return '1000';\n                                    }\n                                  })()} FCFA\n                                </span>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Boutons d'action selon le statut de la commande */}\n                        <div className=\"mt-3 space-y-2\">\n                          {/* Boutons supprim√©s pour simplifier l'interface */}\n\n                          {/* Pour les commandes confirm√©es - validation seulement */}\n                          {order.status === 'confirmed' && order.totalAmount && order.totalAmount !== '0' && (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => navigate(`/order-validation?orderId=${order.id}`)}\n                              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                            >\n                              üìã Valider la commande\n                            </Button>\n                          )}\n\n                          {/* Pour les commandes en pr√©paration */}\n                          {order.status === 'preparing' && (\n                            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                              <p className=\"text-sm text-blue-800\">\n                                üîÑ <strong>En pr√©paration :</strong> Votre commande est en cours de pr√©paration par la pharmacie.\n                              </p>\n                            </div>\n                          )}\n\n                          {/* Pour les commandes pr√™tes pour livraison */}\n                          {order.status === 'ready_for_delivery' && (\n                            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                              <p className=\"text-sm text-purple-800\">\n                                üì¶ <strong>Pr√™te pour livraison :</strong> Votre commande est pr√™te et en attente d'assignation au livreur.\n                              </p>\n                            </div>\n                          )}\n\n                          {/* Pour les commandes en transit/livraison */}\n                          {(order.status === 'in_transit' || order.status === 'in_delivery') && (\n                            <div className=\"space-y-2\">\n                              <Button \n                                size=\"sm\" \n                                className=\"w-full\" \n                                onClick={() => {\n                                  setSelectedOrderForTracking(order);\n                                  setActiveTab(\"tracking\");\n                                }}\n                              >\n                                üìã Info de la livraison\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                                onClick={() => navigate(\"/delivery-tracking\")}\n                              >\n                                üó∫Ô∏è GPS Temps R√©el\n                              </Button>\n\n                              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                                <p className=\"text-sm text-green-800 mb-2\">\n                                  ‚úÖ M√©dicaments re√ßus ? Confirmez la livraison\n                                </p>\n                                <Button \n                                  size=\"sm\"\n                                  className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                                  onClick={() => handleConfirmDelivery(order.id)}\n                                  disabled={confirmDeliveryMutation.isPending}\n                                  data-testid={`button-confirm-delivery-${order.id.slice(0, 8)}`}\n                                >\n                                  {confirmDeliveryMutation.isPending ? (\n                                    <>\n                                      <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-2\"></div>\n                                      Confirmation...\n                                    </>\n                                  ) : (\n                                    <>\n                                      ‚úÖ Confirmer la livraison\n                                    </>\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n\n                          {order.status === 'arrived_pending_confirmation' && (\n                            <div className=\"space-y-2\">\n                              <Button \n                                size=\"sm\" \n                                className=\"w-full\" \n                                onClick={() => {\n                                  setSelectedOrderForTracking(order);\n                                  setActiveTab(\"tracking\");\n                                }}\n                              >\n                                üìã Info de la livraison\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                                onClick={() => navigate(\"/delivery-tracking\")}\n                              >\n                                üó∫Ô∏è GPS Temps R√©el\n                              </Button>\n\n                              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                                <p className=\"text-sm text-orange-800 text-center mb-2\">\n                                  ‚è≥ <strong>Livreur arriv√© :</strong> En attente de votre confirmation de r√©ception\n                                </p>\n                                <Button \n                                  size=\"sm\"\n                                  className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                                  onClick={() => handleConfirmDelivery(order.id)}\n                                  disabled={confirmDeliveryMutation.isPending}\n                                  data-testid={`button-confirm-delivery-${order.id.slice(0, 8)}`}\n                                >\n                                  {confirmDeliveryMutation.isPending ? (\n                                    <>\n                                      <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-2\"></div>\n                                      Confirmation...\n                                    </>\n                                  ) : (\n                                    <>\n                                      ‚úÖ Confirmer la livraison\n                                    </>\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Messages d'information pour les commandes en cours */}\n                        {order.status === 'pending' && (\n                          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-2\">\n                            <p className=\"text-sm text-yellow-800\">\n                              ‚è≥ <strong>En cours d'attribution :</strong> Votre commande est en attente de confirmation par la pharmacie. Le suivi GPS sera disponible une fois la commande confirm√©e.\n                            </p>\n                          </div>\n                        )}\n\n                        {order.status === 'confirmed' && (\n                          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-2\">\n                            <p className=\"text-sm text-blue-800\">\n                              ‚ÑπÔ∏è <strong>Livraison en pr√©paration :</strong> Votre commande sera bient√¥t assign√©e √† un livreur. Le suivi GPS sera disponible d√®s le d√©part de la pharmacie.\n                            </p>\n                          </div>\n                        )}\n\n                        {order.status === 'ready_for_delivery' && (\n                          <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3 mt-2\">\n                            <p className=\"text-sm text-purple-800\">\n                              üöö <strong>Pr√™t pour livraison :</strong> Votre commande est pr√™te et en attente d'assignation au livreur. Le d√©part aura lieu sous peu.\n                            </p>\n                          </div>\n                        )}\n\n\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <div className=\"col-span-2 text-center py-8\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    üì¶\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Aucune commande</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Vous n'avez pas encore pass√© de commande\n                  </p>\n                  <Button onClick={() => navigate(\"/pharmacies\")}>\n                    Cr√©er ma premi√®re commande\n                  </Button>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Info Livraison */}\n          <TabsContent value=\"tracking\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  üìã Informations de Livraison\n                </CardTitle>\n                <CardDescription>\n                  D√©tails complets de votre livraison en cours et informations du livreur\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {(selectedOrderForTracking || currentOrder) && typeof (selectedOrderForTracking || currentOrder) === 'object' && 'status' in (selectedOrderForTracking || currentOrder) && ['in_delivery', 'in_transit', 'preparing', 'ready_for_delivery'].includes(((selectedOrderForTracking || currentOrder) as any).status) ? (\n                  <div className=\"space-y-6\">\n                    {/* Informations de la commande */}\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-blue-900\">\n                            üì¶ D√©tails de la commande\n                          </h3>\n                          <p className=\"text-sm text-blue-700\">\n                            Commande #{((selectedOrderForTracking || currentOrder) as any).id.slice(0, 8)}\n                          </p>\n                        </div>\n                        <Badge className={`${\n                          ((selectedOrderForTracking || currentOrder) as any).status === 'in_delivery' ? 'bg-green-100 text-green-800' :\n                          ((selectedOrderForTracking || currentOrder) as any).status === 'in_transit' ? 'bg-orange-100 text-orange-800' :\n                          ((selectedOrderForTracking || currentOrder) as any).status === 'ready_for_delivery' ? 'bg-blue-100 text-blue-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {((selectedOrderForTracking || currentOrder) as any).status === 'in_delivery' ? 'En livraison' :\n                           ((selectedOrderForTracking || currentOrder) as any).status === 'in_transit' ? 'En route' :\n                           ((selectedOrderForTracking || currentOrder) as any).status === 'ready_for_delivery' ? 'Pr√™t √† livrer' :\n                           'En pr√©paration'}\n                        </Badge>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-gray-600\">Pharmacie</p>\n                          <p className=\"font-medium\">{((selectedOrderForTracking || currentOrder) as any).pharmacy?.name}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Montant</p>\n                          <p className=\"font-medium\">{((selectedOrderForTracking || currentOrder) as any).totalAmount} FCFA</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Adresse de livraison</p>\n                          <p className=\"font-medium\">{((selectedOrderForTracking || currentOrder) as any).deliveryAddress}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Temps estim√©</p>\n                          <p className=\"font-medium text-orange-600\">\n                            {((selectedOrderForTracking || currentOrder) as any).status === 'preparing' ? 'En pr√©paration' : '‚â§ 10 minutes'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Informations du livreur */}\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                      <h3 className=\"font-semibold text-green-900 mb-4 flex items-center gap-2\">\n                        üöó Informations du Livreur\n                      </h3>\n\n                      {((selectedOrderForTracking || currentOrder) as any).deliveryPersonId ? (\n                        <>\n                          <div className=\"flex items-start gap-4 mb-4\">\n                            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center border-2 border-green-200 overflow-hidden\">\n                              <img \n                                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face\" \n                                alt=\"Photo du livreur\"\n                                className=\"w-full h-full object-cover\"\n                                onError={(e) => {\n                                  (e.target as HTMLImageElement).style.display = 'none';\n                                  (e.target as HTMLImageElement).nextElementSibling?.classList.remove('hidden');\n                                }}\n                              />\n                              <span className=\"text-2xl hidden\">üö¥</span>\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-green-900\">\n                                KOUASSI KPATA\n                              </h4>\n                              <p className=\"text-sm text-green-700\">Livreur agr√©√© - En service</p>\n                              <div className=\"flex items-center gap-1 mt-1\">\n                                <span className=\"text-yellow-500\">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</span>\n                                <span className=\"text-xs text-green-600\">4.5/5 (50 livraisons)</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Informations du v√©hicule - PLAQUE TR√àS VISIBLE */}\n                          <div className=\"bg-red-50 border-2 border-red-200 rounded-lg p-4 mb-4\">\n                            <h5 className=\"font-bold text-red-900 mb-2 text-center\">üöó V√âHICULE DU LIVREUR</h5>\n                            <div className=\"text-center\">\n                              <div className=\"bg-white border-4 border-black rounded-lg p-3 inline-block mb-2\">\n                                <p className=\"text-xs text-gray-600 font-bold\">PLAQUE D'IMMATRICULATION</p>\n                                <p className=\"text-3xl font-black text-black tracking-wider\">CI-2578-AB</p>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-2 text-sm mt-3\">\n                                <div>\n                                  <p className=\"text-gray-600 font-medium\">üèçÔ∏è Type</p>\n                                  <p className=\"font-bold\">Moto Yamaha DT 125</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-gray-600 font-medium\">üé® Couleur</p>\n                                  <p className=\"font-bold\">Rouge</p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Boutons de contact avec le livreur */}\n                          <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                            <a \n                              href=\"tel:+22507445566\"\n                              className=\"bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-4 rounded-lg flex items-center justify-center gap-2 transition-colors\"\n                            >\n                              üìû Appeler\n                            </a>\n                            <a \n                              href=\"sms:+22507445566?body=Bonjour, je suis votre client pour la commande Pharma Express. O√π √™tes-vous ?\"\n                              className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg flex items-center justify-center gap-2 transition-colors\"\n                            >\n                              üí¨ SMS\n                            </a>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div className=\"space-y-3\">\n                              <div>\n                                <p className=\"text-gray-600 font-medium\">üì± Identifiant livreur</p>\n                                <p className=\"font-mono bg-white px-2 py-1 rounded border\">\n                                  LIV-{((selectedOrderForTracking || currentOrder) as any).deliveryPersonId?.slice(0, 8)}\n                                </p>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600 font-medium\">üìû Contact via l'app</p>\n                                <p className=\"font-medium text-green-700\">Disponible pendant la livraison</p>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600 font-medium\">‚è∞ Heure de prise en charge</p>\n                                <p className=\"font-medium\">\n                                  {((selectedOrderForTracking || currentOrder) as any).status === 'preparing' ? 'En attente' : \n                                   ((selectedOrderForTracking || currentOrder) as any).updatedAt ? \n                                   new Date(((selectedOrderForTracking || currentOrder) as any).updatedAt).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }) :\n                                   'En cours'}\n                                </p>\n                              </div>\n                            </div>\n\n                            <div className=\"space-y-3\">\n                              <div>\n                                <p className=\"text-gray-600 font-medium\">üèçÔ∏è Mode de transport</p>\n                                <p className=\"font-medium\">V√©hicule de livraison agr√©√©</p>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600 font-medium\">üì¶ Statut livraison</p>\n                                <div className=\"flex items-center gap-2\">\n                                  <div className=\"w-4 h-4 bg-green-600 rounded-full border border-gray-300\"></div>\n                                  <span className=\"font-medium\">\n                                    {((selectedOrderForTracking || currentOrder) as any).status === 'in_transit' ? 'En route' :\n                                     ((selectedOrderForTracking || currentOrder) as any).status === 'preparing' ? 'En pr√©paration' :\n                                     ((selectedOrderForTracking || currentOrder) as any).status === 'ready_for_delivery' ? 'Pr√™t pour livraison' :\n                                     'En cours'}\n                                  </span>\n                                </div>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600 font-medium\">üè∑Ô∏è ID Commande</p>\n                                <p className=\"font-mono bg-white px-2 py-1 rounded border font-bold\">\n                                  #{((selectedOrderForTracking || currentOrder) as any).id?.slice(0, 8)}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </>\n                      ) : (\n                        <div className=\"text-center py-4\">\n                          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                            ‚è≥\n                          </div>\n                          <p className=\"text-gray-600\">Aucun livreur assign√© pour le moment</p>\n                          <p className=\"text-sm text-gray-500 mt-1\">\n                            {((selectedOrderForTracking || currentOrder) as any).status === 'preparing' ? \n                              'Votre commande est en cours de pr√©paration' :\n                              'Assignation du livreur en cours...'}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Informations de s√©curit√© */}\n                      <div className=\"mt-4 pt-4 border-t border-green-200\">\n                        <h5 className=\"font-medium text-green-900 mb-2\">üîí S√©curit√© et Identification</h5>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                          <div>\n                            <p className=\"text-gray-600\">Permis de conduire</p>\n                            <p className=\"font-medium\">‚úÖ V√©rifi√© et valide</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">Assurance v√©hicule</p>\n                            <p className=\"font-medium\">‚úÖ En cours de validit√©</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">Formation livraison m√©dicaments</p>\n                            <p className=\"font-medium\">‚úÖ Certifi√©</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">V√©rification ant√©c√©dents</p>\n                            <p className=\"font-medium\">‚úÖ Contr√¥l√©</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Timeline de livraison */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold\">Timeline de livraison</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                          <div>\n                            <p className=\"text-sm font-medium\">Commande confirm√©e</p>\n                            <p className=\"text-xs text-gray-500\">Pharmacie a valid√© votre commande</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                          <div>\n                            <p className=\"text-sm font-medium\">Pr√©paration termin√©e</p>\n                            <p className=\"text-xs text-gray-500\">M√©dicaments pr√™ts pour livraison</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-3 h-3 bg-orange-500 rounded-full animate-pulse\"></div>\n                          <div>\n                            <p className=\"text-sm font-medium\">En cours de livraison</p>\n                            <p className=\"text-xs text-gray-500\">Le livreur est en route vers vous</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-3 h-3 bg-gray-300 rounded-full\"></div>\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-500\">Livraison termin√©e</p>\n                            <p className=\"text-xs text-gray-400\">√Ä confirmer √† la r√©ception</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Actions rapides */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                      {((selectedOrderForTracking || currentOrder) as any).deliveryPersonId ? (\n                        <>\n                          <Button \n                            variant=\"outline\" \n                            className=\"flex items-center gap-2\"\n                            onClick={() => {\n                              toast({\n                                title: \"Contact livreur\",\n                                description: \"Fonctionnalit√© d'appel disponible pendant la livraison active\",\n                              });\n                            }}\n                          >\n                            <Phone className=\"h-4 w-4\" />\n                            Contacter livreur\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            className=\"flex items-center gap-2\"\n                            onClick={() => {\n                              toast({\n                                title: \"Chat en direct\",\n                                description: \"Chat disponible une fois la livraison d√©marr√©e\",\n                              });\n                            }}\n                          >\n                            üì± Chat livreur\n                          </Button>\n                        </>\n                      ) : (\n                        <>\n                          <Button \n                            variant=\"outline\" \n                            className=\"flex items-center gap-2 opacity-50\"\n                            disabled\n                          >\n                            <Phone className=\"h-4 w-4\" />\n                            Livreur non assign√©\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            className=\"flex items-center gap-2 opacity-50\"\n                            disabled\n                          >\n                            üì± Chat indisponible\n                          </Button>\n                        </>\n                      )}\n                      <Button \n                        variant=\"outline\" \n                        className=\"flex items-center gap-2\"\n                        onClick={() => navigate(\"/delivery-tracking\")}\n                      >\n                        <MapPin className=\"h-4 w-4\" />\n                        Suivi GPS temps r√©el\n                      </Button>\n                    </div>\n\n                    {/* Bouton de confirmation de livraison */}\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-green-900 mb-2\">‚úÖ Confirmer la r√©ception</h4>\n                      <p className=\"text-sm text-green-800 mb-3\">\n                        Une fois que vous avez re√ßu vos m√©dicaments, confirmez la livraison pour terminer la commande.\n                      </p>\n                      <Button \n                        className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                        onClick={() => handleConfirmDelivery(((selectedOrderForTracking || currentOrder) as any).id)}\n                        disabled={confirmDeliveryMutation.isPending}\n                        data-testid=\"button-confirm-delivery\"\n                      >\n                        {confirmDeliveryMutation.isPending ? (\n                          <>\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                            Confirmation...\n                          </>\n                        ) : (\n                          <>\n                            ‚úÖ Confirmer la livraison\n                          </>\n                        )}\n                      </Button>\n                    </div>\n\n                    {/* Informations sur les p√©nalit√©s */}\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-blue-800\">\n                        ‚ÑπÔ∏è <strong>Garantie de livraison :</strong> Livraison sous 10 minutes maximum. \n                        Au-del√†, 100 FCFA de r√©duction par minute de retard.\n                      </p>\n                    </div>\n                  </div>\n                ) : orders && Array.isArray(orders) && orders.some((order: any) => order.status === 'pending' || order.status === 'confirmed' || order.status === 'ready_for_delivery') ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Clock className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">Commande en pr√©paration</h3>\n                    <p className=\"text-sm text-gray-600 mb-4\">\n                      Votre commande est en cours de traitement par la pharmacie\n                    </p>\n                    <div className=\"text-left bg-gray-50 rounded-lg p-4 max-w-md mx-auto\">\n                      {Array.isArray(orders) && orders.filter((order: any) => ['pending', 'confirmed', 'ready_for_delivery'].includes(order.status)).map((order: any) => (\n                        <div key={order.id} className=\"space-y-2\">\n                          <p className=\"text-sm\"><strong>Commande #{order.id.slice(0, 8)}</strong></p>\n                          <p className=\"text-sm\">Pharmacie: {order.pharmacy?.name}</p>\n                          <p className=\"text-sm\">Statut: {getOrderStatusText(order.status)}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      üì¶\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">Aucune livraison en cours</h3>\n                    <p className=\"text-sm text-gray-600 mb-4\">\n                      Vos livraisons actives appara√Ætront ici avec suivi en temps r√©el\n                    </p>\n                    <Button onClick={() => setActiveTab(\"pharmacies\")}>\n                      Passer une commande\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          \n        </Tabs>\n      </div>\n\n      {/* Modal de paiement */}\n      {selectedOrderForPayment && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold\">üí≥ Paiement de la commande</h3>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setSelectedOrderForPayment(null)}\n                >\n                  ‚úï\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* R√©capitulatif */}\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">R√©capitulatif</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>M√©dicaments:</span>\n                      <span>{selectedOrderForPayment.totalAmount} FCFA</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Livraison:</span>\n                      <span>1,000 FCFA</span>\n                    </div>\n                    <div className=\"flex justify-between font-semibold border-t pt-1\">\n                      <span>Total:</span>\n                      <span>{(parseFloat(selectedOrderForPayment.totalAmount) + 1000).toFixed(0)} FCFA</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* M√©thodes de paiement */}\n                <div>\n                  <h4 className=\"font-medium mb-3\">Choisir le moyen de paiement</h4>\n                  <div className=\"space-y-2\">\n                    {getPaymentMethods().map((method) => (\n                      <div \n                        key={method.id}\n                        className={`border rounded-lg p-3 cursor-pointer ${\n                          paymentMethod === method.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                        }`}\n                        onClick={() => setPaymentMethod(method.id)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`w-4 h-4 rounded-full border-2 ${\n                              paymentMethod === method.id ? 'border-blue-500 bg-blue-500' : 'border-gray-300'\n                            }`}>\n                              {paymentMethod === method.id && (\n                                <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                              )}\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{method.name}</p>\n                              <p className=\"text-sm text-gray-600\">{method.number}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Instructions de paiement */}\n                {paymentMethod && (\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium mb-2\">üìã Instructions de paiement</h4>\n                    <div className=\"text-sm text-yellow-800 space-y-1\">\n                      <p>1. Ouvrez votre app {getPaymentMethods().find(m => m.id === paymentMethod)?.name}</p>\n                      <p>2. Envoyez <strong>{(parseFloat(selectedOrderForPayment.totalAmount) + 1000).toFixed(0)} FCFA</strong> au num√©ro:</p>\n                      <p className=\"font-bold\">{getPaymentMethods().find(m => m.id === paymentMethod)?.number}</p>\n                      <p>3. Confirmez le paiement ci-dessous une fois effectu√©</p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Num√©ro de transaction */}\n                {paymentMethod && (\n                  <div>\n                    <Label htmlFor=\"transaction-id\" className=\"text-sm font-medium\">\n                      Num√©ro de transaction (optionnel)\n                    </Label>\n                    <Input\n                      id=\"transaction-id\"\n                      placeholder=\"Ex: TXN123456789\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                )}\n\n                {/* Boutons d'action */}\n                <div className=\"flex gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={() => setSelectedOrderForPayment(null)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button\n                    className=\"flex-1\"\n                    onClick={handlePayment}\n                    disabled={!paymentMethod || paymentMutation.isPending}\n                  >\n                    {paymentMutation.isPending ? 'Traitement...' : 'Confirmer le paiement'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <BottomNavigation currentPage=\"orders\" />\n    </div>\n  );\n}","size_bytes":72410},"client/src/pages/dashboard-pharmacien.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\n\n// Composant pour g√©rer les candidatures de livreurs\nfunction DeliveryApplicationsManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: applications, isLoading, error } = useQuery({\n    queryKey: [\"/api/pharmacien/delivery-applications\"],\n    enabled: true,\n    queryFn: async () => {\n      console.log('üîÑ Fetching delivery applications...');\n      const response = await fetch(\"/api/pharmacien/delivery-applications\", {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('‚ùå Failed to fetch applications:', response.status, errorText);\n        throw new Error(`Failed to fetch applications: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('üì¨ Applications received:', data);\n      return data;\n    },\n    refetchInterval: 10000, // Refresh every 10 seconds\n    retry: 3\n  });\n\n  const respondToApplicationMutation = useMutation({\n    mutationFn: ({ applicationId, action }: { applicationId: string; action: string }) =>\n      apiRequest(`/api/pharmacien/delivery-applications/${applicationId}/respond`, \"POST\", { action }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: variables.action === 'approve' ? \"Candidature accept√©e\" : \"Candidature rejet√©e\",\n        description: variables.action === 'approve'\n          ? \"Le livreur peut maintenant acc√©der √† son tableau de bord\"\n          : \"Le livreur a √©t√© notifi√© du rejet\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pharmacien/delivery-applications\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de traiter la candidature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRespondToApplication = (applicationId: string, action: string) => {\n    respondToApplicationMutation.mutate({ applicationId, action });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600\"></div>\n        <p className=\"ml-2 text-gray-600\">Chargement des candidatures...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            ‚ö†Ô∏è\n          </div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">\n            Erreur de chargement\n          </h3>\n          <p className=\"text-red-600 mb-4\">\n            Impossible de charger les candidatures: {error.message}\n          </p>\n          <Button\n            onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/pharmacien/delivery-applications\"] })}\n            variant=\"outline\"\n          >\n            R√©essayer\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {!applications || applications.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              üö¥\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">\n              Aucune candidature en attente\n            </h3>\n            <p className=\"text-gray-500\">\n              Les candidatures de livreurs appara√Ætront ici\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        applications.map((application: any) => (\n          <Card key={application.id} className=\"border-l-4 border-l-orange-500\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">\n                  {application.firstName} {application.lastName}\n                </CardTitle>\n                <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">\n                  Candidature\n                </Badge>\n              </div>\n              <CardDescription>\n                Souhaite rejoindre votre √©quipe de livraison\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">T√©l√©phone</Label>\n                  <p className=\"text-sm\">{application.phone}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Adresse</Label>\n                  <p className=\"text-sm\">{application.address}</p>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">Statut de v√©rification</Label>\n                <Badge variant={application.verificationStatus === 'approved' ? 'default' : 'destructive'} className=\"ml-2\">\n                  {application.verificationStatus === 'approved' ? 'V√©rifi√©' : 'En attente'}\n                </Badge>\n              </div>\n\n              {/* Informations de candidature */}\n              <div className=\"mb-4\">\n                <Label className=\"text-sm font-medium text-gray-600 mb-2 block\">Informations de candidature</Label>\n                <div className=\"space-y-3\">\n                  {application.motivationLetter && (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-blue-900 mb-2\">üí¨ Lettre de motivation</h5>\n                      <p className=\"text-sm text-blue-800 whitespace-pre-wrap\">{application.motivationLetter}</p>\n                    </div>\n                  )}\n\n                  {application.experience && (\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-green-900 mb-2\">üíº Exp√©rience professionnelle</h5>\n                      <p className=\"text-sm text-green-800 whitespace-pre-wrap\">{application.experience}</p>\n                    </div>\n                  )}\n\n                  {application.availability && (\n                    <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-purple-900 mb-2\">‚è∞ Disponibilit√©s</h5>\n                      <p className=\"text-sm text-purple-800 whitespace-pre-wrap\">{application.availability}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Documents fournis par le candidat */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600 mb-2 block\">Documents fournis</Label>\n                <div className=\"grid grid-cols-1 gap-2\">\n                  {application.idDocumentUrl && (\n                    <div className=\"flex items-center justify-between p-2 bg-green-50 border border-green-200 rounded\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-green-600\">üìÑ</span>\n                        <span className=\"text-sm font-medium text-green-800\">Carte d'identit√©</span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-green-700 hover:text-green-800\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n\n                            // D√©tecter si c'est une image ou un document\n                            const isImage = application.idDocumentUrl.startsWith('data:image/');\n\n                            if (isImage) {\n                              // Afficher l'image dans une modal\n                              const modal = document.createElement('div');\n                              modal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-4';\n                              modal.style.zIndex = '9999';\n                              modal.style.cursor = 'pointer';\n\n                              const modalContent = document.createElement('div');\n                              modalContent.className = 'relative max-w-full max-h-full';\n                              modalContent.innerHTML = `\n                                <img src=\"${application.idDocumentUrl}\"\n                                     class=\"max-w-full max-h-full object-contain\"\n                                     alt=\"Carte d'identit√© de ${application.firstName} ${application.lastName}\" />\n                                <button class=\"absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 text-2xl font-bold\">&times;</button>\n                              `;\n\n                              modal.appendChild(modalContent);\n\n                              const closeModal = () => {\n                                try {\n                                  if (modal && document.body.contains(modal)) {\n                                    document.body.removeChild(modal);\n                                  }\n                                } catch (error) {\n                                  console.log('Modal already removed');\n                                }\n                              };\n\n                              modalContent.addEventListener('click', (e) => e.stopPropagation());\n                              const closeBtn = modalContent.querySelector('button');\n                              closeBtn?.addEventListener('click', (e) => { e.stopPropagation(); closeModal(); });\n                              modal.addEventListener('click', closeModal);\n\n                              const handleEscape = (e: KeyboardEvent) => {\n                                if (e.key === 'Escape') {\n                                  closeModal();\n                                  document.removeEventListener('keydown', handleEscape);\n                                }\n                              };\n                              document.addEventListener('keydown', handleEscape);\n\n                              document.body.appendChild(modal);\n                            } else {\n                              // T√©l√©charger le document\n                              const link = document.createElement('a');\n                              link.href = application.idDocumentUrl;\n                              link.download = `Carte_identite_${application.firstName}_${application.lastName}`;\n                              document.body.appendChild(link);\n                              link.click();\n                              document.body.removeChild(link);\n                            }\n                          }}\n                        >\n                          üëÅÔ∏è Voir\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-green-700 hover:text-green-800\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n\n                            // T√©l√©charger le document\n                            const link = document.createElement('a');\n                            link.href = application.idDocumentUrl;\n                            link.download = `Carte_identite_${application.firstName}_${application.lastName}`;\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                        >\n                          üì• T√©l√©charger\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {application.drivingLicenseUrl && (\n                    <div className=\"flex items-center justify-between p-2 bg-blue-50 border border-blue-200 rounded\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-blue-600\">üöó</span>\n                        <span className=\"text-sm font-medium text-blue-800\">Permis de conduire</span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-blue-700 hover:text-blue-800\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n\n                            // D√©tecter si c'est une image ou un document\n                            const isImage = application.drivingLicenseUrl.startsWith('data:image/');\n\n                            if (isImage) {\n                              // Afficher l'image dans une modal\n                              const modal = document.createElement('div');\n                              modal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-4';\n                              modal.style.zIndex = '9999';\n                              modal.style.cursor = 'pointer';\n\n                              const modalContent = document.createElement('div');\n                              modalContent.className = 'relative max-w-full max-h-full';\n                              modalContent.innerHTML = `\n                                <img src=\"${application.drivingLicenseUrl}\"\n                                     class=\"max-w-full max-h-full object-contain\"\n                                     alt=\"Permis de conduire de ${application.firstName} ${application.lastName}\" />\n                                <button class=\"absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 text-2xl font-bold\">&times;</button>\n                              `;\n\n                              modal.appendChild(modalContent);\n\n                              const closeModal = () => {\n                                try {\n                                  if (modal && document.body.contains(modal)) {\n                                    document.body.removeChild(modal);\n                                  }\n                                } catch (error) {\n                                  console.log('Modal already removed');\n                                }\n                              };\n\n                              modalContent.addEventListener('click', (e) => e.stopPropagation());\n                              const closeBtn = modalContent.querySelector('button');\n                              closeBtn?.addEventListener('click', (e) => { e.stopPropagation(); closeModal(); });\n                              modal.addEventListener('click', closeModal);\n\n                              const handleEscape = (e: KeyboardEvent) => {\n                                if (e.key === 'Escape') {\n                                  closeModal();\n                                  document.removeEventListener('keydown', handleEscape);\n                                }\n                              };\n                              document.addEventListener('keydown', handleEscape);\n\n                              document.body.appendChild(modal);\n                            } else {\n                              // T√©l√©charger le document\n                              const link = document.createElement('a');\n                              link.href = application.drivingLicenseUrl;\n                              link.download = `Permis_conduire_${application.firstName}_${application.lastName}`;\n                              document.body.appendChild(link);\n                              link.click();\n                              document.body.removeChild(link);\n                            }\n                          }}\n                        >\n                          üëÅÔ∏è Voir\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-blue-700 hover:text-blue-800\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n\n                            // T√©l√©charger le document\n                            const link = document.createElement('a');\n                            link.href = application.drivingLicenseUrl;\n                            link.download = `Permis_conduire_${application.firstName}_${application.lastName}`;\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                        >\n                          üì• T√©l√©charger\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {application.professionalDocumentUrl && (\n                    <div className=\"flex items-center justify-between p-2 bg-purple-50 border border-purple-200 rounded\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-purple-600\">üìù</span>\n                        <span className=\"text-sm font-medium text-purple-800\">CV / Document professionnel</span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-purple-700 hover:text-purple-800\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n\n                            // D√©tecter si c'est une image ou un document\n                            const isImage = application.professionalDocumentUrl.startsWith('data:image/');\n\n                            if (isImage) {\n                              // Afficher l'image dans une modal\n                              const modal = document.createElement('div');\n                              modal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-4';\n                              modal.style.zIndex = '9999';\n                              modal.style.cursor = 'pointer';\n\n                              const modalContent = document.createElement('div');\n                              modalContent.className = 'relative max-w-full max-h-full';\n                              modalContent.innerHTML = `\n                                <img src=\"${application.professionalDocumentUrl}\"\n                                     class=\"max-w-full max-h-full object-contain\"\n                                     alt=\"CV de ${application.firstName} ${application.lastName}\" />\n                                <button class=\"absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 text-2xl font-bold\">&times;</button>\n                              `;\n\n                              modal.appendChild(modalContent);\n\n                              const closeModal = () => {\n                                try {\n                                  if (modal && document.body.contains(modal)) {\n                                    document.body.removeChild(modal);\n                                  }\n                                } catch (error) {\n                                  console.log('Modal already removed');\n                                }\n                              };\n\n                              modalContent.addEventListener('click', (e) => e.stopPropagation());\n                              const closeBtn = modalContent.querySelector('button');\n                              closeBtn?.addEventListener('click', (e) => { e.stopPropagation(); closeModal(); });\n                              modal.addEventListener('click', closeModal);\n\n                              const handleEscape = (e: KeyboardEvent) => {\n                                if (e.key === 'Escape') {\n                                  closeModal();\n                                  document.removeEventListener('keydown', handleEscape);\n                                }\n                              };\n                              document.addEventListener('keydown', handleEscape);\n\n                              document.body.appendChild(modal);\n                            } else {\n                              // T√©l√©charger le document\n                              const link = document.createElement('a');\n                              link.href = application.professionalDocumentUrl;\n                              link.download = `CV_${application.firstName}_${application.lastName}`;\n                              document.body.appendChild(link);\n                              link.click();\n                              document.body.removeChild(link);\n                            }\n                          }}\n                        >\n                          üëÅÔ∏è Voir\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-purple-700 hover:text-purple-800\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n\n                            // T√©l√©charger le document\n                            const link = document.createElement('a');\n                            link.href = application.professionalDocumentUrl;\n                            link.download = `CV_${application.firstName}_${application.lastName}`;\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                        >\n                          üì• T√©l√©charger\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {!application.idDocumentUrl && !application.drivingLicenseUrl && !application.professionalDocumentUrl && (\n                    <div className=\"p-2 bg-gray-50 border border-gray-200 rounded text-center\">\n                      <span className=\"text-sm text-gray-500\">Aucun document fourni</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={() => handleRespondToApplication(application.id, 'approve')}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  disabled={respondToApplicationMutation.isPending}\n                >\n                  ‚úÖ Accepter\n                </Button>\n                <Button\n                  onClick={() => handleRespondToApplication(application.id, 'reject')}\n                  variant=\"destructive\"\n                  className=\"flex-1\"\n                  disabled={respondToApplicationMutation.isPending}\n                >\n                  ‚ùå Rejeter\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))\n      )}\n    </div>\n  );\n}\n\n// Component to fetch and display patient information\nconst PatientInfo = ({ order }: { order: any }) => {\n  const [patientData, setPatientData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPatientData = async () => {\n      if (order.user?.firstName) {\n        // Si les donn√©es utilisateur sont d√©j√† pr√©sentes\n        setPatientData(order.user);\n        setLoading(false);\n        return;\n      }\n\n      if (!order.userId) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/users/${order.userId}`, {\n          credentials: 'include'\n        });\n        \n        if (response.ok) {\n          const userData = await response.json();\n          setPatientData(userData);\n        } else {\n          console.error('Failed to fetch patient data');\n        }\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPatientData();\n  }, [order.userId, order.user]);\n\n  if (loading) {\n    return (\n      <span className=\"flex items-center gap-2\">\n        <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-gray-400\"></div>\n        Chargement des informations patient...\n      </span>\n    );\n  }\n\n  if (patientData?.firstName) {\n    return (\n      <span>\n        Patient: {patientData.firstName} {patientData.lastName || ''} ‚Ä¢ {patientData.phone || 'T√©l√©phone non disponible'}\n      </span>\n    );\n  }\n\n  // Essayer les champs directs de la commande\n  if (order.patientName || order.customerName) {\n    const patientName = order.patientName || order.customerName;\n    const phone = order.patientPhone || order.customerPhone || order.phone || 'T√©l√©phone non disponible';\n    return <span>Patient: {patientName} ‚Ä¢ {phone}</span>;\n  }\n\n  // Si on a juste un t√©l√©phone\n  if (order.phone) {\n    return <span>Patient: T√©l√©phone {order.phone}</span>;\n  }\n\n  // Fallback avec ID\n  if (order.userId) {\n    return <span>Patient: ID {order.userId.slice(0, 8)} ‚Ä¢ Informations non disponibles</span>;\n  }\n\n  return <span>Patient: Informations non disponibles</span>;\n};\n\n// Component to display prescription image\nconst PrescriptionImage = ({ prescriptionId, className }: { prescriptionId: string, className?: string }) => {\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchImage = async () => {\n      try {\n        const response = await apiRequest(`/api/prescriptions/${prescriptionId}`, 'GET');\n        const prescription = await response.json();\n        setImageUrl(prescription.imageUrl);\n      } catch (error) {\n        console.error('Error fetching prescription:', error);\n        setImageUrl(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchImage();\n  }, [prescriptionId]);\n\n  const openImageModal = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!imageUrl) return;\n\n    // Cr√©er la modal avec de meilleurs styles\n    const modal = document.createElement('div');\n    modal.className = 'fixed inset-0 bg-black bg-opacity-95 flex items-center justify-center p-4';\n    modal.style.zIndex = '99999';\n    modal.style.cursor = 'zoom-out';\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'relative flex items-center justify-center max-w-[95vw] max-h-[95vh]';\n    modalContent.style.cursor = 'auto';\n\n    const img = document.createElement('img');\n    img.src = imageUrl;\n    img.alt = 'Photo de l\\'ordonnance';\n    img.className = 'max-w-full max-h-full object-contain rounded-lg shadow-2xl';\n    img.style.cursor = 'zoom-out';\n\n    const closeBtn = document.createElement('button');\n    closeBtn.innerHTML = '√ó';\n    closeBtn.className = 'absolute -top-12 right-0 text-white bg-red-600 hover:bg-red-700 rounded-full w-10 h-10 flex items-center justify-center text-2xl font-bold transition-all duration-200 shadow-lg';\n    closeBtn.style.cursor = 'pointer';\n    closeBtn.title = 'Fermer (√âchap)';\n\n    modalContent.appendChild(img);\n    modalContent.appendChild(closeBtn);\n    modal.appendChild(modalContent);\n\n    const closeModal = () => {\n      try {\n        if (modal && document.body.contains(modal)) {\n          modal.style.opacity = '0';\n          setTimeout(() => {\n            if (document.body.contains(modal)) {\n              document.body.removeChild(modal);\n            }\n          }, 200);\n        }\n      } catch (error) {\n        console.log('Modal already removed');\n      }\n    };\n\n    // Emp√™cher la fermeture quand on clique sur l'image\n    modalContent.addEventListener('click', (e) => e.stopPropagation());\n    \n    // Fermer avec le bouton X\n    closeBtn.addEventListener('click', (e) => {\n      e.stopPropagation();\n      closeModal();\n    });\n\n    // Fermer en cliquant sur le fond\n    modal.addEventListener('click', closeModal);\n\n    // Fermer avec Escape\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        closeModal();\n        document.removeEventListener('keydown', handleEscape);\n      }\n    };\n    document.addEventListener('keydown', handleEscape);\n\n    // Animation d'entr√©e\n    modal.style.opacity = '0';\n    document.body.appendChild(modal);\n    setTimeout(() => {\n      modal.style.opacity = '1';\n      modal.style.transition = 'opacity 0.2s ease-in-out';\n    }, 10);\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className || 'w-full h-64'} flex items-center justify-center bg-gray-100 rounded-lg border`}>\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n          <p className=\"text-sm text-gray-600\">Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!imageUrl) {\n    return (\n      <div className={`${className || 'w-full h-64'} flex flex-col items-center justify-center bg-gray-100 text-gray-500 rounded-lg border`}>\n        <span className=\"text-4xl mb-2\">üìÑ</span>\n        <p className=\"text-sm font-medium\">Image non disponible</p>\n        <p className=\"text-xs text-gray-400 mt-1\">L'ordonnance n'a pas pu √™tre charg√©e</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative group inline-block\">\n      <img\n        src={imageUrl}\n        alt=\"Photo de l'ordonnance\"\n        className={`${className || 'max-w-full h-auto'} cursor-pointer rounded-lg border shadow-sm hover:shadow-md transition-all duration-200 group-hover:brightness-95 block`}\n        onClick={openImageModal}\n      />\n      <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 rounded-lg flex items-center justify-center\">\n        <div className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-white bg-opacity-90 rounded-full p-2 shadow-lg\">\n          <svg className=\"w-5 h-5 text-gray-700\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7\" />\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Component for handling ready-for-delivery orders\nconst ReadyForDeliveryOrders = ({ orders }: { orders: any[] }) => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch delivery personnel\n  const { data: deliveryPersonnel, isLoading: personnelLoading } = useQuery({\n    queryKey: ['/api/pharmacien/delivery-personnel'],\n    enabled: true\n  });\n\n  // Assign delivery person mutation\n  const assignDeliveryMutation = useMutation({\n    mutationFn: async ({ orderId, deliveryPersonId }: { orderId: string, deliveryPersonId: string }) => {\n      const response = await apiRequest(`/api/pharmacien/orders/${orderId}/assign-delivery`, 'POST', {\n        deliveryPersonId\n      });\n      if (!response.ok) {\n        throw new Error('Failed to assign delivery person');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pharmacien/orders'] });\n      toast({\n        title: \"Livreur assign√©\",\n        description: \"Le livreur a √©t√© assign√© avec succ√®s √† cette commande\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'assigner le livreur\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const readyOrders = orders?.filter((order: any) => order.status === 'ready_for_delivery') || [];\n\n  if (readyOrders.length === 0) {\n    return (\n      <div className=\"border rounded-lg p-6 bg-gray-50 text-center\">\n        <div className=\"text-gray-400 mb-2\">üì¶</div>\n        <h4 className=\"font-medium text-gray-700 mb-2\">Aucune commande pr√™te pour livraison</h4>\n        <p className=\"text-sm text-gray-600\">\n          Les commandes pr√™tes appara√Ætront ici pour que vous puissiez assigner un livreur\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"text-blue-600 text-lg\">‚ÑπÔ∏è</div>\n          <div>\n            <h4 className=\"font-medium text-blue-900 mb-1\">Gestion des Livraisons</h4>\n            <p className=\"text-sm text-blue-700\">\n              Choisissez le livreur que vous souhaitez pour chaque commande.\n              Une fois assign√©, le livreur recevra une notification et pourra commencer la livraison.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {readyOrders.map((order: any) => (\n        <div key={order.id} className=\"border rounded-lg p-4 bg-green-50 border-green-200\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <h4 className=\"font-semibold text-green-900\">Commande #{order.id.slice(0, 8)}</h4>\n              <p className=\"text-sm text-green-700\">\n                Patient: {order.user?.firstName} {order.user?.lastName} ‚Ä¢ {order.user?.phone}\n              </p>\n            </div>\n            <Badge className=\"bg-green-600 text-white\">Pr√™te pour livraison</Badge>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div className=\"bg-white rounded-lg p-3 border border-green-200\">\n              <p className=\"text-sm font-medium text-gray-700 mb-1\">Montant total</p>\n              <p className=\"text-lg font-bold text-green-600\">{(() => {\n                if (order.totalAmount && order.totalAmount !== '0' && order.totalAmount !== '0.00') {\n                  return `${parseFloat(order.totalAmount).toFixed(0)} FCFA`;\n                }\n                // Calculer le total √† partir des m√©dicaments si disponible\n                try {\n                  const medications = typeof order.medications === 'string' ? JSON.parse(order.medications) : (order.medications || []);\n                  const total = medications.reduce((sum: number, med: any) => {\n                    const price = parseFloat(med.price) || 0;\n                    const isAvailable = med.available !== false;\n                    return sum + (price > 0 && isAvailable ? price : 0);\n                  }, 0);\n                  return total > 0 ? `${total.toFixed(0)} FCFA` : 'En cours d\\'√©valuation';\n                } catch (error) {\n                  console.error('Error calculating total for ready order:', error);\n                  return 'En cours d\\'√©valuation';\n                }\n              })()}</p>\n            </div>\n            <div className=\"bg-white rounded-lg p-3 border border-green-200\">\n              <p className=\"text-sm font-medium text-gray-700 mb-1\">Date de commande</p>\n              <p className=\"text-sm text-gray-600\">{new Date(order.createdAt).toLocaleDateString(\"fr-FR\")}</p>\n            </div>\n          </div>\n\n          <div className=\"mb-4 bg-white rounded-lg p-3 border border-green-200\">\n            <p className=\"text-sm font-medium text-gray-700 mb-1\">üìç Adresse de livraison</p>\n            <p className=\"text-sm text-gray-600\">{order.deliveryAddress}</p>\n          </div>\n\n          {/* Delivery assignment section */}\n          {order.deliveryPersonId ? (\n            <div className=\"bg-white rounded-lg p-4 border-2 border-green-300\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                    üö¥\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-green-700\">‚úÖ Livreur assign√© avec succ√®s</p>\n                    <p className=\"text-sm text-gray-600\">\n                      <strong>\n                        {deliveryPersonnel?.find((p: any) => p.id === order.deliveryPersonId)?.firstName} {' '}\n                        {deliveryPersonnel?.find((p: any) => p.id === order.deliveryPersonId)?.lastName}\n                      </strong>\n                      {' ‚Ä¢ '}\n                      {deliveryPersonnel?.find((p: any) => p.id === order.deliveryPersonId)?.phone}\n                    </p>\n                  </div>\n                </div>\n                <Badge variant=\"outline\" className=\"text-green-700 border-green-300 bg-green-50\">\n                  üöö En cours de livraison\n                </Badge>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-white rounded-lg p-4 border-2 border-orange-300\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                  üë§\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-orange-900\">\n                    üîî Choisir et assigner un livreur\n                  </Label>\n                  <p className=\"text-xs text-orange-700 mt-1\">\n                    S√©lectionnez le livreur que vous souhaitez pour chaque commande.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Select\n                  onValueChange={(deliveryPersonId) => {\n                    assignDeliveryMutation.mutate({ orderId: order.id, deliveryPersonId });\n                  }}\n                  disabled={assignDeliveryMutation.isPending || personnelLoading}\n                >\n                  <SelectTrigger className=\"flex-1 border-orange-300 focus:border-orange-500\">\n                    <SelectValue placeholder=\"S√©lectionner un livreur...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {deliveryPersonnel?.map((person: any) => (\n                      <SelectItem key={person.id} value={person.id}>\n                        <div className=\"flex items-center justify-between w-full\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span>üö¥</span>\n                            <span>{person.firstName} {person.lastName}</span>\n                            <span className=\"text-gray-500\">‚Ä¢ {person.phone}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1 ml-2\">\n                            <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium\">\n                              {person.dailyOrderCount || 0} cmd/jour\n                            </span>\n                          </div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {assignDeliveryMutation.isPending && (\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-orange-600\"></div>\n                )}\n              </div>\n\n              {personnelLoading && (\n                <p className=\"text-xs text-gray-500 mt-2 flex items-center\">\n                  <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-gray-400 mr-1\"></div>\n                  Chargement des livreurs disponibles...\n                </p>\n              )}\n              {!personnelLoading && (!deliveryPersonnel || deliveryPersonnel.length === 0) && (\n                <p className=\"text-xs text-red-500 mt-2 flex items-center\">\n                  <span className=\"mr-1\">‚ö†Ô∏è</span>\n                  Aucun livreur disponible pour le moment\n                </p>\n              )}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default function DashboardPharmacien() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"orders\");\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [medicationStatuses, setMedicationStatuses] = useState<Record<string, {available: boolean, surBon: boolean}>>({});\n  const [visibleImages, setVisibleImages] = useState<Record<string, boolean>>({});\n  const [medicationPrices, setMedicationPrices] = useState<Record<string, string>>({});\n  const [newMedication, setNewMedication] = useState({ name: '', price: '', surBon: false });\n  const [orderMedications, setOrderMedications] = useState<Record<string, any[]>>({});\n  const [editingMedication, setEditingMedication] = useState<Record<string, boolean>>({});\n  const [medicationNames, setMedicationNames] = useState<Record<string, string>>({});\n\n  // √âtats pour l'authentification des param√®tres\n  const [showPasswordDialog, setShowPasswordDialog] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [pendingAction, setPendingAction] = useState<string | null>(null);\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // Mutation pour mettre √† jour le statut des commandes\n  const updateOrderMutation = useMutation({\n    mutationFn: ({ orderId, status }: { orderId: string; status: string }) =>\n      apiRequest(`/api/pharmacien/orders/${orderId}/status`, \"POST\", { status }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Commande mise √† jour\",\n        description: `Commande ${variables.status === 'confirmed' ? 'valid√©e' : variables.status === 'rejected' ? 'rejet√©e' : 'mise √† jour'} avec succ√®s`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pharmacien/orders\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre √† jour la commande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour mettre √† jour les m√©dicaments\n  const updateMedicationsMutation = useMutation({\n    mutationFn: ({ orderId, medications }: { orderId: string; medications: any[] }) =>\n      apiRequest(`/api/pharmacien/orders/${orderId}/medications`, \"POST\", { medications }),\n    onSuccess: () => {\n      toast({\n        title: \"M√©dicaments mis √† jour\",\n        description: \"Les informations des m√©dicaments ont √©t√© sauvegard√©es\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pharmacien/orders\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre √† jour les m√©dicaments\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour envoyer la r√©ponse au patient\n  const sendResponseMutation = useMutation({\n    mutationFn: ({ orderId, medications }: { orderId: string; medications: any[] }) =>\n      apiRequest(`/api/pharmacien/orders/${orderId}/send-response`, \"POST\", { medications }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"R√©ponse envoy√©e\",\n        description: \"La r√©ponse a √©t√© envoy√©e au patient avec succ√®s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pharmacien/orders\"] });\n\n      // Ne r√©initialiser que les donn√©es de la commande sp√©cifique qui a √©t√© trait√©e\n      const { orderId } = variables;\n      setMedicationPrices(prev => {\n        const updated = { ...prev };\n        Object.keys(updated).forEach(key => {\n          if (key.startsWith(orderId)) {\n            delete updated[key];\n          }\n        });\n        return updated;\n      });\n      setMedicationStatuses(prev => {\n        const updated = { ...prev };\n        Object.keys(updated).forEach(key => {\n          if (key.startsWith(orderId)) {\n            delete updated[key];\n          }\n        });\n        return updated;\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer la r√©ponse\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/pharmacien/orders\"],\n    refetchInterval: 5000 // Refresh every 5 seconds\n  });\n  const { data: prescriptions, isLoading: prescriptionsLoading } = useQuery({\n    queryKey: [\"/api/pharmacien/prescriptions\"],\n    refetchInterval: 5000\n  });\n  // Fetch pharmacy data to potentially get pharmacy names\n  const { data: pharmacies } = useQuery({\n    queryKey: [\"/api/pharmacies\"],\n    enabled: true\n  });\n\n  // Function to get prescription image\n  const getPrescriptionImage = async (prescriptionId: string) => {\n    try {\n      const response = await apiRequest(`/api/prescriptions/${prescriptionId}`, 'GET');\n      return response.imageUrl;\n    } catch (error) {\n      console.error('Error fetching prescription:', error);\n      return null;\n    }\n  };\n\n  const handleOrderUpdate = (orderId: string, status: string) => {\n    updateOrderMutation.mutate({ orderId, status });\n  };\n\n  const handleMedicationUpdate = (orderId: string, medications: any[]) => {\n    updateMedicationsMutation.mutate({ orderId, medications });\n  };\n\n  const toggleMedicationStatus = (orderId: string, medIndex: number, field: 'available' | 'surBon', value: boolean) => {\n    const key = `${orderId}-${medIndex}`;\n    setMedicationStatuses(prev => ({\n      ...prev,\n      [key]: {\n        ...prev[key],\n        [field]: value\n      }\n    }));\n  };\n\n  const updateMedicationPrice = (orderId: string, medIndex: number, price: string) => {\n    const key = `${orderId}-${medIndex}`;\n    setMedicationPrices(prev => ({\n      ...prev,\n      [key]: price\n    }));\n  };\n\n  // Fonction pour ajouter un nouveau m√©dicament √† une commande\n  const addMedicationToOrder = (orderId: string) => {\n    if (!newMedication.name.trim() || !newMedication.price) {\n      toast({\n        title: \"Validation requise\",\n        description: \"Veuillez saisir le nom et le prix du m√©dicament\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Ajouter le m√©dicament √† la liste locale pour cette commande\n    setOrderMedications(prev => {\n      const currentMeds = prev[orderId] || [];\n      return {\n        ...prev,\n        [orderId]: [...currentMeds, {\n          name: newMedication.name,\n          price: newMedication.price,\n          surBon: newMedication.surBon,\n          available: true\n        }]\n      };\n    });\n\n    // R√©initialiser le formulaire\n    setNewMedication({ name: '', price: '', surBon: false });\n\n    toast({\n      title: \"M√©dicament ajout√©\",\n      description: `${newMedication.name} a √©t√© ajout√© √† la commande`,\n    });\n  };\n\n  // Fonction pour supprimer un m√©dicament ajout√© par le pharmacien\n  const removePharmaticistMedication = (orderId: string, index: number) => {\n    setOrderMedications(prev => {\n      const currentMeds = prev[orderId] || [];\n      const updatedMeds = currentMeds.filter((_, i) => i !== index);\n      return {\n        ...prev,\n        [orderId]: updatedMeds\n      };\n    });\n\n    toast({\n      title: \"M√©dicament supprim√©\",\n      description: \"Le m√©dicament a √©t√© retir√© de la commande\",\n    });\n  };\n\n  // Fonction pour modifier le nom d'un m√©dicament patient\n  const updateMedicationName = (orderId: string, medIndex: number, newName: string, isPatientMed: boolean = true) => {\n    const key = isPatientMed ? `${orderId}-${medIndex}` : `pharmacist-${orderId}-${medIndex}`;\n    setMedicationNames(prev => ({\n      ...prev,\n      [key]: newName\n    }));\n  };\n\n  // Fonction pour basculer le mode d'√©dition d'un m√©dicament\n  const toggleEditMode = (statusKey: string) => {\n    setEditingMedication(prev => ({\n      ...prev,\n      [statusKey]: !prev[statusKey]\n    }));\n  };\n\n  // Fonction pour v√©rifier le mot de passe avant l'acc√®s aux param√®tres\n  const verifyPasswordForSettings = async (password: string) => {\n    try {\n      setIsVerifying(true);\n\n      // V√©rifier le mot de passe en tentant une connexion temporaire\n      const response = await apiRequest('/api/auth/verify-password', 'POST', {\n        phone: user?.phone,\n        password: password\n      });\n\n      if (!response.ok) {\n        throw new Error('Mot de passe incorrect');\n      }\n\n      return true;\n    } catch (error) {\n      throw new Error('Mot de passe incorrect');\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  // Fonction pour g√©rer l'acc√®s aux param√®tres avec authentification\n  const handleSecureAccess = (action: string) => {\n    setPendingAction(action);\n    setShowPasswordDialog(true);\n  };\n\n  // Fonction pour confirmer l'authentification et ex√©cuter l'action\n  const handlePasswordConfirmation = async () => {\n    if (!password.trim()) {\n      toast({\n        title: \"Mot de passe requis\",\n        description: \"Veuillez saisir votre mot de passe\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await verifyPasswordForSettings(password);\n\n      // Mot de passe correct, ex√©cuter l'action\n      switch (pendingAction) {\n        case 'pharmacy-profile':\n          window.location.href = '/pharmacy-profile';\n          break;\n        case 'create-pharmacy':\n          window.location.href = '/create-pharmacy';\n          break;\n        case 'applications':\n          setActiveTab('applications');\n          break;\n        default:\n          break;\n      }\n\n      // R√©initialiser les √©tats\n      setShowPasswordDialog(false);\n      setPassword(\"\");\n      setPendingAction(null);\n\n      toast({\n        title: \"Acc√®s autoris√©\",\n        description: \"Authentification r√©ussie\",\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Erreur d'authentification\",\n        description: \"Mot de passe incorrect. Veuillez r√©essayer.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSendResponse = (orderId: string, originalMedications: any[]) => {\n    // Traiter les m√©dicaments du patient\n    const patientMedications = originalMedications.map((med: any, index: number) => {\n      const statusKey = `${orderId}-${index}`;\n      const priceKey = `${orderId}-${index}`;\n      const status = medicationStatuses[statusKey] || { available: true, surBon: med.surBon || false };\n      const price = medicationPrices[priceKey] || '';\n      const name = medicationNames[statusKey] || med.name;\n\n      console.log(`Patient med ${index}:`, {\n        name,\n        price: price ? parseFloat(price) : 0,\n        status,\n        priceKey,\n        rawPrice: price\n      });\n\n      return {\n        ...med,\n        name,\n        price: price ? parseFloat(price) : 0,\n        available: status.available,\n        surBon: status.surBon\n      };\n    });\n\n    // Traiter les m√©dicaments ajout√©s par le pharmacien\n    const pharmacistMedications = (orderMedications[orderId] || []).map((med: any, index: number) => {\n      const statusKey = `pharmacist-${orderId}-${index}`;\n      const priceKey = `pharmacist-${orderId}-${index}`;\n      const status = medicationStatuses[statusKey] || { available: med.available, surBon: med.surBon };\n      const price = medicationPrices[priceKey] || med.price || '';\n      const name = medicationNames[statusKey] || med.name;\n\n      console.log(`Pharmacist med ${index}:`, {\n        name,\n        price: price ? parseFloat(price) : (med.price ? parseFloat(med.price) : 0),\n        status,\n        priceKey,\n        rawPrice: price,\n        medPrice: med.price\n      });\n\n      return {\n        ...med,\n        name,\n        price: price ? parseFloat(price) : (med.price ? parseFloat(med.price) : 0),\n        available: status.available,\n        surBon: status.surBon\n      };\n    });\n\n    const allMedications = [...patientMedications, ...pharmacistMedications];\n\n    console.log('Final medications being sent:', allMedications);\n    console.log('Current medicationPrices state:', medicationPrices);\n    console.log('Current orderMedications state:', orderMedications);\n\n    sendResponseMutation.mutate({ orderId, medications: allMedications });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-green-600 mb-2\">\n                üíä Tableau de bord Pharmacien\n              </h1>\n              <p className=\"text-gray-600\">\n                Bienvenue Dr. {user?.firstName} ! G√©rez votre pharmacie et les commandes\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleSecureAccess('pharmacy-profile')}\n                className=\"bg-blue-50 hover:bg-blue-100 border-blue-200\"\n              >\n                üîí üè™ G√©rer la pharmacie\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleSecureAccess('applications')}\n                className=\"bg-orange-50 hover:bg-orange-100 border-orange-200\"\n              >\n                üîí üë• Candidatures Livreurs\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleSecureAccess('create-pharmacy')}\n                className=\"bg-green-50 hover:bg-green-100 border-green-200\"\n              >\n                üîí ‚ûï Cr√©er pharmacie\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"orders\">\n              Nouvelles Commandes\n              {orders?.filter((o: any) => o.status === 'pending')?.length > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {orders.filter((o: any) => o.status === 'pending').length}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"preparation\">\n              Livraison & Livreurs\n              {orders?.filter((o: any) => o.status === 'confirmed' || o.status === 'ready_for_delivery')?.length > 0 && (\n                <Badge variant=\"outline\" className=\"ml-2\">\n                  {orders.filter((o: any) => o.status === 'confirmed' || o.status === 'ready_for_delivery').length}\n                </Badge>\n              )}\n            </TabsTrigger>\n          </TabsList>\n\n          {/* R√©ception des Commandes */}\n          <TabsContent value=\"orders\">\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <Card\n                  className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                  onClick={() => setActiveTab(\"orders\")}\n                  data-testid=\"card-nouvelles-commandes\"\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Nouvelles Commandes</p>\n                        <p className=\"text-2xl font-bold text-orange-600\">\n                          {ordersLoading ? \"...\" : (orders?.filter((o: any) => o.status === 'pending')?.length || 0)}\n                        </p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                        üîî\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card\n                  className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                  onClick={() => setActiveTab(\"preparation\")}\n                  data-testid=\"card-en-preparation\"\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">En Pr√©paration</p>\n                        <p className=\"text-2xl font-bold text-blue-600\">\n                          {ordersLoading ? \"...\" : (orders?.filter((o: any) => o.status === 'confirmed' || o.status === 'preparing')?.length || 0)}\n                        </p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                        ‚öóÔ∏è\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card\n                  className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                  onClick={() => setActiveTab(\"preparation\")}\n                  data-testid=\"card-pretes\"\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Pr√™tes</p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {ordersLoading ? \"...\" : (orders?.filter((o: any) => o.status === 'ready_for_delivery')?.length || 0)}\n                        </p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                        ‚úÖ\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card\n                  className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                  data-testid=\"card-livrees\"\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Livr√©es</p>\n                        <p className=\"text-2xl font-bold text-purple-600\">\n                          {ordersLoading ? \"...\" : (orders?.filter((o: any) => o.status === 'delivered')?.length || 0)}\n                        </p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                        üöö\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {ordersLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto\"></div>\n                  <p className=\"mt-4 text-gray-600\">Chargement des commandes...</p>\n                </div>\n              ) : !orders || orders?.filter((order: any) => !['ready_for_delivery', 'in_transit', 'delivered', 'cancelled'].includes(order.status))?.length === 0 ? (\n                <Card className=\"text-center py-8\">\n                  <CardContent>\n                    <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      üìã\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">Aucune commande</h3>\n                    <p className=\"text-sm text-gray-600\">Les nouvelles commandes appara√Ætront ici</p>\n                  </CardContent>\n                </Card>\n              ) : orders?.filter((order: any) => !['ready_for_delivery', 'in_transit', 'delivered', 'cancelled'].includes(order.status))?.map((order: any) => (\n                <Card key={order.id} className=\"border-l-4 border-l-orange-500\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">\n                        Commande #{order.id.slice(0, 8)}\n                      </CardTitle>\n                      <Badge variant={order.status === 'pending' ? \"secondary\" : \"outline\"}>\n                        {order.status === 'pending' ? 'Nouvelle' :\n                         order.status === 'confirmed' ? 'Confirm√©e' :\n                         order.status === 'preparing' ? 'En pr√©paration' :\n                         order.status}\n                      </Badge>\n                    </div>\n                    <CardDescription>\n                      <PatientInfo order={order} />\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm\"><strong>Pharmacie:</strong> {(() => {\n                        if (order.pharmacy?.name) {\n                          return order.pharmacy.name;\n                        }\n                        if (order.pharmacyId) {\n                          // Essayer de r√©cup√©rer le nom depuis les donn√©es de pharmacies\n                          const pharmacy = pharmacies?.find(p => p.id === order.pharmacyId);\n                          if (pharmacy?.name) {\n                            return pharmacy.name;\n                          }\n                        }\n                        return 'En cours d\\'attribution';\n                      })()}</p>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700\">Adresse de livraison</p>\n                        <p className=\"text-sm text-gray-600\">{order.deliveryAddress}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700\">Date de commande</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {new Date(order.createdAt).toLocaleDateString(\"fr-FR\")}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* M√©dicaments demand√©s */}\n                    <div className=\"mb-4\">\n                      <p className=\"text-sm font-medium text-gray-700 mb-2\">M√©dicaments demand√©s</p>\n                      <div className=\"bg-gray-50 rounded-lg p-3\">\n                        {order.medications && typeof order.medications === 'string' ? (\n                          JSON.parse(order.medications).map((med: any, index: number) => (\n                            <div key={index} className=\"flex items-center justify-between text-sm py-1\">\n                              <span>{med.name}</span>\n                              {med.surBon && <Badge variant=\"outline\" className=\"text-xs\">Sur BON</Badge>}\n                            </div>\n                          ))\n                        ) : order.medications && Array.isArray(order.medications) ? (\n                          order.medications.map((med: any, index: number) => (\n                            <div key={index} className=\"flex items-center justify-between text-sm py-1\">\n                              <span>{med.name}</span>\n                              {med.surBon && <Badge variant=\"outline\" className=\"text-xs\">Sur BON</Badge>}\n                            </div>\n                          ))\n                        ) : (\n                          <p className=\"text-sm text-gray-500\">Aucun m√©dicament sp√©cifi√©</p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2 flex-wrap gap-2\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" data-testid={`button-view-prescription-${order.id}`}>\n                            üëÅÔ∏è Voir Ordonnance\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Ordonnance - Commande #{order.id.slice(0, 8)}</DialogTitle>\n                            <DialogDescription>\n                              Patient: {order.user?.firstName} {order.user?.lastName}\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            {/* Layout en deux colonnes pour ordonnance et documents */}\n                            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                              {/* Colonne gauche - Photo d'ordonnance */}\n                              <div>\n                                <h4 className=\"font-medium mb-3\">Photo de l'ordonnance</h4>\n                                {order.prescriptionId ? (\n                                  <div className=\"border rounded-lg p-4 bg-gray-50\">\n                                    <p className=\"text-sm text-gray-600 mb-3\">Ordonnance ID: {order.prescriptionId}</p>\n                                    <div className=\"bg-white rounded-lg overflow-hidden border\">\n                                      <PrescriptionImage\n                                        prescriptionId={order.prescriptionId}\n                                        className=\"w-full h-64 object-cover cursor-pointer hover:opacity-90 transition-opacity\"\n                                      />\n                                      <div className=\"p-2 bg-gray-50 text-center\">\n                                        <p className=\"text-xs text-gray-500\">Cliquez pour agrandir</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  <div className=\"border rounded-lg p-6 bg-yellow-50\">\n                                    <div className=\"text-center\">\n                                      <span className=\"text-4xl mb-2 block\">‚ö†Ô∏è</span>\n                                      <p className=\"text-sm text-yellow-700 font-medium\">Commande sans ordonnance</p>\n                                      <p className=\"text-xs text-yellow-600 mt-1\">Cette commande a √©t√© pass√©e sans ordonnance photographi√©e</p>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n\n                              {/* Colonne droite - Documents BON et informations */}\n                              <div>\n                                <h4 className=\"font-medium mb-3\">Documents BON et informations</h4>\n                                <div className=\"space-y-3\">\n                                  {/* Documents BON */}\n                                  {order.bonDocuments ? (\n                                    <div className=\"border rounded-lg p-4 bg-blue-50\">\n                                      <h5 className=\"font-medium text-blue-900 mb-2\">Documents BON upload√©s</h5>\n                                      <div className=\"space-y-2\">\n                                        {JSON.parse(order.bonDocuments).map((doc: any, index: number) => (\n                                          <div key={index} className=\"bg-white rounded border\">\n                                            <div className=\"flex items-center justify-between p-2\">\n                                              <div className=\"flex items-center space-x-2\">\n                                                <span className=\"text-blue-600\">üìÑ</span>\n                                                <span className=\"text-sm font-medium\">{doc.name}</span>\n                                              </div>\n                                              <Button\n                                                size=\"sm\"\n                                                variant=\"outline\"\n                                                onClick={(e) => {\n                                                  e.preventDefault();\n                                                  e.stopPropagation();\n                                                  const imageKey = `${order.id}-${index}`;\n                                                  setVisibleImages(prev => ({\n                                                    ...prev,\n                                                    [imageKey]: !prev[imageKey]\n                                                  }));\n                                                }}\n                                              >\n                                                {visibleImages[`${order.id}-${index}`] ? 'üëÅÔ∏è Cacher' : 'üëÅÔ∏è Voir'}\n                                              </Button>\n                                            </div>\n\n                                            {/* Image affich√©e directement */}\n                                            {visibleImages[`${order.id}-${index}`] && (\n                                              <div className=\"border-t p-4 bg-gray-50\">\n                                                <img\n                                                  src={doc.data}\n                                                  alt={`Document BON: ${doc.name}`}\n                                                  className=\"w-full max-h-80 object-contain rounded cursor-pointer hover:shadow-lg transition-shadow\"\n                                                  onClick={(e) => {\n                                                    e.preventDefault();\n                                                    e.stopPropagation();\n\n                                                    // Ouvrir en plein √©cran pour agrandir\n                                                    const modal = document.createElement('div');\n                                                    modal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-4';\n                                                    modal.style.zIndex = '9999';\n                                                    modal.style.cursor = 'pointer';\n\n                                                    const modalContent = document.createElement('div');\n                                                    modalContent.className = 'relative max-w-full max-h-full';\n                                                    modalContent.innerHTML = `\n                                                      <img src=\"${doc.data}\"\n                                                           class=\"max-w-full max-h-full object-contain\"\n                                                           alt=\"Document BON: ${doc.name}\" />\n                                                      <button class=\"absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 text-2xl font-bold\">&times;</button>\n                                                    `;\n\n                                                    modal.appendChild(modalContent);\n\n                                                    const closeModal = () => {\n                                                      try {\n                                                        if (modal && document.body.contains(modal)) {\n                                                          document.body.removeChild(modal);\n                                                        }\n                                                      } catch (error) {\n                                                        console.log('Modal already removed');\n                                                      }\n                                                    };\n\n                                                    modalContent.addEventListener('click', (e) => e.stopPropagation());\n                                                    const closeBtn = modalContent.querySelector('button');\n                                                    closeBtn?.addEventListener('click', (e) => { e.stopPropagation(); closeModal(); });\n                                                    modal.addEventListener('click', closeModal);\n\n                                                    const handleEscape = (e: KeyboardEvent) => {\n                                                      if (e.key === 'Escape') {\n                                                        closeModal();\n                                                        document.removeEventListener('keydown', handleEscape);\n                                                      }\n                                                    };\n                                                    document.addEventListener('keydown', handleEscape);\n\n                                                    document.body.appendChild(modal);\n                                                  }}\n                                                />\n                                                <p className=\"text-xs text-gray-500 mt-2 text-center\">\n                                                  Cliquez sur l'image pour l'agrandir\n                                                </p>\n                                              </div>\n                                            )}\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  ) : (\n                                    <div className=\"border rounded-lg p-4 bg-gray-50\">\n                                      <p className=\"text-sm text-gray-500 text-center\">Aucun document BON upload√©</p>\n                                    </div>\n                                  )}\n\n                                  {/* Informations suppl√©mentaires */}\n                                  <div className=\"border rounded-lg p-4 bg-gray-50\">\n                                    <h5 className=\"font-medium mb-2\">Informations de la commande</h5>\n                                    <div className=\"space-y-1 text-sm\">\n                                      <p><span className=\"font-medium\">Date:</span> {new Date(order.createdAt).toLocaleDateString(\"fr-FR\", {\n                                        weekday: 'long',\n                                        year: 'numeric',\n                                        month: 'long',\n                                        day: 'numeric',\n                                        hour: '2-digit',\n                                        minute: '2-digit'\n                                      })}</p>\n                                      <p><span className=\"font-medium\">Notes:</span> {order.deliveryNotes || \"Aucune note\"}</p>\n                                      {order.totalAmount && (\n                                        <p><span className=\"font-medium\">Montant estim√©:</span> {order.totalAmount} FCFA</p>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Gestion des m√©dicaments */}\n                            <div>\n                              <h4 className=\"font-medium mb-3\">Gestion des m√©dicaments</h4>\n\n                              {/* Section pour ajouter de nouveaux m√©dicaments */}\n                              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                                <h5 className=\"font-medium text-blue-900 mb-3\">‚ûï Ajouter des m√©dicaments depuis l'ordonnance</h5>\n                                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 mb-3\">\n                                  <Input\n                                    placeholder=\"Nom du m√©dicament\"\n                                    value={newMedication.name}\n                                    onChange={(e) => setNewMedication(prev => ({ ...prev, name: e.target.value }))}\n                                  />\n                                  <Input\n                                    type=\"number\"\n                                    placeholder=\"Prix (FCFA)\"\n                                    value={newMedication.price}\n                                    onChange={(e) => setNewMedication(prev => ({ ...prev, price: e.target.value }))}\n                                    min=\"0\"\n                                    step=\"1\"\n                                  />\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Switch\n                                      id={`new-med-surbon-${order.id}`}\n                                      checked={newMedication.surBon}\n                                      onCheckedChange={(checked) => setNewMedication(prev => ({ ...prev, surBon: checked }))}\n                                    />\n                                    <Label htmlFor={`new-med-surbon-${order.id}`} className=\"text-sm\">\n                                      Sur BON\n                                    </Label>\n                                  </div>\n                                </div>\n                                <Button\n                                  onClick={() => addMedicationToOrder(order.id)}\n                                  disabled={!newMedication.name.trim() || !newMedication.price}\n                                  size=\"sm\"\n                                  className=\"bg-blue-600 hover:bg-blue-700\"\n                                >\n                                  ‚ûï Ajouter ce m√©dicament\n                                </Button>\n                              </div>\n\n                              {/* Liste des m√©dicaments existants et ajout√©s */}\n                              <div className=\"space-y-3\">\n                                {/* M√©dicaments du patient */}\n                                {order.medications && typeof order.medications === 'string' ? (\n                                  JSON.parse(order.medications).map((med: any, index: number) => {\n                                    const statusKey = `${order.id}-${index}`;\n                                    const currentStatus = medicationStatuses[statusKey] || { available: true, surBon: med.surBon || false };\n\n                                    return (\n                                      <div key={index} className=\"border rounded-lg p-4 bg-white\">\n                                        <div className=\"flex items-center justify-between mb-3\">\n                                          {editingMedication[statusKey] ? (\n                                            <div className=\"flex items-center space-x-2 flex-1\">\n                                              <Input\n                                                value={medicationNames[statusKey] || med.name}\n                                                onChange={(e) => updateMedicationName(order.id, index, e.target.value, true)}\n                                                className=\"flex-1\"\n                                                placeholder=\"Nom du m√©dicament\"\n                                              />\n                                              <Button\n                                                size=\"sm\"\n                                                onClick={() => toggleEditMode(statusKey)}\n                                                className=\"bg-green-600 hover:bg-green-700\"\n                                              >\n                                                ‚úÖ\n                                              </Button>\n                                              <Button\n                                                size=\"sm\"\n                                                variant=\"outline\"\n                                                onClick={() => {\n                                                  setMedicationNames(prev => {\n                                                    const updated = { ...prev };\n                                                    delete updated[statusKey];\n                                                    return updated;\n                                                  });\n                                                  toggleEditMode(statusKey);\n                                                }}\n                                              >\n                                                ‚ùå\n                                              </Button>\n                                            </div>\n                                          ) : (\n                                            <div className=\"flex items-center space-x-2 flex-1\">\n                                              <h5 className=\"font-medium\">{medicationNames[statusKey] || med.name}</h5>\n                                              <Button\n                                                size=\"sm\"\n                                                variant=\"outline\"\n                                                onClick={() => toggleEditMode(statusKey)}\n                                                className=\"text-blue-600 hover:text-blue-700\"\n                                              >\n                                                ‚úèÔ∏è\n                                              </Button>\n                                            </div>\n                                          )}\n                                          <Badge variant={currentStatus.available ? \"default\" : \"destructive\"}>\n                                            {currentStatus.available ? \"Disponible\" : \"Indisponible\"}\n                                          </Badge>\n                                        </div>\n\n                                        <div className=\"grid grid-cols-2 gap-4 mb-3\">\n                                          <div className=\"flex items-center space-x-2\">\n                                            <Switch\n                                              id={`available-${statusKey}`}\n                                              checked={currentStatus.available}\n                                              onCheckedChange={(checked) =>\n                                                toggleMedicationStatus(order.id, index, 'available', checked)\n                                              }\n                                            />\n                                            <Label htmlFor={`available-${statusKey}`} className=\"text-sm\">\n                                              Disponible en stock\n                                            </Label>\n                                          </div>\n\n                                          <div className=\"flex items-center space-x-2\">\n                                            <Switch\n                                              id={`surbon-${statusKey}`}\n                                              checked={currentStatus.surBon}\n                                              onCheckedChange={(checked) =>\n                                                toggleMedicationStatus(order.id, index, 'surBon', checked)\n                                              }\n                                            />\n                                            <Label htmlFor={`surbon-${statusKey}`} className=\"text-sm\">\n                                              Sur BON (remboursable)\n                                            </Label>\n                                          </div>\n                                        </div>\n\n                                        {/* Prix du m√©dicament */}\n                                        <div className=\"mt-3\">\n                                          <Label htmlFor={`price-${statusKey}`} className=\"text-sm font-medium\">\n                                            Prix (FCFA)\n                                          </Label>\n                                          <Input\n                                            id={`price-${statusKey}`}\n                                            type=\"number\"\n                                            placeholder=\"Prix en FCFA\"\n                                            value={medicationPrices[statusKey] || ''}\n                                            onChange={(e) => updateMedicationPrice(order.id, index, e.target.value)}\n                                            className=\"mt-1\"\n                                            min=\"0\"\n                                            step=\"1\"\n                                          />\n                                        </div>\n                                      </div>\n                                    );\n                                  })\n                                ) : order.medications && Array.isArray(order.medications) ? (\n                                  order.medications.map((med: any, index: number) => {\n                                    const statusKey = `${order.id}-${index}`;\n                                    const currentStatus = medicationStatuses[statusKey] || { available: true, surBon: med.surBon || false };\n\n                                    return (\n                                      <div key={index} className=\"border rounded-lg p-4 bg-white\">\n                                        <div className=\"flex items-center justify-between mb-3\">\n                                          <h5 className=\"font-medium\">{med.name}</h5>\n                                          <Badge variant={currentStatus.available ? \"default\" : \"destructive\"}>\n                                            {currentStatus.available ? \"Disponible\" : \"Indisponible\"}\n                                          </Badge>\n                                        </div>\n\n                                        <div className=\"grid grid-cols-2 gap-4 mb-3\">\n                                          <div className=\"flex items-center space-x-2\">\n                                            <Switch\n                                              id={`available-${statusKey}`}\n                                              checked={currentStatus.available}\n                                              onCheckedChange={(checked) =>\n                                                toggleMedicationStatus(order.id, index, 'available', checked)\n                                              }\n                                            />\n                                            <Label htmlFor={`available-${statusKey}`} className=\"text-sm\">\n                                              Disponible en stock\n                                            </Label>\n                                          </div>\n\n                                          <div className=\"flex items-center space-x-2\">\n                                            <Switch\n                                              id={`surbon-${statusKey}`}\n                                              checked={currentStatus.surBon}\n                                              onCheckedChange={(checked) =>\n                                                toggleMedicationStatus(order.id, index, 'surBon', checked)\n                                              }\n                                            />\n                                            <Label htmlFor={`surbon-${statusKey}`} className=\"text-sm\">\n                                              Sur BON (remboursable)\n                                            </Label>\n                                          </div>\n                                        </div>\n\n                                        {/* Prix du m√©dicament */}\n                                        <div className=\"mt-3\">\n                                          <Label htmlFor={`price-${statusKey}`} className=\"text-sm font-medium\">\n                                            Prix (FCFA)\n                                          </Label>\n                                          <Input\n                                            id={`price-${statusKey}`}\n                                            type=\"number\"\n                                            placeholder=\"Prix en FCFA\"\n                                            value={medicationPrices[statusKey] || ''}\n                                            onChange={(e) => updateMedicationPrice(order.id, index, e.target.value)}\n                                            className=\"mt-1\"\n                                            min=\"0\"\n                                            step=\"1\"\n                                          />\n                                        </div>\n                                      </div>\n                                    );\n                                  })\n                                ) : (\n                                  <p className=\"text-sm text-gray-500\">Aucun m√©dicament sp√©cifi√© par le patient</p>\n                                )}\n\n                                {/* M√©dicaments ajout√©s par le pharmacien */}\n                                {orderMedications[order.id] && orderMedications[order.id].length > 0 && (\n                                  <div className=\"border-t pt-4\">\n                                    <h5 className=\"font-medium text-blue-900 mb-3\">üíä M√©dicaments ajout√©s depuis l'ordonnance</h5>\n                                    <div className=\"space-y-3\">\n                                      {orderMedications[order.id].map((med: any, index: number) => {\n                                        const statusKey = `pharmacist-${order.id}-${index}`;\n                                        const currentStatus = medicationStatuses[statusKey] || { available: med.available, surBon: med.surBon };\n\n                                        return (\n                                          <div key={statusKey} className=\"border rounded-lg p-4 bg-blue-50\">\n                                            <div className=\"flex items-center justify-between mb-3\">\n                                              {editingMedication[statusKey] ? (\n                                                <div className=\"flex items-center space-x-2 flex-1\">\n                                                  <Input\n                                                    value={medicationNames[statusKey] || med.name}\n                                                    onChange={(e) => updateMedicationName(order.id, index, e.target.value, false)}\n                                                    className=\"flex-1\"\n                                                    placeholder=\"Nom du m√©dicament\"\n                                                  />\n                                                  <Button\n                                                    size=\"sm\"\n                                                    onClick={() => toggleEditMode(statusKey)}\n                                                    className=\"bg-green-600 hover:bg-green-700\"\n                                                  >\n                                                    ‚úÖ\n                                                  </Button>\n                                                  <Button\n                                                    size=\"sm\"\n                                                    variant=\"outline\"\n                                                    onClick={() => {\n                                                      setMedicationNames(prev => {\n                                                        const updated = { ...prev };\n                                                        delete updated[statusKey];\n                                                        return updated;\n                                                      });\n                                                      toggleEditMode(statusKey);\n                                                    }}\n                                                  >\n                                                    ‚ùå\n                                                  </Button>\n                                                  <Button\n                                                    size=\"sm\"\n                                                    variant=\"destructive\"\n                                                    onClick={() => removePharmaticistMedication(order.id, index)}\n                                                    className=\"text-red-600 hover:text-red-700 bg-red-100 hover:bg-red-200\"\n                                                    title=\"Supprimer ce m√©dicament\"\n                                                  >\n                                                    üóëÔ∏è\n                                                  </Button>\n                                                </div>\n                                              ) : (\n                                                <div className=\"flex items-center space-x-2 flex-1\">\n                                                  <h5 className=\"font-medium text-blue-900\">{medicationNames[statusKey] || med.name}</h5>\n                                                  <Button\n                                                    size=\"sm\"\n                                                    variant=\"outline\"\n                                                    onClick={() => toggleEditMode(statusKey)}\n                                                    className=\"text-blue-600 hover:text-blue-700\"\n                                                  >\n                                                    ‚úèÔ∏è\n                                                  </Button>\n                                                  <Button\n                                                    size=\"sm\"\n                                                    variant=\"destructive\"\n                                                    onClick={() => removePharmaticistMedication(order.id, index)}\n                                                    className=\"text-red-600 hover:text-red-700 bg-red-100 hover:bg-red-200\"\n                                                    title=\"Supprimer ce m√©dicament\"\n                                                  >\n                                                    üóëÔ∏è\n                                                  </Button>\n                                                </div>\n                                              )}\n                                              <Badge variant={currentStatus.available ? \"default\" : \"destructive\"}>\n                                                {currentStatus.available ? \"Disponible\" : \"Indisponible\"}\n                                              </Badge>\n                                            </div>\n\n                                            <div className=\"grid grid-cols-2 gap-4 mb-3\">\n                                              <div className=\"flex items-center space-x-2\">\n                                                <Switch\n                                                  id={`available-${statusKey}`}\n                                                  checked={currentStatus.available}\n                                                  onCheckedChange={(checked) =>\n                                                    toggleMedicationStatus(order.id, index, 'available', checked)\n                                                  }\n                                                />\n                                                <Label htmlFor={`available-${statusKey}`} className=\"text-sm\">\n                                                  Disponible en stock\n                                                </Label>\n                                              </div>\n\n                                              <div className=\"flex items-center space-x-2\">\n                                                <Switch\n                                                  id={`surbon-${statusKey}`}\n                                                  checked={currentStatus.surBon}\n                                                  onCheckedChange={(checked) =>\n                                                    toggleMedicationStatus(order.id, index, 'surBon', checked)\n                                                  }\n                                                />\n                                                <Label htmlFor={`surbon-${statusKey}`} className=\"text-sm\">\n                                                  Sur BON (remboursable)\n                                                </Label>\n                                              </div>\n                                            </div>\n\n                                            <div className=\"mt-3\">\n                                              <Label htmlFor={`price-${statusKey}`} className=\"text-sm font-medium\">\n                                                Prix (FCFA)\n                                              </Label>\n                                              <Input\n                                                id={`price-${statusKey}`}\n                                                type=\"number\"\n                                                placeholder=\"Prix en FCFA\"\n                                                value={medicationPrices[statusKey] || med.price || ''}\n                                                onChange={(e) => updateMedicationPrice(order.id, index, e.target.value)}\n                                                className=\"mt-1\"\n                                                min=\"0\"\n                                                step=\"1\"\n                                              />\n                                            </div>\n                                          </div>\n                                        );\n                                      })}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n\n                              <div className=\"flex space-x-2 mt-4 pt-4 border-t\">\n                                <Button\n                                  onClick={() => {\n                                    const originalMeds = order.medications && typeof order.medications === 'string'\n                                      ? JSON.parse(order.medications)\n                                      : (order.medications && Array.isArray(order.medications) ? order.medications : []);\n\n                                    handleSendResponse(order.id, originalMeds);\n                                  }}\n                                  disabled={sendResponseMutation.isPending}\n                                  className=\"bg-blue-600 hover:bg-blue-700\"\n                                >\n                                  üì§ Envoyer la r√©ponse\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n\n\n          {/* Candidatures de Livreurs */}\n          <TabsContent value=\"applications\">\n            <Card>\n              <CardHeader>\n                <CardTitle>üë• Candidatures de Livreurs</CardTitle>\n                <CardDescription>\n                  G√©rez les candidatures des livreurs qui souhaitent rejoindre votre pharmacie\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <DeliveryApplicationsManager />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Validation et Pr√©paration */}\n          <TabsContent value=\"preparation\">\n            <Card>\n              <CardHeader>\n                <CardTitle>‚öóÔ∏è Validation & Pr√©paration</CardTitle>\n                <CardDescription>\n                  Commandes confirm√©es √† pr√©parer et commandes pr√™tes pour livraison\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Section: Commandes en pr√©paration */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                      <span className=\"bg-blue-100 rounded-full w-8 h-8 flex items-center justify-center mr-2\">‚öóÔ∏è</span>\n                      En Pr√©paration\n                    </h3>\n                    <div className=\"space-y-4\">\n                      {orders?.filter((order: any) => order.status === 'confirmed').length === 0 ? (\n                        <div className=\"border rounded-lg p-6 bg-gray-50 text-center\">\n                          <div className=\"text-gray-400 mb-2\">‚öóÔ∏è</div>\n                          <p className=\"text-sm text-gray-600\">Aucune commande en pr√©paration</p>\n                        </div>\n                      ) : orders?.filter((order: any) => order.status === 'confirmed').map((order: any) => (\n                        <div key={order.id} className=\"border rounded-lg p-4 bg-blue-50\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div>\n                              <h4 className=\"font-semibold\">Commande #{order.id.slice(0, 8)}</h4>\n                              <p className=\"text-sm text-gray-600\">\n                                Patient: {order.user?.firstName} {order.user?.lastName}\n                              </p>\n                            </div>\n                            <Badge>En pr√©paration</Badge>\n                          </div>\n\n                          <div className=\"flex items-center space-x-4 mb-3\">\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Montant total:</span> {(() => {\n                                if (order.totalAmount && order.totalAmount !== '0' && order.totalAmount !== '0.00') {\n                                  return `${parseFloat(order.totalAmount).toFixed(0)} FCFA`;\n                                }\n                                // Calculer le total √† partir des m√©dicaments si disponible\n                                try {\n                                  const medications = typeof order.medications === 'string' ? JSON.parse(order.medications) : (order.medications || []);\n                                  const total = medications.reduce((sum: number, med: any) => {\n                                    const price = parseFloat(med.price) || 0;\n                                    const isAvailable = med.available !== false;\n                                    return sum + (price > 0 && isAvailable ? price : 0);\n                                  }, 0);\n                                  return total > 0 ? `${total.toFixed(0)} FCFA` : 'En cours d\\'√©valuation';\n                                } catch (error) {\n                                  console.error('Error calculating total:', error);\n                                  return 'En cours d\\'√©valuation';\n                                }\n                              })()} \n                            </div>\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Adresse:</span> {order.deliveryAddress}\n                            </div>\n                          </div>\n\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              className=\"bg-blue-600 hover:bg-blue-700\"\n                              onClick={() => handleOrderUpdate(order.id, 'ready_for_delivery')}\n                              disabled={updateOrderMutation.isPending}\n                            >\n                              üì¶ Pr√™t pour livraison\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Section: Commandes pr√™tes pour livraison avec assignation de livreur */}\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                      <span className=\"bg-green-100 rounded-full w-8 h-8 flex items-center justify-center mr-2\">üì¶</span>\n                      Pr√™tes pour Livraison - Assignation des Livreurs\n                    </h3>\n                    <ReadyForDeliveryOrders orders={orders || []} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Dialog d'authentification pour l'acc√®s aux param√®tres */}\n        <Dialog open={showPasswordDialog} onOpenChange={setShowPasswordDialog}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                üîê Authentification requise\n              </DialogTitle>\n              <DialogDescription>\n                Pour acc√©der aux param√®tres de gestion de la pharmacie, veuillez confirmer votre identit√© en saisissant votre mot de passe.\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"security-password\">Mot de passe</Label>\n                <Input\n                  id=\"security-password\"\n                  type=\"password\"\n                  placeholder=\"Saisissez votre mot de passe\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter' && !isVerifying) {\n                      handlePasswordConfirmation();\n                    }\n                  }}\n                  disabled={isVerifying}\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowPasswordDialog(false);\n                    setPassword(\"\");\n                    setPendingAction(null);\n                  }}\n                  disabled={isVerifying}\n                >\n                  Annuler\n                </Button>\n                <Button\n                  onClick={handlePasswordConfirmation}\n                  disabled={isVerifying || !password.trim()}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {isVerifying ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      V√©rification...\n                    </>\n                  ) : (\n                    \"Confirmer\"\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>S√©curit√© :</strong> Cette v√©rification permet de s'assurer que seul le titulaire du compte peut acc√©der aux param√®tres sensibles de la pharmacie.\n              </p>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":109924},"client/src/pages/delivery-address.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\n\nconst addressSchema = z.object({\n  street: z.string().min(1, \"L'adresse est requise\"),\n  city: z.string().min(1, \"La ville est requise\"),\n  postalCode: z.string().min(1, \"Le code postal est requis\"),\n  country: z.string().min(1, \"Le pays est requis\"),\n  details: z.string().optional(),\n});\n\ntype AddressData = z.infer<typeof addressSchema>;\n\nexport default function DeliveryAddress() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { latitude, longitude, error: geoError, loading: geoLoading, refetch } = useGeolocation();\n  const [addressFromLocation, setAddressFromLocation] = useState<string>(\"\");\n  const [isReverseGeocoding, setIsReverseGeocoding] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting }\n  } = useForm<AddressData>({\n    resolver: zodResolver(addressSchema),\n    defaultValues: {\n      street: \"\",\n      city: \"\",\n      postalCode: \"\",\n      country: \"C√¥te d'Ivoire\",\n      details: \"\",\n    },\n  });\n\n  // Reverse geocoding pour obtenir l'adresse depuis les coordonn√©es\n  useEffect(() => {\n    if (latitude && longitude && !isReverseGeocoding) {\n      setIsReverseGeocoding(true);\n      \n      // Utiliser un service de g√©ocodage inverse (ici on simule)\n      const reverseGeocode = async () => {\n        try {\n          // En production, vous utiliseriez un service comme Google Maps API\n          // Pour cette d√©mo, on simule une adresse\n          setTimeout(() => {\n            const mockAddress = \"Rue des Pharmacies, Abidjan\";\n            setAddressFromLocation(mockAddress);\n            setValue(\"street\", mockAddress);\n            setValue(\"city\", \"Abidjan\");\n            setValue(\"postalCode\", \"00225\");\n            setIsReverseGeocoding(false);\n            \n            toast({\n              title: \"Position d√©tect√©e\",\n              description: \"Votre adresse a √©t√© automatiquement remplie. Vous pouvez la modifier si n√©cessaire.\",\n            });\n          }, 2000);\n        } catch (error) {\n          console.error('Erreur g√©ocodage inverse:', error);\n          setIsReverseGeocoding(false);\n        }\n      };\n      \n      reverseGeocode();\n    }\n  }, [latitude, longitude, setValue, toast]);\n\n  const handleGetLocation = () => {\n    refetch();\n  };\n\n  const onSubmit = (data: AddressData) => {\n    // Sauvegarder l'adresse\n    localStorage.setItem('deliveryAddress', JSON.stringify({\n      ...data,\n      coordinates: latitude && longitude ? { latitude, longitude } : null\n    }));\n    \n    toast({\n      title: \"Adresse sauvegard√©e\",\n      description: \"Votre adresse de livraison a √©t√© enregistr√©e avec succ√®s.\",\n    });\n    \n    setLocation(\"/profile\");\n  };\n\n  const goBack = () => {\n    setLocation(\"/profile\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10\"\n          >\n            <svg className=\"w-5 h-5 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            Adresse de livraison\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6\">\n        {/* Geolocation Card */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>Localisation automatique</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {geoError && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4\">\n                <p className=\"text-red-600 text-sm\">{geoError}</p>\n              </div>\n            )}\n            \n            <Button\n              onClick={handleGetLocation}\n              disabled={geoLoading || isReverseGeocoding}\n              className=\"w-full bg-pharma-green hover:bg-pharma-green/90\"\n            >\n              {geoLoading || isReverseGeocoding ? (\n                <>\n                  <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  {isReverseGeocoding ? 'R√©cup√©ration de l\\'adresse...' : 'Localisation en cours...'}\n                </>\n              ) : (\n                <>\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Utiliser ma position actuelle\n                </>\n              )}\n            </Button>\n\n            {latitude && longitude && (\n              <div className=\"mt-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <p className=\"text-green-700 text-sm\">\n                  üìç Position d√©tect√©e: {latitude.toFixed(6)}, {longitude.toFixed(6)}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Address Form */}\n        <Card className=\"shadow-sm\">\n          <CardHeader>\n            <CardTitle>Informations d'adresse</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"street\">Adresse compl√®te</Label>\n                <Input\n                  id=\"street\"\n                  {...register(\"street\")}\n                  placeholder=\"Num√©ro, rue, quartier\"\n                />\n                {errors.street && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.street.message}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"city\">Ville</Label>\n                  <Input\n                    id=\"city\"\n                    {...register(\"city\")}\n                    placeholder=\"Votre ville\"\n                  />\n                  {errors.city && (\n                    <p className=\"text-red-500 text-sm mt-1\">{errors.city.message}</p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"postalCode\">Code postal</Label>\n                  <Input\n                    id=\"postalCode\"\n                    {...register(\"postalCode\")}\n                    placeholder=\"Code postal\"\n                  />\n                  {errors.postalCode && (\n                    <p className=\"text-red-500 text-sm mt-1\">{errors.postalCode.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"country\">Pays</Label>\n                <Input\n                  id=\"country\"\n                  {...register(\"country\")}\n                  placeholder=\"Votre pays\"\n                />\n                {errors.country && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.country.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"details\">D√©tails suppl√©mentaires (optionnel)</Label>\n                <Textarea\n                  id=\"details\"\n                  {...register(\"details\")}\n                  placeholder=\"√âtage, appartement, point de rep√®re...\"\n                  className=\"min-h-[80px]\"\n                />\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={goBack}\n                  className=\"flex-1\"\n                >\n                  Annuler\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"flex-1 bg-pharma-green hover:bg-pharma-green/90\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      Sauvegarde...\n                    </>\n                  ) : (\n                    'Sauvegarder l\\'adresse'\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9674},"client/src/pages/delivery-application.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Upload, FileText, Briefcase } from \"lucide-react\";\n\nconst applicationSchema = z.object({\n  pharmacyId: z.string().min(1, \"ID de pharmacie requis\"),\n  motivationLetter: z.string().min(50, \"La lettre de motivation doit contenir au moins 50 caract√®res\"),\n  experience: z.string().min(10, \"Veuillez d√©crire votre exp√©rience\"),\n  availability: z.string().min(5, \"Veuillez indiquer vos disponibilit√©s\"),\n  phone: z.string().min(10, \"Num√©ro de t√©l√©phone requis\"),\n  idDocument: z.any().optional(),\n  drivingLicense: z.any().optional(),\n  cvDocument: z.any().optional(),\n});\n\ntype ApplicationForm = z.infer<typeof applicationSchema>;\n\nexport default function DeliveryApplication() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Get pharmacy from localStorage (passed from pharmacies page)\n  const selectedPharmacy = JSON.parse(localStorage.getItem('selectedPharmacyForApplication') || '{}');\n\n  const form = useForm<ApplicationForm>({\n    resolver: zodResolver(applicationSchema),\n    defaultValues: {\n      pharmacyId: selectedPharmacy.id || '',\n      motivationLetter: '',\n      experience: '',\n      availability: '',\n      phone: '',\n    },\n  });\n\n  const applicationMutation = useMutation({\n    mutationFn: async (data: ApplicationForm) => {\n      const formData = new FormData();\n      formData.append('pharmacyId', data.pharmacyId);\n      formData.append('motivationLetter', data.motivationLetter);\n      formData.append('experience', data.experience);\n      formData.append('availability', data.availability);\n      formData.append('phone', data.phone);\n      \n      if (data.idDocument?.[0]) {\n        formData.append('idDocument', data.idDocument[0]);\n      }\n      if (data.drivingLicense?.[0]) {\n        formData.append('drivingLicense', data.drivingLicense[0]);\n      }\n      if (data.cvDocument?.[0]) {\n        formData.append('cvDocument', data.cvDocument[0]);\n      }\n\n      const response = await fetch('/api/delivery/apply', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const text = (await response.text()) || response.statusText;\n        throw new Error(`${response.status}: ${text}`);\n      }\n\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Candidature envoy√©e ‚úÖ\",\n        description: \"Votre candidature a √©t√© envoy√©e avec succ√®s. La pharmacie vous contactera bient√¥t.\",\n      });\n      localStorage.removeItem('selectedPharmacyForApplication');\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setLocation('/pharmacies');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur d'envoi\",\n        description: error.message || \"Une erreur est survenue lors de l'envoi de votre candidature.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ApplicationForm) => {\n    setIsSubmitting(true);\n    applicationMutation.mutate(data);\n  };\n\n  if (!selectedPharmacy.id) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4\">\n        <div className=\"max-w-md mx-auto pt-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Pharmacie non s√©lectionn√©e</h3>\n              <p className=\"text-gray-600 mb-4\">Vous devez s√©lectionner une pharmacie depuis la liste pour postuler.</p>\n              <Button onClick={() => setLocation('/pharmacies')}>\n                Retour aux pharmacies\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 p-4\">\n        <div className=\"max-w-md mx-auto flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/pharmacies')}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div className=\"flex-1\">\n            <h1 className=\"text-lg font-semibold text-gray-900\">Candidature livreur</h1>\n            <p className=\"text-sm text-gray-600\">{selectedPharmacy.name}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-md mx-auto p-4 space-y-4\">\n        {/* Pharmacy Info */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-pharma-green rounded-full flex items-center justify-center\">\n                <Briefcase className=\"h-6 w-6 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-semibold text-gray-900\">{selectedPharmacy.name}</h3>\n                <p className=\"text-sm text-gray-600\">{selectedPharmacy.address}</p>\n                <p className=\"text-xs text-pharma-green font-medium\">Recherche livreur</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Application Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Formulaire de candidature</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                {/* Lettre de motivation */}\n                <FormField\n                  control={form.control}\n                  name=\"motivationLetter\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Lettre de motivation *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Expliquez pourquoi vous souhaitez travailler pour cette pharmacie...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                          data-testid=\"textarea-motivation\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Exp√©rience */}\n                <FormField\n                  control={form.control}\n                  name=\"experience\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exp√©rience en livraison *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"D√©crivez votre exp√©rience en livraison (moto, scooter, etc.)...\"\n                          {...field}\n                          data-testid=\"textarea-experience\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Disponibilit√©s */}\n                <FormField\n                  control={form.control}\n                  name=\"availability\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Disponibilit√©s *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Lundi-Vendredi 8h-18h, Weekend disponible\"\n                          {...field}\n                          data-testid=\"input-availability\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* T√©l√©phone */}\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>T√©l√©phone de contact *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"+225 XX XX XX XX\"\n                          {...field}\n                          data-testid=\"input-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Documents */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-gray-900\">Documents √† joindre</h4>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"idDocument\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center space-x-2\">\n                          <FileText className=\"h-4 w-4\" />\n                          <span>Carte d'identit√© *</span>\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*,.pdf\"\n                            onChange={(e) => field.onChange(e.target.files)}\n                            data-testid=\"input-id-document\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"drivingLicense\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center space-x-2\">\n                          <FileText className=\"h-4 w-4\" />\n                          <span>Permis de conduire *</span>\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*,.pdf\"\n                            onChange={(e) => field.onChange(e.target.files)}\n                            data-testid=\"input-driving-license\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"cvDocument\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center space-x-2\">\n                          <Upload className=\"h-4 w-4\" />\n                          <span>CV (optionnel)</span>\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*,.pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n                            onChange={(e) => field.onChange(e.target.files)}\n                            data-testid=\"input-cv\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Submit Button */}\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-pharma-green hover:bg-pharma-green/90\" \n                  disabled={isSubmitting || applicationMutation.isPending}\n                  data-testid=\"button-submit-application\"\n                >\n                  {isSubmitting || applicationMutation.isPending ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      <span>Envoi en cours...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Upload className=\"h-4 w-4\" />\n                      <span>Envoyer la candidature</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center text-xs text-gray-500 pb-8\">\n          Votre candidature sera examin√©e par la pharmacie sous 24-48h\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13367},"client/src/pages/delivery-hiring-pending.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function DeliveryHiringPending() {\n  const [, setLocation] = useLocation();\n  const { logout } = useAuth();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate refresh delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setIsRefreshing(false);\n    // Optionally refresh user data here\n    window.location.reload();\n  };\n\n  const goToPharmacies = () => {\n    setLocation('/pharmacies');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full space-y-6\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            En attente d'embauche\n          </h1>\n          <p className=\"text-gray-600\">\n            Votre candidature a √©t√© soumise avec succ√®s\n          </p>\n        </div>\n\n        {/* Main Card */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-xl\">Candidature en cours de traitement</CardTitle>\n            <CardDescription className=\"text-base\">\n              Nous avons bien re√ßu votre candidature de livreur. Une pharmacie va examiner votre profil et vous contacter si votre candidature correspond √† leurs besoins.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Status Timeline */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">Candidature soumise</p>\n                  <p className=\"text-sm text-gray-600\">Vos documents ont √©t√© envoy√©s avec succ√®s</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center animate-pulse\">\n                  <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">Examen par les pharmacies</p>\n                  <p className=\"text-sm text-gray-600\">Les pharmacies examinent votre candidature</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-500\">Embauche confirm√©e</p>\n                  <p className=\"text-sm text-gray-500\">Acc√®s √† votre tableau de bord de livraison</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Next Steps */}\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">\n                Prochaines √©tapes :\n              </h4>\n              <ul className=\"space-y-1\">\n                <li className=\"text-sm text-blue-800 flex items-center space-x-2\">\n                  <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span>Une pharmacie vous contactera directement si int√©ress√©e</span>\n                </li>\n                <li className=\"text-sm text-blue-800 flex items-center space-x-2\">\n                  <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span>Vous pourrez postuler dans d'autres pharmacies</span>\n                </li>\n                <li className=\"text-sm text-blue-800 flex items-center space-x-2\">\n                  <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span>Gardez votre t√©l√©phone accessible pour recevoir les appels</span>\n                </li>\n              </ul>\n            </div>\n\n            {/* Contact Info */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">\n                Besoin d'aide ?\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Si vous avez des questions concernant votre candidature :\n              </p>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">Email :</span> emploi@yahopharma.ci\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">T√©l√©phone :</span> +225 XX XX XX XX XX\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">Heures d'ouverture :</span> Lun-Ven 8h-18h\n                </p>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Button \n                onClick={goToPharmacies}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"button-view-pharmacies\"\n              >\n                <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z\" />\n                </svg>\n                Voir les pharmacies\n              </Button>\n              <Button \n                onClick={handleRefresh} \n                disabled={isRefreshing}\n                variant=\"outline\"\n                className=\"flex-1\"\n                data-testid=\"button-refresh-status\"\n              >\n                {isRefreshing ? (\n                  <>\n                    <svg className=\"animate-spin -ml-1 mr-3 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    V√©rification...\n                  </>\n                ) : (\n                  'Actualiser le statut'\n                )}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={logout}\n                className=\"flex-1\"\n                data-testid=\"button-logout\"\n              >\n                Se d√©connecter\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500\">\n          <p>\n            D√©lai de r√©ponse habituel : 24-72 heures ouvr√©es\n          </p>\n          <p className=\"mt-1\">\n            N'h√©sitez pas √† postuler dans plusieurs pharmacies pour augmenter vos chances\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9410},"client/src/pages/delivery-map-livreur.tsx":{"content":"\nimport { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useLocation } from \"wouter\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix Leaflet default markers\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\nexport default function DeliveryMapLivreur() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { latitude, longitude } = useGeolocation();\n  const [map, setMap] = useState<L.Map | null>(null);\n  const [selectedDelivery, setSelectedDelivery] = useState<any>(null);\n  const [routeInfo, setRouteInfo] = useState<{distance: number, duration: number} | null>(null);\n  const mapRef = useRef<HTMLDivElement>(null);\n  const deliveryMarkersRef = useRef<L.Marker[]>([]);\n  const currentLocationMarkerRef = useRef<L.Marker | null>(null);\n  const routePolylineRef = useRef<L.Polyline | null>(null);\n\n  // Configuration des tuiles OSM\n  const OSM_TILE_URL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  const OSM_ATTRIBUTION = '¬© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n  const ABIDJAN_CENTER = { lat: 5.3364, lng: -4.0267 };\n\n  // üöÄ √âtats GPS haute fr√©quence - Style Google Maps\n  const [isGPSActive, setIsGPSActive] = useState(false);\n  const [lastGPSUpdate, setLastGPSUpdate] = useState<Date | null>(null);\n  const [currentSpeed, setCurrentSpeed] = useState(0);\n  const [currentBearing, setBearing] = useState(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const lastPositionRef = useRef<{lat: number, lng: number, timestamp: number} | null>(null);\n  \n  // Configuration tracking GPS professionnelle\n  const GPS_CONFIG = {\n    TRACKING_INTERVAL: 2000, // 2 secondes comme Google Maps\n    HIGH_ACCURACY: true,\n    TIMEOUT: 5000, // 5 secondes timeout\n    MAX_AGE: 1000, // Cache max 1 seconde\n    MINIMUM_DISTANCE: 5, // 5 m√®tres minimum pour mise √† jour\n  };\n\n  // R√©cup√©rer les livraisons du livreur\n  const { data: myDeliveries } = useQuery({\n    queryKey: [\"/api/livreur/deliveries\"],\n    enabled: true,\n    refetchInterval: 10000,\n  });\n\n  // üì° Mutation GPS haute pr√©cision avec nouveaux champs\n  const updateGPSLocationMutation = useMutation({\n    mutationFn: async ({ lat, lng, speed, bearing, accuracy, timestamp }: {\n      lat: number;\n      lng: number;\n      speed?: number;\n      bearing?: number;\n      accuracy?: number;\n      timestamp?: string;\n    }) => {\n      if (!user?.id) throw new Error('Utilisateur non connect√©');\n      \n      return apiRequest(`/api/delivery-persons/${user.id}/location`, 'POST', {\n        lat,\n        lng,\n        speed: speed || 0,\n        bearing: bearing || 0,\n        accuracy: accuracy || 5,\n        timestamp: timestamp || new Date().toISOString()\n      });\n    },\n    onSuccess: () => {\n      setLastGPSUpdate(new Date());\n    },\n    onError: (error) => {\n      console.error('‚ùå Erreur mise √† jour GPS:', error);\n    }\n  });\n\n  // Fonction pour calculer la route r√©elle\n  const calculateRoute = async (startLat: number, startLng: number, endLat: number, endLng: number) => {\n    try {\n      const response = await fetch(\n        `https://router.project-osrm.org/route/v1/driving/${startLng},${startLat};${endLng},${endLat}?overview=full&geometries=geojson`\n      );\n      \n      if (!response.ok) throw new Error('Erreur de routage');\n      \n      const data = await response.json();\n      \n      if (data.routes && data.routes.length > 0) {\n        const route = data.routes[0];\n        const coordinates = route.geometry.coordinates.map((coord: number[]) => [coord[1], coord[0]]);\n        const distance = Math.round((route.distance / 1000) * 10) / 10;\n        const duration = Math.round(route.duration / 60);\n        \n        return { coordinates, distance, duration };\n      }\n    } catch (error) {\n      console.error('Erreur lors du calcul de la route:', error);\n      return {\n        coordinates: [[startLat, startLng], [endLat, endLng]],\n        distance: Math.round(calculateDistance(startLat, startLng, endLat, endLng) * 10) / 10,\n        duration: Math.round(calculateDistance(startLat, startLng, endLat, endLng) * 3)\n      };\n    }\n  };\n\n  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number) => {\n    const R = 6371;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  };\n\n  // üßÆ Calcul de la vitesse et direction en temps r√©el\n  const calculateMovementData = (newLat: number, newLng: number, currentTime: number) => {\n    if (!lastPositionRef.current) {\n      lastPositionRef.current = { lat: newLat, lng: newLng, timestamp: currentTime };\n      return { speed: 0, bearing: 0 };\n    }\n\n    const lastPos = lastPositionRef.current;\n    const timeDelta = (currentTime - lastPos.timestamp) / 1000; // secondes\n    const distance = calculateDistance(lastPos.lat, lastPos.lng, newLat, newLng) * 1000; // m√®tres\n\n    // Calculer vitesse (km/h)\n    const speed = timeDelta > 0 ? (distance / timeDelta) * 3.6 : 0;\n\n    // Calculer direction/bearing (degr√©s)\n    const dLng = (newLng - lastPos.lng) * Math.PI / 180;\n    const lat1 = lastPos.lat * Math.PI / 180;\n    const lat2 = newLat * Math.PI / 180;\n    \n    const y = Math.sin(dLng) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLng);\n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    bearing = (bearing + 360) % 360; // Normaliser 0-360¬∞\n\n    // Mettre √† jour derni√®re position\n    lastPositionRef.current = { lat: newLat, lng: newLng, timestamp: currentTime };\n\n    return { speed: Math.max(0, speed), bearing };\n  };\n\n  // üöÄ D√©marrage/Arr√™t automatique du tracking GPS haute fr√©quence\n  useEffect(() => {\n    if (!user?.id) return;\n\n    // D√©marrer tracking si livraisons actives\n    const hasActiveDeliveries = myDeliveries?.some((d: any) => \n      ['assigned_pending_acceptance', 'in_transit', 'preparing', 'ready_for_delivery'].includes(d.status)\n    );\n\n    if (hasActiveDeliveries && !isGPSActive) {\n      console.log('üöÄ D√©marrage tracking GPS haute fr√©quence (2s)');\n      startHighFrequencyGPSTracking();\n    } else if (!hasActiveDeliveries && isGPSActive) {\n      console.log('‚èπÔ∏è Arr√™t tracking GPS - plus de livraisons actives');\n      stopGPSTracking();\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [myDeliveries, user?.id]);\n\n  // üìç Fonction de tracking GPS haute pr√©cision\n  const startHighFrequencyGPSTracking = () => {\n    if (isGPSActive || !navigator.geolocation) return;\n\n    setIsGPSActive(true);\n\n    const sendGPSUpdate = () => {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude, accuracy, speed: gpsSpeed } = position.coords;\n          const timestamp = Date.now();\n\n          // Calculer mouvement si position pr√©c√©dente disponible\n          const { speed: calculatedSpeed, bearing } = calculateMovementData(latitude, longitude, timestamp);\n          \n          // Utiliser vitesse GPS si disponible, sinon vitesse calcul√©e\n          const finalSpeed = gpsSpeed !== null && gpsSpeed > 0 ? gpsSpeed * 3.6 : calculatedSpeed; // km/h\n\n          // Mettre √† jour les √©tats\n          setCurrentSpeed(finalSpeed);\n          setBearing(bearing);\n\n          // Envoyer via nouvelle API WebSocket\n          updateGPSLocationMutation.mutate({\n            lat: latitude,\n            lng: longitude,\n            speed: finalSpeed,\n            bearing,\n            accuracy: accuracy || 5,\n            timestamp: new Date(timestamp).toISOString()\n          });\n\n          if (import.meta.env.DEV) {\n            console.log('üìç GPS haute fr√©quence envoy√©:', {\n              lat: latitude.toFixed(6),\n              lng: longitude.toFixed(6),\n              speed: finalSpeed.toFixed(1) + ' km/h',\n              bearing: bearing.toFixed(0) + '¬∞',\n              accuracy: accuracy + 'm'\n            });\n          }\n        },\n        (error) => {\n          console.error('‚ùå Erreur GPS:', error);\n          // Continuer le tracking m√™me en cas d'erreur ponctuelle\n        },\n        {\n          enableHighAccuracy: GPS_CONFIG.HIGH_ACCURACY,\n          timeout: GPS_CONFIG.TIMEOUT,\n          maximumAge: GPS_CONFIG.MAX_AGE\n        }\n      );\n    };\n\n    // Premier envoi imm√©diat\n    sendGPSUpdate();\n\n    // Puis toutes les 2 secondes\n    intervalRef.current = setInterval(sendGPSUpdate, GPS_CONFIG.TRACKING_INTERVAL);\n\n    toast({\n      title: \"üöÄ Tracking GPS activ√©\",\n      description: \"Position envoy√©e toutes les 2s en temps r√©el\",\n    });\n  };\n\n  // ‚èπÔ∏è Arr√™t du tracking GPS\n  const stopGPSTracking = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsGPSActive(false);\n    setCurrentSpeed(0);\n    setBearing(0);\n    setLastGPSUpdate(null);\n    lastPositionRef.current = null;\n\n    toast({\n      title: \"‚èπÔ∏è Tracking GPS d√©sactiv√©\",\n      description: \"Plus de livraisons actives\",\n    });\n  };\n\n  // Initialize map\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    // D√©lai pour s'assurer que le DOM est pr√™t et √©viter les conflits HMR\n    const initTimer = setTimeout(() => {\n      if (!mapRef.current) return;\n\n      try {\n        const initialMap = L.map(mapRef.current, {\n          center: [ABIDJAN_CENTER.lat, ABIDJAN_CENTER.lng],\n          zoom: 12,\n          zoomControl: true,\n        });\n\n        L.tileLayer(OSM_TILE_URL, {\n          attribution: OSM_ATTRIBUTION,\n          maxZoom: 19,\n        }).addTo(initialMap);\n\n        setMap(initialMap);\n        console.log('‚úÖ Carte Leaflet initialis√©e');\n      } catch (error) {\n        console.error('‚ùå Erreur initialisation carte:', error);\n      }\n    }, 200);\n\n    return () => {\n      clearTimeout(initTimer);\n      if (map) {\n        try {\n          map.remove();\n        } catch (error) {\n          console.warn('Nettoyage carte:', error);\n        }\n      }\n    };\n  }, []);\n\n  // Add current location marker\n  useEffect(() => {\n    if (!map || !latitude || !longitude) return;\n\n    // V√©rifier que la carte est valide et a un conteneur DOM\n    try {\n      if (!map.getContainer() || !map.getContainer().parentNode) {\n        console.warn('Carte Leaflet non valide, attente de r√©initialisation...');\n        return;\n      }\n    } catch (error) {\n      console.warn('Erreur lors de la v√©rification de la carte:', error);\n      return;\n    }\n\n    // Nettoyer le marqueur existant en toute s√©curit√©\n    if (currentLocationMarkerRef.current) {\n      try {\n        currentLocationMarkerRef.current.remove();\n      } catch (error) {\n        console.warn('Erreur lors du nettoyage du marqueur:', error);\n      }\n      currentLocationMarkerRef.current = null;\n    }\n\n    const currentLocationIcon = L.divIcon({\n      html: `\n        <div style=\"\n          background: #3B82F6; \n          width: 24px; \n          height: 24px; \n          border-radius: 50%; \n          border: 3px solid white; \n          box-shadow: 0 0 0 6px rgba(59, 130, 246, 0.3);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          animation: pulse 2s infinite;\n        \">\n          <svg width=\"14\" height=\"14\" fill=\"white\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clip-rule=\"evenodd\" />\n          </svg>\n        </div>\n        <style>\n          @keyframes pulse {\n            0% { box-shadow: 0 0 0 6px rgba(59, 130, 246, 0.3); }\n            70% { box-shadow: 0 0 0 20px rgba(59, 130, 246, 0); }\n            100% { box-shadow: 0 0 0 6px rgba(59, 130, 246, 0); }\n          }\n        </style>\n      `,\n      className: 'current-location-marker',\n      iconSize: [24, 24],\n      iconAnchor: [12, 12],\n    });\n\n    // D√©lai additionnel pour s'assurer que la carte est pr√™te\n    const addMarkerTimer = setTimeout(() => {\n      try {\n        if (!map || !map.getContainer() || !map.getContainer().parentNode) {\n          console.warn('Carte non pr√™te pour les marqueurs');\n          return;\n        }\n\n        currentLocationMarkerRef.current = L.marker([latitude, longitude], { icon: currentLocationIcon })\n          .addTo(map)\n          .bindPopup('üìç Votre position actuelle');\n\n        map.setView([latitude, longitude], 14);\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du marqueur de position:', error);\n      }\n    }, 300);\n\n    return () => clearTimeout(addMarkerTimer);\n  }, [map, latitude, longitude]);\n\n  // Add delivery markers\n  useEffect(() => {\n    if (!map || !myDeliveries) return;\n\n    // V√©rifier que la carte est valide\n    try {\n      if (!map.getContainer() || !map.getContainer().parentNode) {\n        console.warn('Carte Leaflet non valide pour les marqueurs de livraison');\n        return;\n      }\n    } catch (error) {\n      console.warn('Erreur lors de la v√©rification de la carte pour les livraisons:', error);\n      return;\n    }\n\n    // Clear existing markers safely\n    deliveryMarkersRef.current.forEach(marker => {\n      try {\n        marker.remove();\n      } catch (error) {\n        console.warn('Erreur lors du nettoyage d\\'un marqueur:', error);\n      }\n    });\n    deliveryMarkersRef.current = [];\n\n    const activeDeliveries = myDeliveries.filter((delivery: any) => \n      ['assigned_pending_acceptance', 'in_transit', 'arrived_pending_confirmation'].includes(delivery.status)\n    );\n\n    activeDeliveries.forEach((delivery: any, index: number) => {\n      // Utiliser les vraies coordonn√©es GPS de livraison du patient\n      let deliveryLat, deliveryLng;\n      \n      if (delivery.deliveryLatitude && delivery.deliveryLongitude) {\n        // Utiliser les coordonn√©es GPS r√©elles et pr√©cises stock√©es dans la commande\n        deliveryLat = parseFloat(delivery.deliveryLatitude.toString());\n        deliveryLng = parseFloat(delivery.deliveryLongitude.toString());\n        console.log(`‚úÖ Utilisation coordonn√©es GPS pr√©cises pour livraison ${delivery.id}: ${deliveryLat}, ${deliveryLng}`);\n      } else {\n        // Erreur critique : pas de coordonn√©es GPS disponibles\n        console.error(`‚ùå ERREUR: Pas de coordonn√©es GPS pour la livraison ${delivery.id}. L'adresse \"${delivery.deliveryAddress}\" ne peut pas √™tre localis√©e pr√©cis√©ment.`);\n        toast({\n          title: \"Coordonn√©es manquantes\",\n          description: `Livraison ${delivery.id.slice(0, 8)}: Pas de coordonn√©es GPS pr√©cises disponibles`,\n          variant: \"destructive\",\n        });\n        return; // Skip cette livraison\n      }\n\n      // Cr√©er une ic√¥ne simple et efficace pour le point d'arriv√©e (destination)\n      const colorPrimary = delivery.status === 'in_transit' ? '#F97316' : '#10B981';\n      const colorSecondary = delivery.status === 'in_transit' ? '#EA580C' : '#059669';\n      \n      const deliveryIcon = L.divIcon({\n        html: `\n          <div style=\"\n            position: relative;\n            width: 30px;\n            height: 30px;\n            background: ${colorPrimary};\n            border: 3px solid white;\n            border-radius: 50%;\n            box-shadow: 0 3px 8px rgba(0,0,0,0.4);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n          \">\n            <svg width=\"16\" height=\"16\" fill=\"white\" viewBox=\"0 0 24 24\">\n              <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"/>\n            </svg>\n            <div style=\"\n              position: absolute;\n              bottom: -8px;\n              left: 50%;\n              width: 0;\n              height: 0;\n              border-left: 6px solid transparent;\n              border-right: 6px solid transparent;\n              border-top: 8px solid ${colorSecondary};\n              transform: translateX(-50%);\n            \"></div>\n          </div>\n        `,\n        className: 'delivery-marker-icon',\n        iconSize: [30, 38],\n        iconAnchor: [15, 38],\n        popupAnchor: [0, -38]\n      });\n\n      try {\n        const marker = L.marker([deliveryLat, deliveryLng], { icon: deliveryIcon })\n          .addTo(map)\n          .bindPopup(`\n            <div class=\"p-3\">\n              <div class=\"flex items-center mb-2\">\n                <span class=\"text-lg mr-2\">üéØ</span>\n                <h4 class=\"font-bold text-blue-800\">DESTINATION</h4>\n              </div>\n              <p class=\"text-sm font-semibold text-gray-800\">Livraison #${delivery.id.slice(0, 8)}</p>\n              <p class=\"text-sm text-gray-600 mt-1\">üìç ${delivery.deliveryAddress}</p>\n              <p class=\"text-sm text-green-600 font-medium mt-1\">üí∞ ${delivery.totalAmount} FCFA</p>\n              <button onclick=\"window.selectDelivery('${delivery.id}')\" class=\"mt-3 px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg text-sm font-medium shadow-md hover:shadow-lg transition-all\">\n                üó∫Ô∏è Tracer l'itin√©raire\n              </button>\n            </div>\n          `);\n\n        // Store delivery coordinates for routing\n        (marker as any).deliveryData = {\n          ...delivery,\n          coordinates: { lat: deliveryLat, lng: deliveryLng }\n        };\n\n        deliveryMarkersRef.current.push(marker);\n      } catch (error) {\n        console.error(`Erreur lors de l'ajout du marqueur livraison ${delivery.id}:`, error);\n      }\n    });\n\n    // Fit map to show all markers\n    if (deliveryMarkersRef.current.length > 0 && currentLocationMarkerRef.current) {\n      const group = new L.FeatureGroup([\n        currentLocationMarkerRef.current,\n        ...deliveryMarkersRef.current\n      ]);\n      map.fitBounds(group.getBounds().pad(0.1));\n    }\n  }, [map, myDeliveries]);\n\n  // Global function to select delivery\n  useEffect(() => {\n    (window as any).selectDelivery = (deliveryId: string) => {\n      const delivery = myDeliveries?.find((d: any) => d.id === deliveryId);\n      if (delivery) {\n        setSelectedDelivery(delivery);\n        // Calculer automatiquement l'itin√©raire\n        setTimeout(() => showRouteToDelivery(delivery), 500);\n      }\n    };\n\n    return () => {\n      delete (window as any).selectDelivery;\n    };\n  }, [myDeliveries, latitude, longitude]);\n\n  const showRouteToDelivery = async (delivery: any) => {\n    if (!latitude || !longitude || !map) {\n      toast({\n        title: \"Position manquante\",\n        description: \"Votre position GPS n'est pas disponible\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // V√©rifier la pr√©sence des coordonn√©es GPS pr√©cises\n    if (!delivery.deliveryLatitude || !delivery.deliveryLongitude) {\n      toast({\n        title: \"Coordonn√©es GPS manquantes\",\n        description: `Impossible de calculer l'itin√©raire vers ${delivery.deliveryAddress} - coordonn√©es GPS non disponibles`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Utiliser les coordonn√©es GPS r√©elles et pr√©cises\n    const deliveryLat = parseFloat(delivery.deliveryLatitude.toString());\n    const deliveryLng = parseFloat(delivery.deliveryLongitude.toString());\n    \n    console.log(`üó∫Ô∏è Calcul itin√©raire pr√©cis:`);\n    console.log(`  üìç Position livreur: ${latitude}, ${longitude}`);\n    console.log(`  üè† Position patient: ${deliveryLat}, ${deliveryLng}`);\n    console.log(`  üìß Adresse: ${delivery.deliveryAddress}`);\n\n    try {\n      const route = await calculateRoute(\n        latitude, longitude,\n        deliveryLat, deliveryLng\n      );\n\n      setRouteInfo({\n        distance: route.distance,\n        duration: route.duration\n      });\n\n      // Remove existing route\n      if (routePolylineRef.current) {\n        routePolylineRef.current.remove();\n      }\n\n      // Add new route\n      routePolylineRef.current = L.polyline(route.coordinates, {\n        color: '#F97316',\n        weight: 5,\n        opacity: 0.8,\n        dashArray: '10, 5'\n      }).addTo(map);\n\n      // Fit map to route\n      map.fitBounds(routePolylineRef.current.getBounds().pad(0.1));\n\n      toast({\n        title: \"Itin√©raire calcul√© ‚úÖ\",\n        description: `Distance: ${route.distance}km ‚Ä¢ Dur√©e: ${route.duration}min ‚Ä¢ Destination: ${delivery.deliveryAddress}`,\n      });\n\n    } catch (error) {\n      // Cr√©er un itin√©raire simple en ligne droite en cas d'erreur\n      const simpleRoute = [[latitude, longitude], [deliveryLat, deliveryLng]];\n      const distance = calculateDistance(latitude, longitude, deliveryLat, deliveryLng);\n      \n      setRouteInfo({\n        distance: Math.round(distance * 10) / 10,\n        duration: Math.round(distance * 3)\n      });\n\n      if (routePolylineRef.current) {\n        routePolylineRef.current.remove();\n      }\n\n      routePolylineRef.current = L.polyline(simpleRoute, {\n        color: '#DC2626',\n        weight: 4,\n        opacity: 0.7,\n        dashArray: '15, 10'\n      }).addTo(map);\n\n      map.fitBounds(routePolylineRef.current.getBounds().pad(0.1));\n\n      toast({\n        title: \"Itin√©raire approximatif\",\n        description: `Distance: ${Math.round(distance * 10) / 10}km (ligne droite) ‚Ä¢ Destination: ${delivery.deliveryAddress}`,\n      });\n    }\n  };\n\n  // Mutation to update delivery status\n  const updateDeliveryMutation = useMutation({\n    mutationFn: ({ orderId, status }: { orderId: string; status: string }) =>\n      apiRequest(`/api/livreur/deliveries/${orderId}/status`, \"POST\", { status }),\n    onSuccess: () => {\n      toast({\n        title: \"Statut mis √† jour\",\n        description: \"Le statut de la livraison a √©t√© mis √† jour\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/livreur/deliveries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre √† jour le statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartDelivery = () => {\n    if (selectedDelivery) {\n      updateDeliveryMutation.mutate({ \n        orderId: selectedDelivery.id, \n        status: 'in_transit' \n      });\n    }\n  };\n\n  const handleArrivalConfirmation = () => {\n    if (selectedDelivery) {\n      updateDeliveryMutation.mutate({ \n        orderId: selectedDelivery.id, \n        status: 'arrived_pending_confirmation' \n      });\n    }\n  };\n\n  \n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-20\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/dashboard-livreur\")}\n            className=\"w-10 h-10\"\n          >\n            <svg className=\"w-5 h-5 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            üó∫Ô∏è Carte GPS Livraisons\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"p-4\">\n        {/* Status GPS Temps R√©el */}\n        <div className={`bg-gradient-to-r ${isGPSActive ? 'from-green-100 to-green-200 border-green-300' : 'from-blue-100 to-blue-200 border-blue-300'} border-2 rounded-2xl p-4 mb-4`}>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-blue-800\">\n                üöö Navigation GPS Livreur {isGPSActive && <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full animate-pulse ml-2\"></span>}\n              </h2>\n              <p className={`${isGPSActive ? 'text-green-700' : 'text-blue-700'} text-sm`}>\n                {isGPSActive ? `üöÄ Tracking actif - ${currentSpeed.toFixed(1)} km/h` : 'Cliquez sur un marqueur pour voir l\\'itin√©raire'}\n              </p>\n              {isGPSActive && lastGPSUpdate && (\n                <p className=\"text-xs text-green-600 mt-1\">\n                  Derni√®re mise √† jour: {lastGPSUpdate.toLocaleTimeString()}\n                </p>\n              )}\n            </div>\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className={`${isGPSActive ? 'bg-green-600' : 'bg-blue-600'} text-white mb-2`}>\n                {myDeliveries?.filter((d: any) => ['assigned_pending_acceptance', 'in_transit', 'arrived_pending_confirmation'].includes(d.status)).length || 0} livraisons\n              </Badge>\n              {isGPSActive && (\n                <div className=\"text-xs text-green-700\">\n                  <div>‚ö° 2s temps r√©el</div>\n                  <div>üß≠ {currentBearing.toFixed(0)}¬∞</div>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Barre de statut GPS d√©taill√©e */}\n          {isGPSActive && (\n            <div className=\"mt-3 bg-white/70 rounded-lg p-2 text-xs text-gray-700\">\n              <div className=\"flex justify-between items-center\">\n                <span>üì° GPS haute pr√©cision actif</span>\n                <span className=\"text-green-600 font-medium\">Diffusion WebSocket ‚úì</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Map */}\n        <Card className=\"shadow-sm mb-4\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">üõ£Ô∏è Carte interactive avec routes CI</h3>\n            <div \n              ref={mapRef} \n              className=\"h-96 w-full rounded-lg border-2 border-gray-200\"\n              style={{ minHeight: '384px' }}\n            />\n            \n            <div className=\"mt-3 grid grid-cols-2 gap-2 text-xs text-gray-600\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                <span>Ma position</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full transform rotate-45\" style={{ borderRadius: '50% 50% 50% 0' }}></div>\n                <span>üéØ Destinations</span>\n              </div>\n            </div>\n            <div className=\"mt-2 text-xs text-gray-500 text-center\">\n              üí° Les marqueurs en forme de goutte indiquent les points d'arriv√©e pr√©cis\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        {myDeliveries && myDeliveries.filter((d: any) => ['assigned_pending_acceptance', 'in_transit', 'arrived_pending_confirmation'].includes(d.status)).length > 0 && (\n          <Card className=\"shadow-sm mb-4\">\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">üöÄ Actions rapides</h3>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button \n                  onClick={() => {\n                    // S√©lectionner automatiquement la premi√®re livraison active\n                    const activeDeliveries = myDeliveries.filter((d: any) => ['assigned_pending_acceptance', 'in_transit', 'arrived_pending_confirmation'].includes(d.status));\n                    if (activeDeliveries.length > 0) {\n                      setSelectedDelivery(activeDeliveries[0]);\n                      showRouteToDelivery(activeDeliveries[0]);\n                    }\n                  }}\n                  variant=\"outline\"\n                  className=\"text-sm\"\n                >\n                  üó∫Ô∏è Voir itin√©raire\n                </Button>\n                <Button \n                  onClick={() => {\n                    if (map && currentLocationMarkerRef.current) {\n                      map.setView([latitude || ABIDJAN_CENTER.lat, longitude || ABIDJAN_CENTER.lng], 15);\n                    }\n                  }}\n                  variant=\"outline\"\n                  className=\"text-sm\"\n                >\n                  üìç Ma position\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Selected Delivery Info */}\n        {selectedDelivery && (\n          <Card className=\"shadow-sm mb-4 border-l-4 border-l-orange-500\">\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">üì¶ Livraison s√©lectionn√©e</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Commande:</span>\n                  <span className=\"text-sm font-medium\">#{selectedDelivery.id.slice(0, 8)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Client:</span>\n                  <span className=\"text-sm font-medium\">\n                    {selectedDelivery.patient?.firstName} {selectedDelivery.patient?.lastName}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">T√©l√©phone:</span>\n                  <span className=\"text-sm font-medium\">{selectedDelivery.patient?.phone}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Adresse:</span>\n                  <span className=\"text-sm font-medium\">{selectedDelivery.deliveryAddress}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Montant:</span>\n                  <span className=\"text-sm font-medium\">{selectedDelivery.totalAmount} FCFA</span>\n                </div>\n                \n                {routeInfo && (\n                  <div className=\"mt-3 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <p className=\"text-sm font-medium text-orange-800\">üõ£Ô∏è Itin√©raire calcul√©</p>\n                        <p className=\"text-xs text-orange-700\">\n                          Distance: {routeInfo.distance} km ‚Ä¢ Dur√©e: {routeInfo.duration} min\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 mt-4\">\n                  {selectedDelivery.status === 'assigned_pending_acceptance' && (\n                    <Button \n                      onClick={handleStartDelivery}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                      disabled={updateDeliveryMutation.isPending}\n                    >\n                      üöÄ Commencer livraison\n                    </Button>\n                  )}\n                  {selectedDelivery.status === 'in_transit' && (\n                    <Button \n                      onClick={handleArrivalConfirmation}\n                      className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                      disabled={updateDeliveryMutation.isPending}\n                    >\n                      üìç Confirmer arriv√©e\n                    </Button>\n                  )}\n                  {selectedDelivery.status === 'arrived_pending_confirmation' && (\n                    <div className=\"flex-1 bg-yellow-100 border border-yellow-300 rounded-lg p-3 text-center\">\n                      <p className=\"text-yellow-800 font-medium\">‚è≥ En attente</p>\n                      <p className=\"text-yellow-700 text-sm\">Le patient doit confirmer la r√©ception</p>\n                    </div>\n                  )}\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedDelivery(null);\n                      if (routePolylineRef.current) {\n                        routePolylineRef.current.remove();\n                        routePolylineRef.current = null;\n                      }\n                      setRouteInfo(null);\n                    }}\n                  >\n                    Fermer\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Instructions */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">‚ÑπÔ∏è Instructions</h3>\n            <div className=\"space-y-2 text-sm text-gray-600\">\n              <p>‚Ä¢ Votre position bleue est mise √† jour automatiquement</p>\n              <p>‚Ä¢ Cliquez sur un marqueur vert/orange pour voir l'itin√©raire</p>\n              <p>‚Ä¢ Les routes affich√©es sont les vraies routes de C√¥te d'Ivoire</p>\n              <p>‚Ä¢ Les distances et temps sont calcul√©s selon le trafic r√©el</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":34317},"client/src/pages/delivery-tracking.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { useState, useEffect, useRef } from \"react\";\nimport type { Order, DeliveryPerson } from \"@shared/schema\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport io from 'socket.io-client';\n\n// Fix Leaflet default markers\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\nexport default function DeliveryTracking() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { latitude: userLat, longitude: userLng } = useGeolocation();\n  const [deliveryPersonLocation, setDeliveryPersonLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [deliverySpeed, setDeliverySpeed] = useState<number>(0);\n  const [deliveryBearing, setDeliveryBearing] = useState<number>(0);\n  const [deliveryProximity, setDeliveryProximity] = useState<'far' | 'nearby' | 'arrived'>('far');\n  const [estimatedTime, setEstimatedTime] = useState<number>(0);\n  const [routeDistance, setRouteDistance] = useState<number>(0);\n  const [lastLocationUpdate, setLastLocationUpdate] = useState<Date | null>(null);\n  const [map, setMap] = useState<L.Map | null>(null);\n  const mapRef = useRef<HTMLDivElement>(null);\n  const deliveryMarkerRef = useRef<L.Marker | null>(null);\n  const userMarkerRef = useRef<L.Marker | null>(null);\n  const pharmacyMarkerRef = useRef<L.Marker | null>(null);\n  const routePolylineRef = useRef<L.Polyline | null>(null);\n  const routeLabelMarkerRef = useRef<L.Marker | null>(null);\n\n  // Configuration des tuiles OSM pour la C√¥te d'Ivoire\n  const OSM_TILE_URL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  const OSM_ATTRIBUTION = '¬© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n\n  // Coordonn√©es par d√©faut pour Abidjan\n  const DEFAULT_PHARMACY_COORDS = { lat: 5.3456, lng: -4.0892 };\n  const ABIDJAN_CENTER = { lat: 5.3364, lng: -4.0267 };\n\n  // üöÄ Configuration tracking GPS haute fr√©quence - Style Google Maps\n  const TRACKING_INTERVAL = 2000; // 2 secondes comme Google Maps\n  const HIGH_PRECISION_DISTANCE = 1; // 1km pour tracking haute fr√©quence\n  \n  // Zones de geofencing\n  const GEOFENCE_ZONES = {\n    ARRIVED: 100, // 100m = arriv√©\n    NEARBY: 500,  // 500m = proche\n    EN_ROUTE: 2000 // 2km = en route\n  };\n\n  // Get current order being tracked (sans polling - WebSocket g√®re les mises √† jour)\n  const { data: currentOrder, isLoading: orderLoading } = useQuery<Order>({\n    queryKey: ['/api/orders/current'],\n    refetchInterval: false, // D√©sactiv√© - WebSocket g√®re les mises √† jour temps r√©el\n  });\n\n  const { data: deliveryPerson } = useQuery<DeliveryPerson>({\n    queryKey: ['/api/delivery-persons', currentOrder?.deliveryPersonId],\n    enabled: !!currentOrder?.deliveryPersonId,\n  });\n\n  // Debug logging\n  useEffect(() => {\n    if (currentOrder && import.meta.env.DEV) {\n      console.log('üîç Statut commande actuelle:', currentOrder.status);\n      console.log('üîç ID livreur assign√©:', currentOrder.deliveryPersonId);\n      console.log('üîç Position utilisateur:', { userLat, userLng });\n    }\n  }, [currentOrder?.status, currentOrder?.deliveryPersonId, userLat, userLng]);\n\n  // Fonction pour calculer la route r√©elle avec OSRM\n  const calculateRealRoute = async (startLat: number, startLng: number, endLat: number, endLng: number) => {\n    try {\n      const response = await fetch(\n        `https://router.project-osrm.org/route/v1/driving/${startLng},${startLat};${endLng},${endLat}?overview=full&geometries=geojson`\n      );\n\n      if (!response.ok) {\n        throw new Error('Erreur de routage');\n      }\n\n      const data = await response.json();\n\n      if (data.routes && data.routes.length > 0) {\n        const route = data.routes[0];\n        const coordinates = route.geometry.coordinates.map((coord: number[]) => [coord[1], coord[0]]);\n        const distance = route.distance / 1000; // Convertir en km\n        const duration = route.duration / 60; // Convertir en minutes\n\n        return {\n          coordinates,\n          distance: Math.round(distance * 10) / 10,\n          duration: Math.round(duration)\n        };\n      }\n    } catch (error) {\n      console.error('Erreur lors du calcul de la route:', error);\n      // Fallback: ligne droite\n      return {\n        coordinates: [[startLat, startLng], [endLat, endLng]],\n        distance: calculateDistance(startLat, startLng, endLat, endLng),\n        duration: Math.round(calculateDistance(startLat, startLng, endLat, endLng) * 3)\n      };\n    }\n  };\n\n  // Calculate distance between two coordinates\n  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number) => {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  };\n\n  // üéØ Geofencing et D√©tection Automatique - Style Google Maps\n  const checkGeofencing = (deliveryLat: number, deliveryLng: number) => {\n    if (!userLat || !userLng) return;\n    \n    const distanceToCustomer = calculateDistance(deliveryLat, deliveryLng, userLat, userLng) * 1000; // en m√®tres\n    \n    if (distanceToCustomer <= GEOFENCE_ZONES.ARRIVED) {\n      // Auto-marquer comme \"arriv√©\"\n      if (currentOrder?.status !== 'arrived_pending_confirmation' && deliveryProximity !== 'arrived') {\n        setDeliveryProximity('arrived');\n        // updateOrderStatus('arrived_pending_confirmation'); // √Ä impl√©menter\n        toast({\n          title: \"üöö Livreur arriv√© !\",\n          description: \"Votre livreur est √† votre porte\",\n        });\n      }\n    } else if (distanceToCustomer <= GEOFENCE_ZONES.NEARBY) {\n      if (deliveryProximity !== 'nearby') {\n        setDeliveryProximity('nearby');\n        toast({\n          title: \"üîî Livreur proche\",\n          description: `Votre livreur arrive dans ${Math.round(distanceToCustomer)}m`,\n        });\n      }\n    } else {\n      setDeliveryProximity('far');\n    }\n  };\n\n  // üé¨ Animation Fluide Style Google Maps\n  const animateMarkerMovement = (oldPos: {lat: number, lng: number}, newPos: {lat: number, lng: number}) => {\n    if (!deliveryMarkerRef.current) return;\n    \n    const steps = 20;\n    const latStep = (newPos.lat - oldPos.lat) / steps;\n    const lngStep = (newPos.lng - oldPos.lng) / steps;\n    \n    let currentStep = 0;\n    \n    const animate = () => {\n      if (currentStep < steps) {\n        const interpolatedPos = {\n          lat: oldPos.lat + (latStep * currentStep),\n          lng: oldPos.lng + (lngStep * currentStep)\n        };\n        \n        deliveryMarkerRef.current?.setLatLng([interpolatedPos.lat, interpolatedPos.lng]);\n        currentStep++;\n        requestAnimationFrame(animate);\n      }\n    };\n    \n    animate();\n  };\n\n  // Helper function to get optimal zoom level based on distance\n  const getOptimalZoom = (distance: number): number => {\n    if (distance < 0.5) return 17;      // < 500m - zoom tr√®s proche\n    if (distance < 1) return 16;        // < 1km - zoom proche  \n    if (distance < 2) return 15;        // < 2km - zoom moyen-proche\n    if (distance < 5) return 14;        // < 5km - zoom moyen\n    if (distance < 10) return 13;       // < 10km - zoom √©largi\n    if (distance < 20) return 12;       // < 20km - zoom large\n    return 11;                          // > 20km - zoom tr√®s large\n  };\n\n  // Improved map centering function\n  const centerMapOnRoute = (deliveryLat: number, deliveryLng: number, userLat: number, userLng: number, distance: number) => {\n    if (!map) return;\n\n    try {\n      // Cr√©er les bounds entre livreur et patient uniquement\n      const bounds = L.latLngBounds([\n        [deliveryLat, deliveryLng],\n        [userLat, userLng]\n      ]);\n\n      // Calculer le padding adaptatif bas√© sur la distance\n      const basePadding = Math.max(20, Math.min(80, distance * 10));\n      const padding: [number, number] = [basePadding, basePadding];\n\n      // Obtenir le niveau de zoom optimal\n      const optimalZoom = getOptimalZoom(distance);\n\n      // Appliquer le centrage avec les param√®tres optimis√©s\n      map.fitBounds(bounds, {\n        padding,\n        maxZoom: optimalZoom,\n        animate: true,\n        duration: 0.8\n      });\n\n      if (import.meta.env.DEV) {\n        console.log('üìç Carte centr√©e - Distance:', distance + 'km', 'Zoom:', optimalZoom, 'Padding:', padding);\n      }\n    } catch (error) {\n      console.error('Erreur lors du centrage de la carte:', error);\n      // Fallback simple\n      map.setView([(deliveryLat + userLat) / 2, (deliveryLng + userLng) / 2], 14);\n    }\n  };\n\n  // Initialize map\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (!mapRef.current || map) return;\n\n      try {\n        if (import.meta.env.DEV) {\n          console.log('Initialisation de la carte Leaflet...');\n        }\n        const initialMap = L.map(mapRef.current, {\n          center: [ABIDJAN_CENTER.lat, ABIDJAN_CENTER.lng],\n          zoom: 12,\n          zoomControl: true,\n          maxZoom: 19,\n          minZoom: 8, // Limiter le zoom minimum pour √©viter de trop d√©zoomer\n        });\n\n        L.tileLayer(OSM_TILE_URL, {\n          attribution: OSM_ATTRIBUTION,\n          maxZoom: 19,\n        }).addTo(initialMap);\n\n        setMap(initialMap);\n        if (import.meta.env.DEV) {\n          console.log('Carte Leaflet initialis√©e avec succ√®s');\n        }\n\n      } catch (error) {\n        console.error('Erreur lors de l\\'initialisation de la carte:', error);\n      }\n    }, 100);\n\n    return () => {\n      clearTimeout(timer);\n      if (map) {\n        map.remove();\n      }\n    };\n  }, []);\n\n  // Add user marker when location is available\n  useEffect(() => {\n    if (!map || !userLat || !userLng) return;\n\n    if (userMarkerRef.current) {\n      map.removeLayer(userMarkerRef.current);\n    }\n\n    const userIcon = L.divIcon({\n      html: `\n        <div style=\"\n          background: #3B82F6; \n          width: 24px; \n          height: 24px; \n          border-radius: 50%; \n          border: 3px solid white; \n          box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        \">\n          <svg width=\"14\" height=\"14\" fill=\"white\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clip-rule=\"evenodd\" />\n          </svg>\n        </div>\n      `,\n      className: 'user-marker',\n      iconSize: [24, 24],\n      iconAnchor: [12, 12],\n    });\n\n    userMarkerRef.current = L.marker([userLat, userLng], { icon: userIcon })\n      .addTo(map)\n      .bindPopup('üìç Votre position');\n\n    // Centrer uniquement si c'est la premi√®re fois qu'on a la position utilisateur\n    // et qu'il n'y a pas encore de livreur assign√©\n    if (!deliveryPersonLocation) {\n      map.setView([userLat, userLng], 14);\n    }\n  }, [map, userLat, userLng]);\n\n  // Add pharmacy marker\n  useEffect(() => {\n    if (!map || !currentOrder) return;\n\n    if (pharmacyMarkerRef.current) {\n      map.removeLayer(pharmacyMarkerRef.current);\n    }\n\n    const pharmacyIcon = L.divIcon({\n      html: `\n        <div style=\"\n          background: #10B981; \n          width: 28px; \n          height: 28px; \n          border-radius: 8px; \n          border: 3px solid white; \n          box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        \">\n          <svg width=\"16\" height=\"16\" fill=\"white\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 2L3 7v11a2 2 0 002 2h10a2 2 0 002-2V7l-7-5z\" />\n            <path d=\"M8 11h4v2H8v-2z\" />\n            <path d=\"M10 9v4\" stroke=\"white\" stroke-width=\"1\" />\n          </svg>\n        </div>\n      `,\n      className: 'pharmacy-marker',\n      iconSize: [28, 28],\n      iconAnchor: [14, 14],\n    });\n\n    const pharmacyLat = currentOrder.pharmacy?.latitude ? parseFloat(currentOrder.pharmacy.latitude) : DEFAULT_PHARMACY_COORDS.lat;\n    const pharmacyLng = currentOrder.pharmacy?.longitude ? parseFloat(currentOrder.pharmacy.longitude) : DEFAULT_PHARMACY_COORDS.lng;\n\n    pharmacyMarkerRef.current = L.marker([pharmacyLat, pharmacyLng], { icon: pharmacyIcon })\n      .addTo(map)\n      .bindPopup(`üè• ${currentOrder.pharmacy?.name || 'Pharmacie'}`);\n  }, [map, currentOrder]);\n\n  // Function to force show route manually\n  const forceShowRoute = async () => {\n    if (!userLat || !userLng || !currentOrder) {\n      toast({\n        title: \"Informations manquantes\",\n        description: \"Position GPS ou commande non disponible\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      let deliveryPersonLat, deliveryPersonLng;\n      let isRealPosition = false;\n\n      // Essayer de r√©cup√©rer la vraie position du livreur d'abord\n      try {\n        const deliveryPersonResponse = await fetch(`/api/delivery-persons/${currentOrder.deliveryPersonId}`);\n\n        if (deliveryPersonResponse.ok) {\n          const deliveryPersonData = await deliveryPersonResponse.json();\n\n          if (deliveryPersonData.lat && deliveryPersonData.lng) {\n            deliveryPersonLat = parseFloat(deliveryPersonData.lat);\n            deliveryPersonLng = parseFloat(deliveryPersonData.lng);\n            isRealPosition = true;\n\n            if (import.meta.env.DEV) {\n              console.log('üîß For√ßage avec vraie position GPS du livreur:', {\n                lat: deliveryPersonLat,\n                lng: deliveryPersonLng\n              });\n            }\n          }\n        }\n      } catch (apiError) {\n        console.log('API livreur non disponible, utilisation position proche');\n      }\n\n      // Fallback si pas de vraie position\n      if (!isRealPosition) {\n        deliveryPersonLat = userLat - 0.01; // ~1km au sud\n        deliveryPersonLng = userLng + 0.01; // ~1km √† l'est\n\n        if (import.meta.env.DEV) {\n          console.log('üîß For√ßage avec position proche du patient (fallback)');\n        }\n      }\n\n      const routeData = await calculateRealRoute(\n        deliveryPersonLat, \n        deliveryPersonLng, \n        userLat, \n        userLng\n      );\n\n      if (routeData) {\n        updateRouteDisplay(routeData, deliveryPersonLat, deliveryPersonLng);\n\n        setDeliveryPersonLocation({\n          lat: deliveryPersonLat,\n          lng: deliveryPersonLng\n        });\n\n        toast({\n          title: \"Itin√©raire affich√© ‚úÖ\",\n          description: `Distance: ${routeData.distance}km ‚Ä¢ Dur√©e: ${routeData.duration}min ${isRealPosition ? '(Position r√©elle)' : '(Position estim√©e)'}`,\n        });\n      }\n    } catch (error) {\n      console.error('Erreur lors du for√ßage d\\'itin√©raire:', error);\n      toast({\n        title: \"Erreur d'itin√©raire\",\n        description: \"Impossible de calculer l'itin√©raire\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Helper function to update the route display on the map\n  const updateRouteDisplay = (routeData: { coordinates: number[][], distance: number, duration: number }, deliveryPersonLat: number, deliveryPersonLng: number) => {\n    if (!map) return;\n\n    setRouteDistance(routeData.distance);\n    setEstimatedTime(routeData.duration);\n\n    // Clean up previous route elements\n    if (routePolylineRef.current) {\n      map.removeLayer(routePolylineRef.current);\n    }\n    if (routeLabelMarkerRef.current) {\n      map.removeLayer(routeLabelMarkerRef.current);\n    }\n\n    // Draw the new route\n    routePolylineRef.current = L.polyline(routeData.coordinates, {\n      color: '#10b981',\n      weight: 6,\n      opacity: 0.9,\n      dashArray: '15, 8'\n    }).addTo(map);\n\n    // Add the route label with actual distance\n    if (routeData.coordinates.length > 1) {\n      const midPointIndex = Math.floor(routeData.coordinates.length / 2);\n      const midPoint = routeData.coordinates[midPointIndex];\n\n      routeLabelMarkerRef.current = L.marker(midPoint, {\n        icon: L.divIcon({\n          html: `<div style=\"background: linear-gradient(45deg, #10b981, #059669); color: white; padding: 4px 8px; border-radius: 16px; font-size: 11px; font-weight: bold; box-shadow: 0 3px 6px rgba(0,0,0,0.3); border: 2px solid white;\">üöö‚Üíüë§ ${routeData.distance}km</div>`,\n          className: 'delivery-route-label',\n          iconSize: [80, 24],\n          iconAnchor: [40, 12]\n        })\n      }).addTo(map);\n    }\n\n    // Utiliser la nouvelle fonction de centrage optimis√©e\n    if (userLat && userLng) {\n      centerMapOnRoute(deliveryPersonLat, deliveryPersonLng, userLat, userLng, routeData.distance);\n    }\n\n    if (import.meta.env.DEV) {\n      console.log('‚úÖ Itin√©raire mis √† jour avec centrage optimis√©:', {\n        distance: routeData.distance + 'km',\n        duration: routeData.duration + 'min',\n        coordinates: routeData.coordinates.length + ' points'\n      });\n    }\n  };\n\n  // üöÄ WebSocket Real-Time GPS Tracking - Style Google Maps\n  useEffect(() => {\n    if (!currentOrder?.id) return;\n\n    if (import.meta.env.DEV) {\n      console.log('üîå Initialisation WebSocket tracking pour commande:', currentOrder.id);\n    }\n\n    // Cr√©er connexion WebSocket\n    const socket = io();\n\n    // Rejoindre la room de tracking pour cette commande\n    socket.emit('join', `order-${currentOrder.id}`);\n\n    // √âcouter les mises √† jour GPS en temps r√©el (2 secondes comme Google Maps)\n    socket.on('deliveryLocationUpdate', (locationData) => {\n      const { lat, lng, speed, bearing, timestamp } = locationData;\n      \n      if (import.meta.env.DEV) {\n        console.log('üìç Position GPS temps r√©el re√ßue:', {\n          lat, lng, speed, bearing, timestamp,\n          orderId: currentOrder.id\n        });\n      }\n\n      const newLocation = { lat: parseFloat(lat), lng: parseFloat(lng) };\n      \n      // Animation fluide du marqueur si position pr√©c√©dente existe\n      if (deliveryPersonLocation) {\n        animateMarkerMovement(deliveryPersonLocation, newLocation);\n      }\n\n      // Mise √† jour des donn√©es\n      setDeliveryPersonLocation(newLocation);\n      setDeliverySpeed(speed || 0);\n      setDeliveryBearing(bearing || 0);\n      setLastLocationUpdate(new Date(timestamp));\n      \n      // üéØ V√©rification geofencing automatique\n      if (userLat && userLng) {\n        checkGeofencing(parseFloat(lat), parseFloat(lng));\n      }\n      \n      // üïê Calcul ETA dynamique bas√© sur vitesse r√©elle\n      if (speed > 0 && userLat && userLng) {\n        const remainingDistance = calculateDistance(parseFloat(lat), parseFloat(lng), userLat, userLng);\n        const estimatedMinutes = (remainingDistance / (speed / 60)) * 60; // Conversion km/h vers temps\n        setEstimatedTime(Math.round(estimatedMinutes));\n      }\n    });\n\n    // Gestion des erreurs WebSocket\n    socket.on('connect_error', (error) => {\n      console.error('‚ùå Erreur connexion WebSocket:', error);\n      toast({\n        title: \"Connexion instable\",\n        description: \"Le suivi GPS peut √™tre interrompu\",\n        variant: \"destructive\",\n      });\n    });\n\n    socket.on('connect', () => {\n      if (import.meta.env.DEV) {\n        console.log('‚úÖ WebSocket connect√© pour tracking GPS temps r√©el');\n      }\n    });\n\n    // Nettoyage √† la d√©connexion\n    return () => {\n      socket.emit('leave', `order-${currentOrder.id}`);\n      socket.disconnect();\n      if (import.meta.env.DEV) {\n        console.log('üîå WebSocket d√©connect√© pour commande:', currentOrder.id);\n      }\n    };\n  }, [currentOrder?.id, userLat, userLng, deliveryPersonLocation]);\n\n  // Tra√ßage d'itin√©raire initial et mise √† jour du marqueur livreur\n  useEffect(() => {\n    if (!deliveryPersonLocation || !map) return;\n\n    // Cr√©er ou mettre √† jour le marqueur du livreur\n    if (deliveryMarkerRef.current) {\n      map.removeLayer(deliveryMarkerRef.current);\n    }\n\n    // Ic√¥ne livreur avec direction (bearing) pour plus de r√©alisme\n    const deliveryIcon = L.divIcon({\n      html: `\n        <div style=\"\n          background: #F97316; \n          width: 30px; \n          height: 30px; \n          border-radius: 50%; \n          border: 3px solid white; \n          box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          transform: rotate(${deliveryBearing || 0}deg);\n        \">\n          <svg width=\"18\" height=\"18\" fill=\"white\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 2L13.5 8.5L20 7L14 12L20 17L13.5 15.5L12 22L10.5 15.5L4 17L10 12L4 7L10.5 8.5Z\"/>\n          </svg>\n        </div>\n      `,\n      className: 'delivery-marker-animated',\n      iconSize: [30, 30],\n      iconAnchor: [15, 15],\n    });\n\n    deliveryMarkerRef.current = L.marker([deliveryPersonLocation.lat, deliveryPersonLocation.lng], { \n      icon: deliveryIcon \n    })\n      .addTo(map)\n      .bindPopup(`üöö Livreur ${deliverySpeed > 0 ? `(${Math.round(deliverySpeed)} km/h)` : ''}`);\n\n    // Tracer l'itin√©raire si user location disponible\n    if (userLat && userLng) {\n      calculateRealRoute(\n        deliveryPersonLocation.lat,\n        deliveryPersonLocation.lng,\n        userLat,\n        userLng\n      ).then(routeData => {\n        if (routeData) {\n          updateRouteDisplay(routeData, deliveryPersonLocation.lat, deliveryPersonLocation.lng);\n        }\n      });\n    }\n  }, [deliveryPersonLocation, map, deliveryBearing, deliverySpeed]);\n\n  // Update delivery person marker\n  useEffect(() => {\n    if (!map || !deliveryPersonLocation) return;\n\n    if (deliveryMarkerRef.current) {\n      map.removeLayer(deliveryMarkerRef.current);\n    }\n\n    const deliveryIcon = L.divIcon({\n      html: `\n        <div style=\"\n          background: #F97316; \n          width: 24px; \n          height: 24px; \n          border-radius: 50%; \n          border: 3px solid white; \n          box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          animation: pulse 2s infinite;\n        \">\n          <svg width=\"14\" height=\"14\" fill=\"white\" viewBox=\"0 0 20 20\">\n            <path d=\"M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z\" />\n            <path d=\"M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707L16 7.586A1 1 0 0015.414 7H14z\" />\n          </svg>\n        </div>\n        <style>\n          @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n          }\n        </style>\n      `,\n      className: 'delivery-marker',\n      iconSize: [24, 24],\n      iconAnchor: [12, 12],\n    });\n\n    deliveryMarkerRef.current = L.marker([deliveryPersonLocation.lat, deliveryPersonLocation.lng], { icon: deliveryIcon })\n      .addTo(map)\n      .bindPopup(`\n        <div style=\"text-align: center; font-size: 12px;\">\n          <strong>üöö ${deliveryPerson?.firstName || 'Livreur'}</strong><br>\n          üìç Position GPS en temps r√©el<br>\n          üõ£Ô∏è Distance: ${routeDistance}km<br>\n          ‚è±Ô∏è ETA: ${estimatedTime}min<br>\n          <small style=\"color: #10b981;\">‚úÖ Position v√©rifi√©e</small>\n        </div>\n      `);\n\n    // Centrage optimis√© avec la nouvelle fonction\n    if (userLat && userLng) {\n      const distance = calculateDistance(\n        deliveryPersonLocation.lat, \n        deliveryPersonLocation.lng,\n        userLat, \n        userLng\n      );\n\n      // Utiliser la fonction de centrage optimis√©e\n      centerMapOnRoute(deliveryPersonLocation.lat, deliveryPersonLocation.lng, userLat, userLng, distance);\n    }\n  }, [map, deliveryPersonLocation, userLat, userLng, estimatedTime, routeDistance, deliveryPerson]);\n\n  // Mutation to confirm delivery completion by patient\n  const confirmDeliveryMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest(`/api/orders/${orderId}/confirm-delivery-completion`, \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders/current'] });\n      toast({\n        title: \"Livraison confirm√©e\",\n        description: \"Votre commande a √©t√© marqu√©e comme livr√©e avec succ√®s\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de confirmer la livraison\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmDelivery = () => {\n    if (currentOrder) {\n      confirmDeliveryMutation.mutate(currentOrder.id);\n    }\n  };\n\n  const goBack = () => {\n    setLocation(\"/home\");\n  };\n\n  const getStatusSteps = () => {\n    const status = currentOrder?.status;\n    const steps = [\n      { \n        key: 'pending', \n        label: 'Commande confirm√©e', \n        time: currentOrder?.createdAt ? new Date(currentOrder.createdAt).toLocaleString('fr-FR') : \"En attente\", \n        completed: status !== 'pending' \n      },\n      { \n        key: 'ready_for_delivery', \n        label: 'Pr√©paration termin√©e', \n        time: status && ['ready_for_delivery', 'in_transit', 'arrived_pending_confirmation', 'delivered'].includes(status) ? \"Pr√™t pour livraison\" : \"En attente\", \n        completed: status && ['ready_for_delivery', 'in_transit', 'arrived_pending_confirmation', 'delivered'].includes(status) \n      },\n      { \n        key: 'in_transit', \n        label: 'En cours de livraison', \n        time: status === 'in_transit' ? `Distance: ${routeDistance}km - ETA: ${estimatedTime} min` : \n              (status === 'arrived_pending_confirmation' || status === 'delivered') ? \"Termin√©\" : \"En attente\", \n        completed: status && ['in_transit', 'arrived_pending_confirmation', 'delivered'].includes(status),\n        active: status === 'in_transit'\n      },\n      { \n        key: 'arrived_pending_confirmation', \n        label: 'Livreur arriv√©', \n        time: status === 'arrived_pending_confirmation' ? \"En attente de votre confirmation\" : \n              status === 'delivered' ? \"Confirm√©\" : \"En attente\", \n        completed: status === 'delivered',\n        active: status === 'arrived_pending_confirmation'\n      },\n      { \n        key: 'delivered', \n        label: 'Livraison termin√©e', \n        time: status === 'delivered' ? \"Confirm√©\" : \"En attente\", \n        completed: status === 'delivered' \n      },\n    ];\n    return steps;\n  };\n\n  if (orderLoading) {\n    return (\n      <div className=\"min-h-screen bg-pharma-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 mx-auto border-4 border-pharma-green border-t-transparent rounded-full animate-spin mb-2\"></div>\n          <p className=\"text-gray-600\">Chargement des informations de livraison...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg pb-20\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10\"\n            data-testid=\"button-back\"\n          >\n            <svg className=\"w-5 h-5 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\" data-testid=\"text-page-title\">\n            Suivi GPS en temps r√©el\n          </h1>\n        </div>\n      </header>\n\n      {/* Delivery Status */}\n      <div className=\"px-4 py-4\">\n        <div className=\"bg-gradient-to-r from-green-100 to-green-200 border-2 border-green-300 rounded-2xl p-4 mb-4 shadow-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-green-800\" data-testid=\"text-delivery-status\">\n                {currentOrder?.status === 'in_delivery' ? 'üöö En cours de livraison' : 'Suivi de commande'}\n              </h2>\n              <p className=\"text-green-700 text-sm\" data-testid=\"text-order-number\">\n                Commande #{currentOrder?.id.slice(0, 8) || 'PX2024001'}\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-green-600 text-white animate-pulse\">\n              üî¥ LIVE GPS\n            </Badge>\n          </div>\n          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <svg className=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"font-medium text-green-800\" data-testid=\"text-estimated-arrival\">\n                ETA: {estimatedTime > 0 ? `${estimatedTime} min` : 'Calcul...'}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <svg className=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"font-medium text-green-800\">\n                Distance: {routeDistance > 0 ? `${routeDistance} km` : 'Calcul...'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Carte GPS Interactive avec Zoom Optimis√© */}\n        <Card className=\"shadow-sm mb-4\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h3 className=\"font-semibold text-gray-900\">üó∫Ô∏è Suivi GPS avec zoom adaptatif</h3>\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={forceShowRoute}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white text-xs px-2 py-1\"\n                  disabled={!userLat || !userLng || !currentOrder}\n                >\n                  üó∫Ô∏è Afficher l'itin√©raire\n                </Button>\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    if (map && deliveryPersonLocation && userLat && userLng) {\n                      const distance = calculateDistance(\n                        deliveryPersonLocation.lat, \n                        deliveryPersonLocation.lng, \n                        userLat, \n                        userLng\n                      );\n                      centerMapOnRoute(deliveryPersonLocation.lat, deliveryPersonLocation.lng, userLat, userLng, distance);\n                    }\n                  }}\n                  variant=\"outline\"\n                  className=\"text-xs px-2 py-1\"\n                  disabled={!deliveryPersonLocation || !userLat || !userLng}\n                >\n                  üéØ Recentrer\n                </Button>\n              </div>\n            </div>\n            <div \n              ref={mapRef} \n              className=\"h-96 w-full rounded-lg border-2 border-gray-200\"\n              style={{ minHeight: '384px' }}\n            />\n\n            <div className=\"mt-3 grid grid-cols-3 gap-2 text-xs text-gray-600\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                <span>Votre position</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-3 h-3 bg-orange-500 rounded-full animate-pulse\"></div>\n                <span>Livreur GPS live</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n                <span>Pharmacie</span>\n              </div>\n            </div>\n\n            <div className=\"mt-2 flex justify-between items-center text-xs text-gray-500\">\n              <span>üîÑ Zoom adaptatif automatique</span>\n              <span>üõ£Ô∏è Routes optimis√©es CI</span>\n            </div>\n\n            {routeDistance > 0 && (\n              <div className=\"mt-3 bg-green-50 border border-green-200 rounded-lg p-3\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <p className=\"text-sm font-medium text-green-800\">üõ£Ô∏è Distance restante</p>\n                    <p className=\"text-xs text-green-700\">\n                      {routeDistance} km ‚Ä¢ ETA: {estimatedTime} min\n                    </p>\n                    <p className=\"text-xs text-gray-600 mt-1\">\n                      Zoom: {getOptimalZoom(routeDistance)} (adaptatif selon distance)\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-bold text-green-800\">{Math.round((1 - routeDistance/10) * 100)}%</p>\n                    <p className=\"text-xs text-green-700\">Progression</p>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-green-500 h-2 rounded-full transition-all duration-300\" \n                    style={{ width: `${Math.min(100, Math.round((1 - routeDistance/10) * 100))}%` }}\n                  ></div>\n                </div>\n              </div>\n            )}\n\n            {/* Indicateur de fiabilit√© GPS - TOUJOURS VISIBLE */}\n            <div className=\"mt-2 p-2 bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded text-xs\">\n              <div className=\"text-green-800 font-semibold mb-1\">üì° Statut GPS Temps R√©el + Zoom Intelligent</div>\n              <div className=\"text-green-700 space-y-1\">\n                <div>üìç Patient: {userLat ? 'üü¢ GPS actif' : 'üî¥ GPS indisponible'}</div>\n                <div>üöö Livreur: {deliveryPersonLocation ? 'üü¢ Position confirm√©e' : 'üî¥ Position inconnue'}</div>\n                <div>üéØ Zoom adaptatif: {routeDistance > 0 ? `${getOptimalZoom(routeDistance)} (${routeDistance}km)` : 'Standard'}</div>\n                {currentOrder?.deliveryPersonId && (\n                  <div className=\"text-xs text-gray-600 mt-1\">\n                    ID Livreur: {currentOrder.deliveryPersonId.slice(0, 8)}...\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {import.meta.env.DEV && (\n              <div className=\"mt-2 p-2 bg-blue-50 border border-blue-200 rounded text-xs\">\n                <div className=\"text-blue-800 font-semibold mb-1\">üîç Debug Mode D√©veloppeur</div>\n                <div className=\"text-blue-700\">\n                  Statut: {currentOrder?.status || 'N/A'} | \n                  GPS Patient: {userLat ? 'üü¢' : 'üî¥'} | \n                  GPS Livreur: {deliveryPersonLocation ? 'üü¢' : 'üî¥'} |\n                  Zoom Auto: {routeDistance > 0 ? getOptimalZoom(routeDistance) : 'N/A'}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Delivery Timeline */}\n        <Card className=\"shadow-sm mb-4\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Statut de la commande</h3>\n            <div className=\"space-y-3\">\n              {getStatusSteps().map((step, index) => (\n                <div key={step.key} className=\"flex items-center space-x-3\" data-testid={`step-${step.key}`}>\n                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${\n                    step.completed \n                      ? step.active \n                        ? 'bg-pharma-green animate-pulse' \n                        : 'bg-pharma-green'\n                      : 'bg-gray-300'\n                  }`}>\n                    {step.completed ? (\n                      step.active ? (\n                        <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path d=\"M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z\" />\n                          <path d=\"M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707L16 7.586A1 1 0 0015.414 7H14z\" />\n                        </svg>\n                      ) : (\n                        <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )\n                    ) : (\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className={`font-medium text-sm ${step.completed ? 'text-gray-900' : 'text-gray-500'}`}>\n                      {step.label}\n                    </h4>\n                    <p className={`text-xs ${step.completed ? 'text-gray-600' : 'text-gray-400'}`}>\n                      {step.time}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Confirmation Button */}\n            {currentOrder?.status === 'arrived_pending_confirmation' && (\n              <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-green-800 text-sm\">Confirmer la r√©ception</h4>\n                    <p className=\"text-xs text-green-700 mt-1\">\n                      Votre livreur est arriv√©. Confirmez la r√©ception de votre commande\n                    </p>\n                  </div>\n                  <Button\n                    onClick={handleConfirmDelivery}\n                    disabled={confirmDeliveryMutation.isPending}\n                    size=\"sm\"\n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    {confirmDeliveryMutation.isPending ? 'Confirmation...' : 'Confirmer ‚úÖ'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Delivery Contact */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Contact livreur</h3>\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\" \n                alt=\"Livreur\" \n                className=\"w-10 h-10 rounded-full object-cover\" \n                data-testid=\"img-delivery-person\"\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-gray-900 text-sm\" data-testid=\"text-delivery-person-name\">\n                  {deliveryPerson?.firstName || 'Jean-Claude'} {deliveryPerson?.lastName || 'K.'}\n                </h4>\n                <p className=\"text-gray-600 text-xs\">\n                  {deliveryPersonLocation ? 'üü¢ Livreur en route' : 'üî¥ En attente d\\'assignation'}\n                </p>\n                {deliveryPersonLocation && routeDistance > 0 && (\n                  <p className=\"text-xs text-gray-500\">\n                    üìç Distance restante: {routeDistance} km ‚Ä¢ ETA: {estimatedTime} min\n                  </p>\n                )}\n                {!deliveryPersonLocation && currentOrder?.status === 'preparing' && (\n                  <p className=\"text-xs text-amber-600\">\n                    üöõ Recherche d'un livreur disponible...\n                  </p>\n                )}\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"icon\"\n                  className=\"w-8 h-8 bg-green-100 rounded-full hover:bg-green-200\"\n                  data-testid=\"button-call-delivery-person\"\n                  onClick={() => {\n                    const phone = deliveryPerson?.phone || '+225 07 00 00 00';\n                    window.open(`tel:${phone}`, '_self');\n                  }}\n                >\n                  <svg className=\"w-4 h-4 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n                  </svg>\n                </Button>\n                <Button\n                  size=\"icon\"\n                  className=\"w-8 h-8 bg-blue-100 rounded-full hover:bg-blue-200\"\n                  data-testid=\"button-message-delivery-person\"\n                  onClick={() => {\n                    const phone = deliveryPerson?.phone || '+225 07 00 00 00';\n                    window.open(`sms:${phone}?body=Bonjour, concernant ma commande de m√©dicaments`, '_self');\n                  }}\n                >\n                  <svg className=\"w-4 h-4 text-pharma-blue\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\" />\n                    <path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\" />\n                  </svg>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"delivery\" />\n    </div>\n  );\n}","size_bytes":43239},"client/src/pages/edit-profile.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nconst updateProfileSchema = z.object({\n  firstName: z.string().min(1, \"Le pr√©nom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\"),\n  email: z.string().email(\"Email invalide\").optional(),\n  phone: z.string().min(8, \"Le num√©ro de t√©l√©phone doit contenir au moins 8 chiffres\"),\n  // Champs sp√©cifiques aux livreurs\n  vehicleType: z.string().optional(),\n  vehicleBrand: z.string().optional(),\n  vehicleModel: z.string().optional(),\n  vehicleColor: z.string().optional(),\n  vehicleLicensePlate: z.string().optional(),\n  emergencyContactName: z.string().optional(),\n  emergencyContactPhone: z.string().optional(),\n});\n\ntype UpdateProfileData = z.infer<typeof updateProfileSchema>;\n\nexport default function EditProfile() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting }\n  } = useForm<UpdateProfileData>({\n    resolver: zodResolver(updateProfileSchema),\n    defaultValues: {\n      firstName: user?.firstName || '',\n      lastName: user?.lastName || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n      vehicleType: user?.vehicleType || '',\n      vehicleBrand: user?.vehicleBrand || '',\n      vehicleModel: user?.vehicleModel || '',\n      vehicleColor: user?.vehicleColor || '',\n      vehicleLicensePlate: user?.vehicleLicensePlate || '',\n      emergencyContactName: user?.emergencyContactName || '',\n      emergencyContactPhone: user?.emergencyContactPhone || '',\n    },\n    values: user ? {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email || '',\n      phone: user.phone,\n      vehicleType: user.vehicleType || '',\n      vehicleBrand: user.vehicleBrand || '',\n      vehicleModel: user.vehicleModel || '',\n      vehicleColor: user.vehicleColor || '',\n      vehicleLicensePlate: user.vehicleLicensePlate || '',\n      emergencyContactName: user.emergencyContactName || '',\n      emergencyContactPhone: user.emergencyContactPhone || '',\n    } : undefined,\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: UpdateProfileData) => {\n      const response = await apiRequest('/api/auth/user', 'PUT', data);\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Profil mis √† jour\",\n        description: \"Vos informations ont √©t√© mises √† jour avec succ√®s.\",\n      });\n      queryClient.setQueryData(['/api/auth/user'], updatedUser);\n      setLocation(\"/profile\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors de la mise √† jour.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UpdateProfileData) => {\n    updateMutation.mutate(data);\n  };\n\n  const goBack = () => {\n    setLocation(\"/profile\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-pharma-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 mx-auto border-4 border-pharma-green border-t-transparent rounded-full animate-spin mb-2\"></div>\n          <p className=\"text-gray-600\">Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10\"\n          >\n            <svg className=\"w-5 h-5 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            Modifier le profil\n          </h1>\n        </div>\n      </header>\n\n      {/* Form */}\n      <div className=\"px-4 py-6\">\n        <Card className=\"shadow-sm\">\n          <CardHeader>\n            <CardTitle>Informations personnelles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">Pr√©nom</Label>\n                  <Input\n                    id=\"firstName\"\n                    {...register(\"firstName\")}\n                    placeholder=\"Votre pr√©nom\"\n                  />\n                  {errors.firstName && (\n                    <p className=\"text-red-500 text-sm mt-1\">{errors.firstName.message}</p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Nom</Label>\n                  <Input\n                    id=\"lastName\"\n                    {...register(\"lastName\")}\n                    placeholder=\"Votre nom\"\n                  />\n                  {errors.lastName && (\n                    <p className=\"text-red-500 text-sm mt-1\">{errors.lastName.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...register(\"email\")}\n                  placeholder=\"votre.email@exemple.com\"\n                />\n                {errors.email && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.email.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\">Num√©ro de t√©l√©phone</Label>\n                <Input\n                  id=\"phone\"\n                  {...register(\"phone\")}\n                  placeholder=\"0707070707\"\n                />\n                {errors.phone && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.phone.message}</p>\n                )}\n              </div>\n\n              {/* Champs sp√©cifiques aux livreurs */}\n              {user?.role === \"livreur\" && (\n                <>\n                  <div className=\"border-t pt-4 mt-4\">\n                    <h3 className=\"text-lg font-semibold mb-4\">üöó Informations du v√©hicule</h3>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <Label htmlFor=\"vehicleType\">Type de v√©hicule</Label>\n                        <Input\n                          id=\"vehicleType\"\n                          {...register(\"vehicleType\")}\n                          placeholder=\"Moto, Scooter, Voiture...\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"vehicleBrand\">Marque</Label>\n                        <Input\n                          id=\"vehicleBrand\"\n                          {...register(\"vehicleBrand\")}\n                          placeholder=\"Yamaha, Honda, Toyota...\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <Label htmlFor=\"vehicleModel\">Mod√®le</Label>\n                        <Input\n                          id=\"vehicleModel\"\n                          {...register(\"vehicleModel\")}\n                          placeholder=\"DT 125, Wave 110...\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"vehicleColor\">Couleur</Label>\n                        <Input\n                          id=\"vehicleColor\"\n                          {...register(\"vehicleColor\")}\n                          placeholder=\"Rouge, Bleu, Noir...\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"mb-4\">\n                      <Label htmlFor=\"vehicleLicensePlate\">Plaque d'immatriculation</Label>\n                      <Input\n                        id=\"vehicleLicensePlate\"\n                        {...register(\"vehicleLicensePlate\")}\n                        placeholder=\"CI-2578-AB\"\n                        className=\"font-bold text-lg text-center\"\n                        data-testid=\"input-license-plate\"\n                      />\n                      {errors.vehicleLicensePlate && (\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.vehicleLicensePlate.message}</p>\n                      )}\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Cette plaque sera visible par les patients pour vous identifier\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-4 mt-4\">\n                    <h3 className=\"text-lg font-semibold mb-4\">üìû Contact d'urgence</h3>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"emergencyContactName\">Nom du contact</Label>\n                        <Input\n                          id=\"emergencyContactName\"\n                          {...register(\"emergencyContactName\")}\n                          placeholder=\"Nom de la personne √† contacter\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"emergencyContactPhone\">T√©l√©phone d'urgence</Label>\n                        <Input\n                          id=\"emergencyContactPhone\"\n                          {...register(\"emergencyContactPhone\")}\n                          placeholder=\"+225 07 00 00 00\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={goBack}\n                  className=\"flex-1\"\n                >\n                  Annuler\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"flex-1 bg-pharma-green hover:bg-pharma-green/90\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      Sauvegarde...\n                    </>\n                  ) : (\n                    'Sauvegarder'\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11734},"client/src/pages/help-center.tsx":{"content":"\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { ArrowLeft, Phone, Mail, Clock, MessageCircle } from \"lucide-react\";\n\nexport default function HelpCenter() {\n  const [, setLocation] = useLocation();\n\n  const goBack = () => {\n    setLocation(\"/profile\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg pb-20\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            Centre d'aide\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6\">\n        {/* Quick Actions */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Besoin d'aide imm√©diate ?</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button\n              onClick={() => window.location.href = 'tel:+2250767150156'}\n              className=\"w-full bg-pharma-green hover:bg-pharma-green/90 h-12\"\n            >\n              <Phone className=\"w-5 h-5 mr-2\" />\n              Appeler le support: +225 07 67 15 01 56\n            </Button>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => window.location.href = 'mailto:support@yahopharma.ci'}\n                className=\"h-12\"\n              >\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Email\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => window.open('https://wa.me/2250767150156', '_blank')}\n                className=\"h-12\"\n              >\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                WhatsApp\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Business Hours */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Clock className=\"w-5 h-5 text-pharma-green\" />\n              <div>\n                <p className=\"font-medium text-gray-900\">Heures d'ouverture du support</p>\n                <p className=\"text-sm text-gray-600\">Lundi - Vendredi : 8h00 - 18h00</p>\n                <p className=\"text-sm text-gray-600\">Samedi : 9h00 - 16h00</p>\n                <p className=\"text-sm text-gray-600\">Dimanche : Service d'urgence uniquement</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* FAQ */}\n        <Card className=\"shadow-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Questions fr√©quemment pos√©es</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              <AccordionItem value=\"item-1\">\n                <AccordionTrigger>Comment passer une commande ?</AccordionTrigger>\n                <AccordionContent>\n                  <div className=\"space-y-2\">\n                    <p>1. Localisez une pharmacie pr√®s de chez vous</p>\n                    <p>2. Prenez une photo de votre ordonnance ou choisissez vos produits</p>\n                    <p>3. Confirmez votre adresse de livraison</p>\n                    <p>4. Validez votre commande et suivez la livraison</p>\n                  </div>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-2\">\n                <AccordionTrigger>Combien de temps dure la livraison ?</AccordionTrigger>\n                <AccordionContent>\n                  La livraison prend g√©n√©ralement entre 20 √† 45 minutes selon la pharmacie et votre localisation. Vous pouvez suivre votre livreur en temps r√©el une fois la commande confirm√©e.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-3\">\n                <AccordionTrigger>Quels sont les modes de paiement accept√©s ?</AccordionTrigger>\n                <AccordionContent>\n                  <div className=\"space-y-2\">\n                    <p>‚Ä¢ Paiement √† la livraison (esp√®ces)</p>\n                    <p>‚Ä¢ Mobile Money (Orange Money, MTN Money, Moov Money)</p>\n                    <p>‚Ä¢ Carte bancaire (Visa, Mastercard)</p>\n                    <p>‚Ä¢ Virement bancaire</p>\n                  </div>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-4\">\n                <AccordionTrigger>Comment modifier mon adresse de livraison ?</AccordionTrigger>\n                <AccordionContent>\n                  Allez dans \"Mon Profil\" puis \"Adresses de livraison\" pour ajouter, modifier ou supprimer vos adresses. Vous pouvez utiliser la g√©olocalisation pour une localisation pr√©cise.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-5\">\n                <AccordionTrigger>Puis-je annuler ma commande ?</AccordionTrigger>\n                <AccordionContent>\n                  Vous pouvez annuler votre commande gratuitement tant qu'elle n'a pas √©t√© confirm√©e par la pharmacie. Une fois confirm√©e, contactez le support pour l'annulation.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-6\">\n                <AccordionTrigger>Comment devenir livreur partenaire ?</AccordionTrigger>\n                <AccordionContent>\n                  <div className=\"space-y-2\">\n                    <p>1. Cr√©ez un compte livreur dans l'application</p>\n                    <p>2. Postulez aupr√®s d'une pharmacie</p>\n                    <p>3. Attendez la validation de votre candidature</p>\n                    <p>4. Une fois accept√©, commencez √† recevoir des missions</p>\n                  </div>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-7\">\n                <AccordionTrigger>Que faire si je re√ßois un mauvais produit ?</AccordionTrigger>\n                <AccordionContent>\n                  Contactez imm√©diatement le support via l'application ou par t√©l√©phone. Nous organiserons un √©change gratuit dans les plus brefs d√©lais. Gardez le produit et l'emballage original.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-8\">\n                <AccordionTrigger>Comment fonctionne le programme de fid√©lit√© ?</AccordionTrigger>\n                <AccordionContent>\n                  <div className=\"space-y-2\">\n                    <p>‚Ä¢ Gagnez des points √† chaque commande</p>\n                    <p>‚Ä¢ 1 CFA d√©pens√© = 1 point</p>\n                    <p>‚Ä¢ 100 points = 50 CFA de r√©duction</p>\n                    <p>‚Ä¢ Les points sont automatiquement ajout√©s √† votre compte</p>\n                  </div>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-9\">\n                <AccordionTrigger>Comment signaler un probl√®me avec un livreur ?</AccordionTrigger>\n                <AccordionContent>\n                  Utilisez l'option \"Signaler un probl√®me\" dans le suivi de commande ou contactez directement le support. Nous prenons tous les signalements au s√©rieux et agissons rapidement.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-10\">\n                <AccordionTrigger>Mes donn√©es personnelles sont-elles s√©curis√©es ?</AccordionTrigger>\n                <AccordionContent>\n                  Oui, nous utilisons un cryptage de niveau bancaire pour prot√©ger vos donn√©es. Consultez notre politique de confidentialit√© pour plus de d√©tails sur la protection de vos informations personnelles.\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"profile\" />\n    </div>\n  );\n}\n","size_bytes":8588},"client/src/pages/home.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useNotifications } from \"@/hooks/use-notifications\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { hasUnread } = useNotifications();\n\n  const navigateToCamera = () => {\n    // Au lieu d'aller vers /camera, ouvrir directement l'input file\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.capture = 'environment';\n    input.onchange = (e: any) => {\n      const file = e.target.files[0];\n      if (file) {\n        // Stocker la photo et aller directement aux pharmacies\n        localStorage.setItem('prescriptionPhoto', JSON.stringify({\n          name: file.name,\n          size: file.size,\n          lastModified: file.lastModified\n        }));\n        setLocation(\"/pharmacies\");\n      }\n    };\n    input.click();\n  };\n\n  const navigateToPharmacies = () => {\n    setLocation(\"/pharmacies\");\n  };\n\n  const navigateToDelivery = () => {\n    setLocation(\"/delivery\");\n  };\n\n  const navigateToProfile = () => {\n    setLocation(\"/profile\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg pb-20\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-pharma-green rounded-lg flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <h1 className=\"text-xl font-bold text-gray-900\" data-testid=\"text-app-name\">\n              Pharma Express CI\n            </h1>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button className=\"relative p-2\" data-testid=\"button-notifications\">\n              <svg className=\"w-5 h-5 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n              </svg>\n              {hasUnread && (\n                <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full notification-badge\"></span>\n              )}\n            </button>\n            <button onClick={navigateToProfile} data-testid=\"button-profile\">\n              <img \n                src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\" \n                alt=\"Profile\" \n                className=\"w-10 h-10 rounded-full object-cover border-2 border-gray-200\" \n              />\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Quick Upload Card */}\n      <div className=\"px-4 py-6\">\n        <div className=\"bg-gradient-to-r from-pharma-green to-green-400 rounded-2xl p-6 text-white mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm0 4a1 1 0 011-1h12a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1V8zm2 2h8v2H5v-2z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"text-white/90 text-sm font-medium\">ORDONNANCE</span>\n              </div>\n              <h2 className=\"text-xl font-semibold mb-1\">Envoyer une ordonnance</h2>\n              <p className=\"text-white/80 text-sm\">Prenez une photo ou t√©l√©versez</p>\n            </div>\n            <Button\n              onClick={navigateToCamera}\n              className=\"bg-white/20 backdrop-blur-sm rounded-xl p-3 hover:bg-white/30 h-auto\"\n              data-testid=\"button-quick-upload\"\n            >\n              <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n              </svg>\n            </Button>\n          </div>\n        </div>\n\n        {/* Services Grid */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <Card className=\"shadow-sm cursor-pointer\" onClick={navigateToPharmacies} data-testid=\"card-pharmacies\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm2 6a2 2 0 104 0 2 2 0 00-4 0zm6 0a2 2 0 104 0 2 2 0 00-4 0z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1\">Pharmacies</h3>\n              <p className=\"text-gray-600 text-sm\">Trouvez pr√®s de vous</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm cursor-pointer\" onClick={navigateToDelivery} data-testid=\"card-delivery\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-pharma-blue delivery-icon\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z\" />\n                  <path d=\"M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707L16 7.586A1 1 0 0015.414 7H14z\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1\">Livraison</h3>\n              <p className=\"text-gray-600 text-sm\">Suivi en temps r√©el</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-insurance\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-purple-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1\">Assurance</h3>\n              <p className=\"text-gray-600 text-sm\">Couverture m√©dicale</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-history\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-orange-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1\">Historique</h3>\n              <p className=\"text-gray-600 text-sm\">Vos commandes</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Delivery Tracking Card */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-4\">√Ä propos de la livraison</h3>\n            <div className=\"flex items-center space-x-3\" data-testid=\"delivery-info\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-gray-900\">Suivez la livraison en temps r√©el</p>\n                <p className=\"text-gray-600 text-sm\">Estim√©: 30-45 minutes</p>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"home\" />\n    </div>\n  );\n}\n","size_bytes":9554},"client/src/pages/language-selection.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport type { Language } from \"@/lib/i18n\";\n\nexport default function LanguageSelection() {\n  const [, setLocation] = useLocation();\n  const { language, setLanguage } = useLanguage();\n  const { t } = useTranslation(language);\n  const [selectedLanguage, setSelectedLanguage] = useState<Language>(language);\n\n  const selectLanguage = (lang: Language) => {\n    setSelectedLanguage(lang);\n    setLanguage(lang); // Mettre √† jour le contexte global\n  };\n\n  const handleContinue = () => {\n    if (selectedLanguage) {\n      setLocation(\"/onboarding\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-pharma-bg\">\n      <div className=\"flex-1 flex flex-col justify-center items-center px-6 py-8\">\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-pharma-green rounded-2xl mb-6\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"app-title\">\n            Pharma Express CI\n          </h1>\n          <p className=\"text-gray-600\">Livraison de m√©dicaments √† domicile</p>\n        </div>\n        \n        <div className=\"w-full max-w-sm space-y-4 mb-12\">\n          <h2 className=\"text-lg font-semibold text-center text-gray-900 mb-6\">\n            {t('chooseLanguage').toUpperCase()}\n          </h2>\n          \n          <Button\n            variant={selectedLanguage === 'fr' ? 'default' : 'outline'}\n            className=\"w-full py-4 px-6 h-auto text-gray-900 font-medium border-2 rounded-xl hover:border-pharma-green transition-colors\"\n            onClick={() => selectLanguage('fr')}\n            data-testid=\"button-language-french\"\n          >\n            üá´üá∑ {t('french').toUpperCase()}\n          </Button>\n          \n          <Button\n            variant={selectedLanguage === 'en' ? 'default' : 'outline'}\n            className=\"w-full py-4 px-6 h-auto text-gray-900 font-medium border-2 rounded-xl hover:border-pharma-green transition-colors\"\n            onClick={() => selectLanguage('en')}\n            data-testid=\"button-language-english\"\n          >\n            üá¨üáß {t('english').toUpperCase()}\n          </Button>\n        </div>\n        \n        <div className=\"w-full max-w-sm space-y-3\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full py-3 px-6 border border-pharma-green text-pharma-green rounded-xl font-medium hover:bg-pharma-green hover:text-white transition-colors\"\n            onClick={() => setLocation(\"/login\")}\n            data-testid=\"button-login\"\n          >\n            {t('login')}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            className=\"w-full py-3 px-6 text-pharma-green font-medium\"\n            onClick={() => setLocation(\"/register\")}\n            data-testid=\"button-register\"\n          >\n            {t('register')}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3460},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { loginSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\ntype LoginFormData = z.infer<typeof loginSchema>;\nexport default function Login() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      phone: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await apiRequest('/api/auth/login', 'POST', data);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: \"Connexion r√©ussie\",\n        description: `Bienvenue ${user.firstName} ${user.lastName}!`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n\n      // Redirection selon le r√¥le de l'utilisateur\n      switch (user.role) {\n        case \"admin\":\n          window.location.href = '/supervisorlock';\n          break;\n        case \"pharmacien\":\n          window.location.href = '/dashboard-pharmacien';\n          break;\n        case \"livreur\":\n          window.location.href = '/dashboard-livreur';\n          break;\n        case \"patient\":\n        default:\n          window.location.href = '/dashboard-patient';\n          break;\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur de connexion\",\n        description: error.message || \"Num√©ro de t√©l√©phone ou mot de passe incorrect\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n            YahoPharma+\n          </CardTitle>\n          <CardDescription>\n            Connectez-vous √† votre compte\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {/* Comptes de test */}\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <h3 className=\"font-semibold text-blue-900 mb-2\">Comptes de test :</h3>\n            <div className=\"text-sm text-blue-800 space-y-1\">\n              <div><strong>Patient:</strong> +225 05 77 88 99 / patient123</div>\n              <div><strong>Pharmacien:</strong> +225 07 11 22 33 / pharma123</div>\n              <div><strong>Livreur:</strong> +225 07 44 55 66 / livreur123</div>\n            </div>\n          </div>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Num√©ro de t√©l√©phone</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"+225 XX XX XX XX XX\"\n                        type=\"tel\"\n                        data-testid=\"input-phone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mot de passe</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Votre mot de passe\"\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Connexion...\" : \"Se connecter\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center space-y-2\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              <Link\n                href=\"/forgot-password\"\n                className=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium\"\n                data-testid=\"link-forgot-password\"\n              >\n                Mot de passe oubli√© ?\n              </Link>\n            </p>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Pas encore de compte ?{\" \"}\n              <Link\n                href=\"/register\"\n                className=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium\"\n                data-testid=\"link-register\"\n              >\n                S'inscrire\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5894},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600 mb-6\">\n            La page que vous cherchez n'existe pas ou a √©t√© d√©plac√©e.\n          </p>\n\n          <Link href=\"/\">\n            <Button className=\"w-full flex items-center gap-2\">\n              <Home className=\"h-4 w-4\" />\n              Retour √† l'accueil\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1026},"client/src/pages/onboarding.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n\n  const handleContinue = () => {\n    setLocation(\"/home\");\n  };\n\n  const handleCameraClick = () => {\n    // Au lieu d'aller vers /camera, ouvrir directement l'input file\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.capture = 'environment';\n    input.onchange = (e: any) => {\n      const file = e.target.files[0];\n      if (file) {\n        // Stocker la photo et aller directement aux pharmacies\n        localStorage.setItem('prescriptionPhoto', JSON.stringify({\n          name: file.name,\n          size: file.size,\n          lastModified: file.lastModified\n        }));\n        setLocation(\"/pharmacies\");\n      }\n    };\n    input.click();\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-pharma-bg\">\n      <div className=\"flex-1 flex flex-col justify-center items-center px-6 py-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-24 h-24 bg-pharma-green rounded-2xl mb-6\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm0 4a1 1 0 011-1h12a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1V8zm2 2h8v2H5v-2z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-app-title\">\n            Pharma Express CI\n          </h1>\n        </div>\n        \n        <Card className=\"w-full max-w-sm mb-8 shadow-sm\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n              T√©l√©verser une ordonnance\n            </h2>\n            <p className=\"text-gray-600 mb-6\">\n              Choisissez une pharmacie et faites-vous livrer vos m√©dicaments\n            </p>\n            \n            <button\n              onClick={handleCameraClick}\n              className=\"w-full border-2 border-dashed border-gray-300 rounded-xl p-8 text-center mb-6 hover:border-pharma-green transition-colors\"\n              data-testid=\"button-upload-prescription\"\n            >\n              <div className=\"w-12 h-12 bg-gray-100 rounded-lg mx-auto mb-3 flex items-center justify-center\">\n                <svg className=\"w-6 h-6 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <p className=\"text-gray-600 font-medium\">T√©l√©verser l'ordonnance</p>\n            </button>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">\n                  S√©lectionner une pharmacie\n                </h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Veuillez s√©lectionner une pharmacie\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          className=\"w-full max-w-sm bg-pharma-blue text-white py-4 rounded-xl font-semibold text-lg h-auto hover:bg-pharma-blue/90\"\n          onClick={handleContinue}\n          data-testid=\"button-continue\"\n        >\n          Continuer\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3662},"client/src/pages/order-validation.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Trash2, ShoppingCart, CreditCard, X } from \"lucide-react\";\n\ninterface Medication {\n  name: string;\n  available: boolean;\n  surBon: boolean;\n  price: number;\n  selected?: boolean;\n}\n\nexport default function OrderValidationPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location, navigate] = useLocation();\n  const searchParams = useSearch();\n  \n  // Get order ID from URL\n  const orderId = new URLSearchParams(searchParams).get('orderId');\n  \n  console.log('Order validation - URL:', location, 'orderId:', orderId);\n  \n  const [selectedMedications, setSelectedMedications] = useState<Record<string, boolean>>({});\n  const [paymentMethod, setPaymentMethod] = useState<string>('');\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n\n  // Fetch order details\n  const { data: order, isLoading } = useQuery({\n    queryKey: [`/api/orders/${orderId}`],\n    queryFn: async () => {\n      const response = await apiRequest(`/api/orders/${orderId}`, \"GET\");\n      return response.json();\n    },\n    enabled: !!orderId\n  });\n\n  // Initialize selected medications when order data loads\n  useEffect(() => {\n    if (order?.medications) {\n      const medications = typeof order.medications === 'string' \n        ? JSON.parse(order.medications) \n        : order.medications;\n      \n      const initialSelection: Record<string, boolean> = {};\n      medications.forEach((med: Medication, index: number) => {\n        if (med.available) {\n          initialSelection[`${med.name}-${index}`] = true;\n        }\n      });\n      setSelectedMedications(initialSelection);\n    }\n  }, [order]);\n\n  // Calculate total price\n  const calculateTotal = () => {\n    if (!order?.medications) return 0;\n    \n    const medications = typeof order.medications === 'string' \n      ? JSON.parse(order.medications) \n      : order.medications;\n    \n    return medications.reduce((total: number, med: Medication, index: number) => {\n      const key = `${med.name}-${index}`;\n      if (selectedMedications[key] && med.available && med.price) {\n        return total + med.price;\n      }\n      return total;\n    }, 0);\n  };\n\n  const subtotal = calculateTotal();\n  const deliveryFee = 1000;\n  const grandTotal = subtotal + deliveryFee;\n\n  // Toggle medication selection\n  const toggleMedication = (medicationKey: string) => {\n    setSelectedMedications(prev => ({\n      ...prev,\n      [medicationKey]: !prev[medicationKey]\n    }));\n  };\n\n  // Payment mutation\n  const paymentMutation = useMutation({\n    mutationFn: (paymentData: any) =>\n      apiRequest(\"/api/orders/payment\", \"POST\", paymentData),\n    onSuccess: () => {\n      toast({\n        title: \"Paiement confirm√©\",\n        description: \"Votre commande est maintenant en cours de livraison\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      navigate('/dashboard-patient');\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur de paiement\",\n        description: \"Impossible de traiter le paiement. Veuillez r√©essayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Cancel order mutation\n  const cancelOrderMutation = useMutation({\n    mutationFn: () => apiRequest(`/api/orders/${orderId}/cancel`, \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Commande annul√©e\",\n        description: \"Votre commande a √©t√© annul√©e avec succ√®s\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      navigate('/dashboard-patient');\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'annuler la commande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePayment = () => {\n    if (!paymentMethod) {\n      toast({\n        title: \"M√©thode de paiement requise\",\n        description: \"Veuillez s√©lectionner un moyen de paiement\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (subtotal === 0) {\n      toast({\n        title: \"S√©lection requise\",\n        description: \"Veuillez s√©lectionner au moins un m√©dicament\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Cr√©er la liste des m√©dicaments s√©lectionn√©s avec leurs d√©tails\n    const medications = typeof order.medications === 'string' \n      ? JSON.parse(order.medications) \n      : order.medications;\n    \n    const selectedMedicationsDetails = medications\n      .map((med: Medication, index: number) => ({\n        ...med,\n        selected: selectedMedications[`${med.name}-${index}`] || false,\n        index: index\n      }))\n      .filter((med: any) => med.selected);\n\n    const paymentData = {\n      orderId: order.id,\n      paymentMethod,\n      amount: grandTotal,\n      deliveryFee: deliveryFee,\n      selectedMedications: selectedMedicationsDetails\n    };\n\n    paymentMutation.mutate(paymentData);\n  };\n\n  const handleCancelOrder = () => {\n    if (confirm('√ätes-vous s√ªr de vouloir annuler cette commande ?')) {\n      cancelOrderMutation.mutate();\n    }\n  };\n\n  const getPaymentMethods = () => {\n    return [\n      { id: 'wave', name: 'WAVE CI', number: '+225 0701234567', color: 'bg-blue-600' },\n      { id: 'orange', name: 'Orange Money', number: '+225 0701234568', color: 'bg-orange-600' },\n      { id: 'moov', name: 'Moov Money', number: '+225 0501234567', color: 'bg-purple-600' },\n      { id: 'momo', name: 'MTN MoMo', number: '+225 0501234568', color: 'bg-yellow-600' }\n    ];\n  };\n\n  if (!orderId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center py-8\">\n            <p className=\"text-gray-600 mb-4\">Commande non trouv√©e</p>\n            <Button onClick={() => navigate('/dashboard-patient')}>\n              Retour au tableau de bord\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Chargement des d√©tails de la commande...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const medications = order?.medications ? \n    (typeof order.medications === 'string' ? JSON.parse(order.medications) : order.medications) : [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto p-4\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => navigate('/dashboard-patient')}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Retour\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Validation de la commande\n            </h1>\n            <p className=\"text-gray-600\">\n              Commande #{order?.id?.slice(0, 8)} - {order?.pharmacy?.name}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Medications List */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  M√©dicaments disponibles\n                </CardTitle>\n                <CardDescription>\n                  S√©lectionnez les m√©dicaments que vous souhaitez commander\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {medications.map((med: Medication, index: number) => {\n                    const key = `${med.name}-${index}`;\n                    const isSelected = selectedMedications[key] || false;\n                    \n                    return (\n                      <div \n                        key={index}\n                        className={`border rounded-lg p-4 transition-all ${\n                          med.available \n                            ? isSelected \n                              ? 'border-blue-500 bg-blue-50' \n                              : 'border-gray-200 hover:border-gray-300'\n                            : 'border-red-200 bg-red-50'\n                        }`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-start gap-3 flex-1\">\n                            {med.available && (\n                              <Checkbox\n                                checked={isSelected}\n                                onCheckedChange={() => toggleMedication(key)}\n                                className=\"mt-1\"\n                              />\n                            )}\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <h4 className=\"font-medium text-gray-900\">{med.name}</h4>\n                                {med.surBon && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    Sur BON\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              <div className=\"flex items-center gap-4\">\n                                <Badge \n                                  variant={med.available ? \"default\" : \"destructive\"}\n                                  className=\"text-xs\"\n                                >\n                                  {med.available ? \"Disponible\" : \"Indisponible\"}\n                                </Badge>\n                                \n                                {med.available && med.price && (\n                                  <span className=\"text-lg font-semibold text-green-600\">\n                                    {med.price.toLocaleString()} FCFA\n                                  </span>\n                                )}\n                              </div>\n                              \n                              {!med.available && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  Ce m√©dicament n'est pas disponible actuellement\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"space-y-4\">\n            <Card className=\"sticky top-4\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">R√©capitulatif</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Pharmacy Info */}\n                <div className=\"pb-4 border-b\">\n                  <p className=\"text-sm text-gray-600\">Pharmacie</p>\n                  <p className=\"font-medium\">{order?.pharmacy?.name}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">{order?.deliveryAddress}</p>\n                </div>\n\n                {/* Selected Medications */}\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium\">M√©dicaments s√©lectionn√©s</p>\n                  {medications.filter((_: any, index: number) => {\n                    const key = `${medications[index].name}-${index}`;\n                    return selectedMedications[key];\n                  }).length > 0 ? (\n                    medications.map((med: Medication, index: number) => {\n                      const key = `${med.name}-${index}`;\n                      if (!selectedMedications[key]) return null;\n                      \n                      return (\n                        <div key={index} className=\"flex justify-between text-sm\">\n                          <span className=\"truncate flex-1 pr-2\">{med.name}</span>\n                          <span className=\"font-medium\">{med.price?.toLocaleString()} FCFA</span>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <p className=\"text-sm text-gray-500 italic\">Aucun m√©dicament s√©lectionn√©</p>\n                  )}\n                </div>\n\n                {/* Price Breakdown */}\n                <div className=\"space-y-2 pt-4 border-t\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Sous-total m√©dicaments</span>\n                    <span>{subtotal.toLocaleString()} FCFA</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Frais de livraison</span>\n                    <span>{deliveryFee.toLocaleString()} FCFA</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-bold border-t pt-2\">\n                    <span>Total √† payer</span>\n                    <span className=\"text-blue-600\">{grandTotal.toLocaleString()} FCFA</span>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-2 pt-4\">\n                  <Button\n                    onClick={() => setShowPaymentModal(true)}\n                    disabled={subtotal === 0}\n                    className=\"w-full bg-green-600 hover:bg-green-700\"\n                  >\n                    <CreditCard className=\"h-4 w-4 mr-2\" />\n                    Proc√©der au paiement\n                  </Button>\n                  \n                  <Button\n                    onClick={handleCancelOrder}\n                    variant=\"destructive\"\n                    className=\"w-full\"\n                    disabled={cancelOrderMutation.isPending}\n                  >\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Annuler la commande\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Payment Modal */}\n      {showPaymentModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold\">üí≥ Paiement</h3>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setShowPaymentModal(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* Payment Summary */}\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-2\">R√©capitulatif du paiement</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>M√©dicaments:</span>\n                      <span>{subtotal.toLocaleString()} FCFA</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Livraison:</span>\n                      <span>{deliveryFee.toLocaleString()} FCFA</span>\n                    </div>\n                    <div className=\"flex justify-between font-semibold border-t pt-1\">\n                      <span>Total:</span>\n                      <span>{grandTotal.toLocaleString()} FCFA</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Payment Methods */}\n                <div>\n                  <h4 className=\"font-medium mb-3\">Choisir le moyen de paiement</h4>\n                  <div className=\"space-y-2\">\n                    {getPaymentMethods().map((method) => (\n                      <div \n                        key={method.id}\n                        className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                          paymentMethod === method.id \n                            ? 'border-blue-500 bg-blue-50' \n                            : 'border-gray-200 hover:border-gray-300'\n                        }`}\n                        onClick={() => setPaymentMethod(method.id)}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-4 h-4 rounded-full border-2 ${\n                            paymentMethod === method.id \n                              ? 'border-blue-500 bg-blue-500' \n                              : 'border-gray-300'\n                          }`}>\n                            {paymentMethod === method.id && (\n                              <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                            )}\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{method.name}</p>\n                            <p className=\"text-sm text-gray-600\">{method.number}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Payment Instructions */}\n                {paymentMethod && (\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium mb-2\">üìã Instructions</h4>\n                    <div className=\"text-sm text-yellow-800 space-y-1\">\n                      <p>1. Ouvrez votre app {getPaymentMethods().find(m => m.id === paymentMethod)?.name}</p>\n                      <p>2. Envoyez <strong>{grandTotal.toLocaleString()} FCFA</strong> au num√©ro:</p>\n                      <p className=\"font-bold\">{getPaymentMethods().find(m => m.id === paymentMethod)?.number}</p>\n                      <p>3. Confirmez ci-dessous une fois le paiement effectu√©</p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={() => setShowPaymentModal(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button\n                    className=\"flex-1\"\n                    onClick={handlePayment}\n                    disabled={!paymentMethod || paymentMutation.isPending}\n                  >\n                    {paymentMutation.isPending ? 'Traitement...' : 'Confirmer'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":19910},"client/src/pages/order.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { Camera, Upload, Plus, X, FileText, ArrowLeft, MapPin, Phone, Star, Clock } from \"lucide-react\";\n\nexport default function OrderPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location, navigate] = useLocation();\n\n  // Get pharmacy data from URL params or localStorage\n  const [selectedPharmacy, setSelectedPharmacy] = useState<any>(null);\n\n  const [orderData, setOrderData] = useState({\n    deliveryAddress: '',\n    deliveryLatitude: null as number | null,\n    deliveryLongitude: null as number | null,\n    medications: [{ name: '', surBon: false }],\n    pharmacyMessage: '',\n    bonDocuments: [] as File[],\n    prescriptionPhoto: null as File | null\n  });\n\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [currentAddress, setCurrentAddress] = useState<string>(\"\");\n  const [isDetectingLocation, setIsDetectingLocation] = useState(false);\n\n  useEffect(() => {\n    // Try to get pharmacy data from localStorage (set when navigating from pharmacy list)\n    const pharmacyData = localStorage.getItem('selectedPharmacy');\n    if (pharmacyData) {\n      setSelectedPharmacy(JSON.parse(pharmacyData));\n      // Clear it after use\n      localStorage.removeItem('selectedPharmacy');\n    } else {\n      // If no pharmacy selected, redirect back to pharmacies\n      navigate('/pharmacies');\n    }\n  }, [navigate]);\n\n  // G√©olocalisation automatique avec haute pr√©cision\n  useEffect(() => {\n    if (navigator.geolocation) {\n      setIsDetectingLocation(true);\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude, accuracy } = position.coords;\n\n          // Stocker les coordonn√©es GPS pr√©cises\n          setUserLocation({ lat: latitude, lng: longitude });\n          setOrderData(prev => ({\n            ...prev,\n            deliveryLatitude: latitude,\n            deliveryLongitude: longitude\n          }));\n\n          console.log(`üìç GPS pr√©cis captur√©: ${latitude}, ${longitude} (pr√©cision: ${accuracy}m)`);\n\n          // Reverse geocoding pour obtenir l'adresse\n          try {\n            const response = await fetch(`/api/location/reverse?lat=${latitude}&lng=${longitude}`);\n            const addressData = await response.json();\n            setCurrentAddress(addressData.formatted_address);\n            setOrderData(prev => ({ ...prev, deliveryAddress: addressData.formatted_address }));\n\n            toast({\n              title: \"Position GPS d√©tect√©e\",\n              description: `Coordonn√©es pr√©cises captur√©es (pr√©cision: ${Math.round(accuracy)}m)`,\n            });\n          } catch (error) {\n            console.error(\"Erreur g√©olocalisation:\", error);\n            // Garder les coordonn√©es m√™me si le reverse geocoding √©choue\n            toast({\n              title: \"Coordonn√©es GPS captur√©es\",\n              description: \"Position GPS enregistr√©e. Veuillez saisir votre adresse manuellement.\",\n            });\n          } finally {\n            setIsDetectingLocation(false);\n          }\n        },\n        (error) => {\n          console.error(\"Erreur de g√©olocalisation:\", error);\n          setIsDetectingLocation(false);\n          toast({\n            title: \"G√©olocalisation\",\n            description: \"Impossible d'obtenir votre position. Veuillez saisir votre adresse manuellement.\",\n            variant: \"destructive\",\n          });\n        },\n        {\n          enableHighAccuracy: true,    // Demander la meilleure pr√©cision possible\n          timeout: 15000,              // Augmenter le timeout pour permettre une meilleure pr√©cision\n          maximumAge: 0                // Ne pas utiliser de position en cache, toujours r√©cup√©rer une nouvelle position\n        }\n      );\n    }\n  }, [toast]);\n\n  // Helper functions for medication management\n  const addMedication = () => {\n    setOrderData(prev => ({\n      ...prev,\n      medications: [...prev.medications, { name: '', surBon: false }]\n    }));\n  };\n\n  const removeMedication = (index: number) => {\n    setOrderData(prev => ({\n      ...prev,\n      medications: prev.medications.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateMedication = (index: number, field: 'name' | 'surBon', value: string | boolean) => {\n    setOrderData(prev => ({\n      ...prev,\n      medications: prev.medications.map((med, i) => \n        i === index ? { ...med, [field]: value } : med\n      )\n    }));\n  };\n\n  const handlePrescriptionPhoto = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setOrderData(prev => ({ ...prev, prescriptionPhoto: file }));\n      toast({\n        title: \"Photo captur√©e\",\n        description: \"Photo d'ordonnance ajout√©e avec succ√®s\",\n      });\n      // Vider l'input pour permettre la reprise de la m√™me photo\n      e.target.value = '';\n    }\n  };\n\n  const removePrescriptionPhoto = () => {\n    setOrderData(prev => ({ ...prev, prescriptionPhoto: null }));\n  };\n\n  const triggerCameraInput = (e?: React.MouseEvent) => {\n    if (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    const input = document.getElementById('camera-input') as HTMLInputElement;\n    if (input) {\n      input.click();\n    }\n  };\n\n  const handleDocumentUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      setOrderData(prev => ({ ...prev, bonDocuments: [...prev.bonDocuments, ...files] }));\n      toast({\n        title: \"Documents BON ajout√©s\",\n        description: `${files.length} document(s) BON ajout√©(s) avec succ√®s`,\n      });\n    }\n  };\n\n  const removeDocument = (index: number) => {\n    setOrderData(prev => ({\n      ...prev,\n      bonDocuments: prev.bonDocuments.filter((_, i) => i !== index)\n    }));\n  };\n\n  // Fonction de validation: v√©rifier qu'au moins une photo d'ordonnance OU un m√©dicament est fourni\n  const validateOrder = () => {\n    const hasAddress = orderData.deliveryAddress.trim().length > 0;\n    const hasPrescriptionPhoto = orderData.prescriptionPhoto !== null;\n    const hasMedications = orderData.medications.some(med => med.name.trim().length > 0);\n    const hasRequiredBonDocuments = !orderData.medications.some(med => med.name.trim() && med.surBon) || orderData.bonDocuments.length > 0;\n\n    return hasAddress && (hasPrescriptionPhoto || hasMedications) && hasRequiredBonDocuments;\n  };\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const formData = new FormData();\n      formData.append('pharmacyId', selectedPharmacy.id);\n      formData.append('deliveryAddress', orderData.deliveryAddress);\n      formData.append('deliveryNotes', orderData.pharmacyMessage || '');\n      formData.append('medications', JSON.stringify(orderData.medications));\n      formData.append('status', 'pending');\n\n      // Ajouter les coordonn√©es GPS pr√©cises (obligatoires pour un routage pr√©cis)\n      if (orderData.deliveryLatitude && orderData.deliveryLongitude) {\n        formData.append('deliveryLatitude', orderData.deliveryLatitude.toString());\n        formData.append('deliveryLongitude', orderData.deliveryLongitude.toString());\n        console.log(`üì§ Envoi commande avec coordonn√©es GPS: ${orderData.deliveryLatitude}, ${orderData.deliveryLongitude}`);\n      } else {\n        console.warn('‚ö†Ô∏è Commande envoy√©e sans coordonn√©es GPS pr√©cises - le routage sera approximatif');\n      }\n\n      if (orderData.prescriptionPhoto) {\n        formData.append('prescriptionPhoto', orderData.prescriptionPhoto);\n      }\n\n      orderData.bonDocuments.forEach((file: File, index: number) => {\n        formData.append(`bonDocument${index}`, file);\n      });\n\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create order');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Commande envoy√©e\",\n        description: \"Votre commande a √©t√© envoy√©e √† la pharmacie avec succ√®s!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      navigate('/dashboard-patient');\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors de l'envoi de la commande\",\n      });\n    },\n  });\n\n  const handleCreateOrder = () => {\n    if (!selectedPharmacy) {\n      toast({\n        variant: \"destructive\",\n        title: \"Pharmacie requise\",\n        description: \"Aucune pharmacie s√©lectionn√©e\",\n      });\n      return;\n    }\n\n    if (!validateOrder()) {\n      let message = \"Veuillez v√©rifier les √©l√©ments suivants : \";\n      const errors = [];\n\n      if (!orderData.deliveryAddress.trim()) {\n        errors.push(\"adresse de livraison\");\n      }\n\n      if (!orderData.prescriptionPhoto && !orderData.medications.some(med => med.name.trim())) {\n        errors.push(\"photo d'ordonnance ou m√©dicaments saisis\");\n      }\n\n      if (orderData.medications.some(med => med.name.trim() && med.surBon) && orderData.bonDocuments.length === 0) {\n        errors.push(\"documents BON pour les m√©dicaments sur BON\");\n      }\n\n      message += errors.join(\", \");\n\n      toast({\n        title: \"Validation requise\",\n        description: message,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Include pharmacy ID in the order data  \n    const validMedications = orderData.medications.filter(med => med.name.trim());\n    const orderPayload = {\n      ...orderData,\n      pharmacyId: selectedPharmacy.id,\n      medications: validMedications,\n      status: 'pending'\n    };\n\n    createOrderMutation.mutate(orderPayload);\n  };\n\n  if (!selectedPharmacy) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto p-4 pb-20\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => navigate('/pharmacies')}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Retour\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Nouvelle Commande\n            </h1>\n            <p className=\"text-gray-600\">\n              Commande √† {selectedPharmacy.name}\n            </p>\n          </div>\n        </div>\n\n        {/* Pharmacy Info Card */}\n        <Card className=\"mb-6 border-l-4 border-l-blue-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-lg\">{selectedPharmacy.name}</h4>\n                <p className=\"text-sm text-gray-600 flex items-center gap-1 mt-1\">\n                  <MapPin className=\"h-3 w-3\" />\n                  {selectedPharmacy.address}\n                </p>\n                <p className=\"text-sm text-gray-500 flex items-center gap-1 mt-1\">\n                  <Phone className=\"h-3 w-3\" />\n                  {selectedPharmacy.phone}\n                </p>\n              </div>\n              <div className=\"flex flex-col items-end gap-1\">\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <span className=\"flex items-center gap-1\">\n                    <Star className=\"h-3 w-3 text-yellow-500\" />\n                    {selectedPharmacy.rating}/5\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    {selectedPharmacy.deliveryTime} min\n                  </span>\n                  {selectedPharmacy.isEmergency24h && (\n                    <Badge variant=\"outline\" className=\"text-xs bg-red-50 text-red-700 border-red-200\">\n                      üö® De garde 24h/24\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <p className=\"text-sm text-blue-800\">\n                üí∞ Frais de livraison: 1000 FCFA (500 FCFA plateforme + 500 FCFA livreur)\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              üìã D√©tails de la Commande\n            </CardTitle>\n            <CardDescription>\n              Remplissez les informations n√©cessaires pour votre commande\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Photo de l'ordonnance */}\n            <div>\n              <label className=\"block text-sm font-medium mb-3\">Photo de l'ordonnance</label>\n              <div className=\"space-y-3\">\n                {!orderData.prescriptionPhoto ? (\n                  <div className=\"border-2 border-dashed border-blue-300 rounded-lg p-6 bg-blue-50\">\n                    <div className=\"text-center\">\n                      <Camera className=\"mx-auto h-16 w-16 text-blue-500 mb-3\" />\n                      <div className=\"text-lg font-medium text-blue-900 mb-2\">\n                          Envoyer la photo de l'ordonnance\n                        </div>\n                        <div className=\"text-sm text-blue-700 mb-4\">\n                          Prenez une photo claire de votre ordonnance en format portrait\n                        </div>\n                        <div className=\"space-y-3\">\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handlePrescriptionPhoto}\n                            className=\"hidden\"\n                            id=\"camera-input\"\n                          />\n                          <Button \n                            type=\"button\" \n                            className=\"bg-blue-600 hover:bg-blue-700 w-full\"\n                            onClick={(e) => triggerCameraInput(e)}\n                          >\n                            <Camera className=\"h-4 w-4 mr-2\" />\n                            Prendre une photo\n                          </Button>\n                          <input\n                            type=\"file\"\n                            multiple\n                            accept=\"image/*,.pdf\"\n                            onChange={handleDocumentUpload}\n                            className=\"hidden\"\n                            id=\"bon-documents-input\"\n                          />\n                        </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <div className=\"border border-green-200 rounded-lg p-4 bg-green-50\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                            <Camera className=\"h-6 w-6 text-green-600\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-green-900\">Photo ajout√©e</p>\n                            <p className=\"text-sm text-green-700 truncate max-w-48\">{orderData.prescriptionPhoto.name}</p>\n                          </div>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={removePrescriptionPhoto}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*,.pdf\"\n                      onChange={handleDocumentUpload}\n                      className=\"hidden\"\n                      id=\"bon-documents-input\"\n                    />\n                    <Button \n                      type=\"button\" \n                      className=\"bg-green-600 hover:bg-green-700 w-full\"\n                      onClick={() => {\n                        document.getElementById('bon-documents-input')?.click();\n                        toast({\n                          title: \"S√©lection de documents BON\",\n                          description: \"Choisissez vos documents BON √† associer\",\n                        });\n                      }}\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Associer un BON\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Adresse de livraison */}\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Adresse de livraison</label>\n\n              {/* Zone d'affichage de la g√©olocalisation */}\n              {isDetectingLocation && (\n                <div className=\"mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n                    <span className=\"text-blue-700 text-sm\">D√©tection de votre position...</span>\n                  </div>\n                </div>\n              )}\n\n              {userLocation && (\n                <div className=\"mb-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-2\">\n                      <MapPin className=\"h-4 w-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <p className=\"text-green-700 text-sm font-medium\">üìç Position GPS pr√©cise d√©tect√©e</p>\n                        <p className=\"text-green-600 text-xs font-mono\">\n                          Lat: {userLocation.lat.toFixed(8)}¬∞ | Lng: {userLocation.lng.toFixed(8)}¬∞\n                        </p>\n                        {currentAddress && (\n                          <p className=\"text-green-600 text-xs mt-1\">üìç {currentAddress}</p>\n                        )}\n                        <p className=\"text-green-500 text-xs mt-1\">‚úÖ Coordonn√©es GPS haute pr√©cision pour routage exact</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <Input\n                type=\"text\"\n                placeholder=\"Saisissez votre adresse compl√®te\"\n                value={orderData.deliveryAddress}\n                onChange={(e) => setOrderData(prev => ({ ...prev, deliveryAddress: e.target.value }))}\n                className=\"w-full\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                L'adresse sera automatiquement remplie si la g√©olocalisation est autoris√©e\n              </p>\n            </div>\n\n            {/* Liste des m√©dicaments */}\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <label className=\"block text-sm font-medium\">\n                  M√©dicaments souhait√©s\n                  <span className=\"text-gray-500 text-xs ml-2\">(Optionnel si photo d'ordonnance fournie)</span>\n                </label>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={addMedication}\n                  className=\"flex items-center gap-1\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Ajouter\n                </Button>\n              </div>\n              <div className=\"space-y-3\">\n                {orderData.medications.map((medication, index) => (\n                  <div key={index} className=\"flex items-center gap-3 p-3 border border-gray-200 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Nom du m√©dicament\"\n                        value={medication.name}\n                        onChange={(e) => updateMedication(index, 'name', e.target.value)}\n                        className=\"w-full\"\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id={`sur-bon-${index}`}\n                        checked={medication.surBon}\n                        onCheckedChange={(checked) => updateMedication(index, 'surBon', checked)}\n                      />\n                      <Label \n                        htmlFor={`sur-bon-${index}`} \n                        className={`text-sm font-medium ${\n                          medication.surBon ? 'text-green-600' : 'text-gray-600'\n                        }`}\n                      >\n                        Sur BON\n                      </Label>\n                    </div>\n                    {orderData.medications.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeMedication(index)}\n                        className=\"text-red-600 hover:text-red-800 p-1\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Documents pour BON - Affich√© d√®s qu'une photo d'ordonnance est prise OU qu'un m√©dicament est marqu√© \"Sur BON\" */}\n            {(orderData.prescriptionPhoto || orderData.medications.some(med => med.surBon)) && (\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Documents BON (si n√©cessaire)\n                  <span className=\"text-blue-600 text-xs ml-2\">\n                    (Carte d'assurance, attestation de prise en charge, etc.)\n                  </span>\n                </label>\n                <div className=\"border-2 border-dashed rounded-lg p-4 border-blue-300 bg-blue-50\">\n                  <div className=\"text-center\">\n                    <FileText className=\"mx-auto h-8 w-8 mb-2 text-blue-500\" />\n                    <p className=\"text-sm mb-2 font-medium text-blue-800\">\n                      Documents BON (si n√©cessaire)\n                    </p>\n                    <p className=\"text-xs mb-3 text-blue-700\">\n                      Carte d'assurance, attestation de prise en charge, etc.\n                    </p>\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*,.pdf\"\n                      onChange={handleDocumentUpload}\n                      className=\"hidden\"\n                      id=\"bon-documents-input\"\n                    />\n                    <Button \n                      type=\"button\" \n                      className=\"text-white bg-blue-600 hover:bg-blue-700\"\n                      size=\"sm\"\n                      onClick={() => {\n                        document.getElementById('bon-documents-input')?.click();\n                        toast({\n                          title: \"S√©lection de fichiers BON\",\n                          description: \"Choisissez vos documents BON √† associer\",\n                        });\n                      }}\n                    >\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Choisir des fichiers\n                    </Button>\n                  </div>\n                  {orderData.bonDocuments.length > 0 && (\n                    <div className=\"mt-4 space-y-2\">\n                      {orderData.bonDocuments.map((doc, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 bg-white rounded border border-blue-200\">\n                          <div className=\"flex items-center gap-2\">\n                            <FileText className=\"h-4 w-4 text-blue-600\" />\n                            <span className=\"text-sm text-gray-700\">{doc.name}</span>\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeDocument(index)}\n                            className=\"text-red-600 hover:text-red-800 p-1\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Message √† la pharmacie */}\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Message √† la pharmacie</label>\n              <Textarea\n                placeholder=\"Informations compl√©mentaires, questions sp√©cifiques...\"\n                value={orderData.pharmacyMessage}\n                onChange={(e) => setOrderData(prev => ({ ...prev, pharmacyMessage: e.target.value }))}\n                className=\"w-full\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                üí° <strong>Info:</strong> Vous pouvez envoyer votre commande de deux fa√ßons : \n                1) <strong>Photo d'ordonnance uniquement</strong> (le pharmacien saisira les m√©dicaments) \n                2) <strong>M√©dicaments saisis manuellement</strong> (avec ou sans photo). \n                La pharmacie d√©terminera le prix final et pourra modifier les d√©tails si n√©cessaire. \n                Les m√©dicaments marqu√©s \"Sur BON\" n√©cessitent une validation de vos documents d'assurance.\n              </p>\n            </div>\n\n            <div className=\"pt-4\">\n              <Button\n                onClick={handleCreateOrder}\n                disabled={createOrderMutation.isPending || !validateOrder()}\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              >\n                {createOrderMutation.isPending ? \"Envoi en cours...\" : \"üì§ Confirmer la commande\"}\n              </Button>\n\n              {/* Indicateur de validation */}\n              <div className=\"mt-2 text-xs text-gray-500 text-center\">\n                {!validateOrder() && (\n                  <span className=\"text-red-600\">‚ö†Ô∏è V√©rifiez les √©l√©ments requis</span>\n                )}\n                {validateOrder() && (\n                  <span className=\"text-green-600\">‚úÖ Pr√™t √† confirmer</span>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"pharmacies\" />\n    </div>\n  );\n}","size_bytes":28637},"client/src/pages/pending-validation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\nexport default function PendingValidation() {\n  const { user, logout } = useAuth();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      // Fetch updated user data from server\n      const response = await fetch('/api/auth/user', {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        \n        // Check if user is now approved\n        if (userData.verificationStatus === 'approved' && \n            (userData.role !== 'livreur' || userData.deliveryApplicationStatus === 'approved')) {\n          // User is approved, redirect to appropriate dashboard\n          window.location.href = userData.role === 'livreur' ? '/dashboard-livreur' : \n                                userData.role === 'pharmacien' ? '/dashboard-pharmacien' : '/dashboard-patient';\n        } else {\n          // Still pending, just reload the page to show any updates\n          window.location.reload();\n        }\n      } else {\n        // Error or unauthorized, reload page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Erreur lors de la v√©rification du statut:', error);\n      window.location.reload();\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const getRoleDisplayName = () => {\n    switch (user?.role) {\n      case 'pharmacien':\n        return 'Pharmacien';\n      case 'livreur':\n        return 'Livreur';\n      default:\n        return 'Utilisateur';\n    }\n  };\n\n  const getValidationMessage = () => {\n    switch (user?.role) {\n      case 'pharmacien':\n        return \"Votre demande d'inscription en tant que pharmacien est en cours de validation par notre √©quipe. Vous recevrez une notification d√®s que votre compte sera approuv√©.\";\n      case 'livreur':\n        return \"Votre demande d'inscription en tant que livreur est en cours de validation par notre √©quipe. Vous recevrez une notification d√®s que votre compte sera approuv√©.\";\n      default:\n        return \"Votre compte est en cours de validation par notre √©quipe.\";\n    }\n  };\n\n  const getRequiredDocuments = () => {\n    switch (user?.role) {\n      case 'pharmacien':\n        return [\n          \"Dipl√¥me de pharmacie\",\n          \"Certificat d'inscription √† l'Ordre des Pharmaciens\",\n          \"Pi√®ce d'identit√©\",\n          \"Justificatif de domicile\",\n          \"Autorisation d'ouverture de pharmacie\"\n        ];\n      case 'livreur':\n        return [\n          \"Pi√®ce d'identit√©\",\n          \"Permis de conduire (si applicable)\",\n          \"Casier judiciaire\",\n          \"Justificatif de domicile\",\n          \"Certificat m√©dical d'aptitude\"\n        ];\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full space-y-6\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"w-20 h-20 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-10 h-10 text-yellow-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Validation en cours\n          </h1>\n          <p className=\"text-gray-600\">\n            Bonjour {user?.firstName} {user?.lastName}\n          </p>\n        </div>\n\n        {/* Status Card */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-2\">\n              <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n                {getRoleDisplayName()}\n              </Badge>\n              <Badge variant=\"outline\" className=\"border-yellow-300 text-yellow-700\">\n                En attente de validation\n              </Badge>\n            </div>\n            <CardTitle className=\"text-xl\">Votre demande est en cours de traitement</CardTitle>\n            <CardDescription className=\"text-base\">\n              {getValidationMessage()}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Status Timeline */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">Compte cr√©√©</p>\n                  <p className=\"text-sm text-gray-600\">Votre inscription a √©t√© enregistr√©e avec succ√®s</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center animate-pulse\">\n                  <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">Validation en cours</p>\n                  <p className=\"text-sm text-gray-600\">V√©rification des documents et informations</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-500\">Acc√®s autoris√©</p>\n                  <p className=\"text-sm text-gray-500\">Acc√®s √† votre tableau de bord professionnel</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Required Documents */}\n            {getRequiredDocuments().length > 0 && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">\n                  Documents requis pour la validation :\n                </h4>\n                <ul className=\"space-y-1\">\n                  {getRequiredDocuments().map((doc, index) => (\n                    <li key={index} className=\"text-sm text-blue-800 flex items-center space-x-2\">\n                      <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                      </svg>\n                      <span>{doc}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Contact Info */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">\n                Besoin d'aide ?\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Si vous avez des questions concernant votre validation, contactez notre support :\n              </p>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">Email :</span> support@yahopharma.ci\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">T√©l√©phone :</span> +225 XX XX XX XX XX\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">Heures d'ouverture :</span> Lun-Ven 8h-18h\n                </p>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Button \n                onClick={handleRefresh} \n                disabled={isRefreshing}\n                className=\"flex-1\"\n              >\n                {isRefreshing ? (\n                  <>\n                    <svg className=\"animate-spin -ml-1 mr-3 h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    V√©rification...\n                  </>\n                ) : (\n                  'Actualiser le statut'\n                )}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={logout}\n                className=\"flex-1\"\n              >\n                Se d√©connecter\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500\">\n          <p>\n            D√©lai de validation habituel : 24-48 heures ouvr√©es\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10359},"client/src/pages/pharmacies.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { MapPin, Clock, Star, Phone, UserCheck, Briefcase, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Pharmacies() {\n  const { user } = useAuth();\n  const [location, navigate] = useLocation();\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [currentAddress, setCurrentAddress] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  // G√©olocalisation automatique\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation({ lat: latitude, lng: longitude });\n\n          // Reverse geocoding pour obtenir l'adresse\n          try {\n            const response = await fetch(`/api/location/reverse?lat=${latitude}&lng=${longitude}`);\n            const addressData = await response.json();\n            setCurrentAddress(addressData.formatted_address);\n          } catch (error) {\n            console.error(\"Erreur g√©olocalisation:\", error);\n          }\n        },\n        (error) => {\n          console.error(\"Erreur de g√©olocalisation:\", error);\n        }\n      );\n    }\n  }, []);\n\n  // Pharmacies tri√©es par distance si g√©olocalisation disponible\n  const { data: pharmacies, isLoading: pharmaciesLoading, refetch: refetchPharmacies } = useQuery({\n    queryKey: [\"/api/pharmacies\", userLocation],\n    queryFn: async () => {\n      const url = userLocation\n        ? `/api/pharmacies?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=50`\n        : `/api/pharmacies`;\n      console.log('Fetching pharmacies from:', url);\n      const response = await fetch(url, {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        console.error('Failed to fetch pharmacies:', response.status, response.statusText);\n        throw new Error('Erreur lors du chargement des pharmacies');\n      }\n      const data = await response.json();\n      console.log('Pharmacies received:', data);\n\n      // Sort pharmacies by distance if user location is available\n      if (userLocation && Array.isArray(data)) {\n        return data.sort((a, b) => {\n          const distanceA = calculateDistance(\n            userLocation.lat, userLocation.lng,\n            parseFloat(a.latitude) || 0, parseFloat(a.longitude) || 0\n          );\n          const distanceB = calculateDistance(\n            userLocation.lat, userLocation.lng,\n            parseFloat(b.latitude) || 0, parseFloat(b.longitude) || 0\n          );\n          return distanceA - distanceB;\n        });\n      }\n\n      return data || [];\n    },\n    enabled: true,\n    staleTime: 30000, // 30 secondes avant de consid√©rer les donn√©es comme p√©rim√©es\n    refetchInterval: 60000, // Actualisation automatique toutes les minutes\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    refetchIntervalInBackground: false // Pas d'actualisation en arri√®re-plan\n  });\n\n  // Actualisation automatique p√©riodique des pharmacies\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log('Actualisation automatique des pharmacies...');\n      refetchPharmacies();\n    }, 120000); // Toutes les 2 minutes\n\n    // Nettoyer l'intervalle au d√©montage du composant\n    return () => clearInterval(intervalId);\n  }, [refetchPharmacies]);\n\n  // Function to calculate distance between two points\n  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number) => {\n    const R = 6371; // Radius of the Earth in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a =\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c; // Distance in kilometers\n  };\n\n  // Mutation pour postuler √† une pharmacie (livreurs uniquement)\n  const applyToPharmacyMutation = useMutation({\n    mutationFn: async (pharmacyId: string) => {\n      return apiRequest('/api/livreur/apply-to-pharmacy', 'POST', { pharmacyId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Candidature envoy√©e !\",\n        description: \"Votre candidature a √©t√© envoy√©e √† la pharmacie. Vous recevrez une notification d√®s qu'elle sera trait√©e.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'envoyer la candidature\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleApplyToPharmacy = (pharmacy: any) => {\n    applyToPharmacyMutation.mutate(pharmacy.id);\n    localStorage.setItem('selectedPharmacyForApplication', JSON.stringify(pharmacy));\n    navigate('/delivery-application');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6 pb-20\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {user?.role === 'livreur' ? 'üöö Postuler dans une Pharmacie' : 'üè• Pharmacies & Commandes'}\n              </h1>\n              <p className=\"text-gray-600\">\n                {user?.role === 'livreur'\n                  ? `Bienvenue ${user?.firstName} ! Choisissez une pharmacie pour postuler comme livreur`\n                  : `Bienvenue ${user?.firstName} ! Localisez une pharmacie et passez commande`\n                }\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => refetchPharmacies()}\n              disabled={pharmaciesLoading}\n            >\n              {pharmaciesLoading ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n              ) : (\n                \"üîÑ Actualiser\"\n              )}\n            </Button>\n          </div>\n          {currentAddress && (\n            <div className=\"flex items-center gap-2 mt-2 text-sm text-gray-600\">\n              <MapPin className=\"h-4 w-4\" />\n              <span>Votre position: {currentAddress}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Localiser Pharmacie */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {user?.role === 'livreur' ? <Briefcase className=\"h-5 w-5\" /> : <MapPin className=\"h-5 w-5\" />}\n              {user?.role === 'livreur' ? 'Pharmacies Disponibles' : 'Localiser une Pharmacie'}\n            </CardTitle>\n            <CardDescription>\n              {user?.role === 'livreur'\n                ? (userLocation\n                    ? \"Choisissez une pharmacie pour postuler comme livreur (tri√©es par proximit√©)\"\n                    : \"Choisissez une pharmacie pour postuler comme livreur\"\n                  )\n                : (userLocation\n                    ? \"Pharmacies tri√©es par proximit√© selon votre position\"\n                    : \"Trouvez les pharmacies disponibles\"\n                  )\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {pharmaciesLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                <p>Localisation des pharmacies...</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {pharmacies && pharmacies.length > 0 ? (\n                  pharmacies.map((pharmacy: any, index: number) => {\n                    const distance = userLocation ? calculateDistance(\n                      userLocation.lat, userLocation.lng,\n                      parseFloat(pharmacy.latitude) || 0, parseFloat(pharmacy.longitude) || 0\n                    ) : null;\n\n                    return (\n                      <Card key={pharmacy.id} className=\"hover:shadow-md transition-shadow border-l-4 border-l-blue-500\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-lg\">{pharmacy.name}</h4>\n                              <p className=\"text-sm text-gray-600 flex items-center gap-1 mt-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {pharmacy.address}\n                              </p>\n                              {pharmacy.phone && (\n                                <p className=\"text-sm text-gray-500 flex items-center gap-1 mt-1\">\n                                  <Phone className=\"h-3 w-3\" />\n                                  {pharmacy.phone}\n                                </p>\n                              )}\n                              {distance && (\n                                <p className=\"text-xs text-blue-600 mt-1\">\n                                  üìç {distance.toFixed(1)} km\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex flex-col items-end gap-1\">\n                              <Badge variant={pharmacy.isOpen !== false ? 'default' : 'secondary'}>\n                                {pharmacy.isOpen !== false ? 'Ouvert' : 'Ferm√©'}\n                              </Badge>\n                              {pharmacy.isEmergency24h && (\n                                <Badge variant=\"outline\" className=\"text-xs bg-red-50 text-red-700 border-red-200\">\n                                  üö® De garde 24h/24\n                                </Badge>\n                              )}\n                              {index === 0 && userLocation && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  Plus proche\n                                </Badge>\n                              )}\n                              {user?.role === 'livreur' && user?.deliveryApplicationStatus === 'approved' && user?.pharmacyId === pharmacy.id && (\n                                <Badge variant=\"default\" className=\"text-xs bg-green-600\">\n                                  Mon employeur\n                                </Badge>\n                              )}\n                              {user?.role === 'livreur' && user?.appliedPharmacyId === pharmacy.id && user?.deliveryApplicationStatus === 'pending' && (\n                                <Badge variant=\"outline\" className=\"text-xs bg-yellow-50 text-yellow-700 border-yellow-200\">\n                                  Candidature en attente\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center justify-between text-sm mb-3\">\n                            <span className=\"flex items-center gap-1\">\n                              <Star className=\"h-3 w-3 text-yellow-500\" />\n                              {pharmacy.rating || '4.5'}/5\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              {pharmacy.deliveryTime || '30'} min\n                            </span>\n                          </div>\n                          {user?.role === 'livreur' ? (\n                            user?.appliedPharmacyId === pharmacy.id ? (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-pharma-green text-pharma-green hover:bg-pharma-green/10 w-full\"\n                                onClick={() => navigate('/application-status')}\n                              >\n                                Voir ma candidature\n                              </Button>\n                            ) : user?.appliedPharmacyId ? (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                disabled\n                                className=\"text-gray-400 border-gray-300 w-full\"\n                              >\n                                D√©j√† postul√© ailleurs\n                              </Button>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                className=\"bg-pharma-green hover:bg-pharma-green/90 text-white w-full\"\n                                onClick={() => handleApplyToPharmacy(pharmacy)}\n                                disabled={\n                                  user?.deliveryApplicationStatus === 'pending' ||\n                                  (user?.deliveryApplicationStatus === 'approved' && user?.pharmacyId && user?.pharmacyId !== pharmacy.id) ||\n                                  pharmacy.isOpen === false\n                                }\n                              >\n                                {user?.deliveryApplicationStatus === 'approved' && user?.pharmacyId === pharmacy.id ? (\n                                  <div className=\"flex items-center gap-1\">\n                                    <UserCheck className=\"h-4 w-4\" />\n                                    Embauch√©\n                                  </div>\n                                ) : user?.deliveryApplicationStatus === 'pending' && user?.appliedPharmacyId === pharmacy.id ? (\n                                  'Candidature en cours'\n                                ) : user?.deliveryApplicationStatus === 'approved' && user?.pharmacyId && user?.pharmacyId !== pharmacy.id ? (\n                                  'D√©j√† embauch√© ailleurs'\n                                ) : user?.deliveryApplicationStatus === 'pending' && user?.appliedPharmacyId && user?.appliedPharmacyId !== pharmacy.id ? (\n                                  'Candidature en cours ailleurs'\n                                ) : pharmacy.isOpen === false ? (\n                                  'Ferm√©e'\n                                ) : (\n                                  <div className=\"flex items-center gap-1\">\n                                    <Briefcase className=\"h-4 w-4\" />\n                                    Postuler\n                                  </div>\n                                )}\n                              </Button>\n                            )\n                          ) : (\n                            <Button\n                              className=\"w-full\"\n                              size=\"sm\"\n                              onClick={() => {\n                                localStorage.setItem('selectedPharmacy', JSON.stringify(pharmacy));\n                                navigate('/order');\n                              }}\n                              disabled={pharmacy.isOpen === false}\n                            >\n                              {pharmacy.isOpen !== false ? 'S√©lectionner' : 'Ferm√©e'}\n                            </Button>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })\n                ) : (\n                  <div className=\"col-span-full text-center py-8\">\n                    <div className=\"text-gray-500 mb-4\">\n                      {user?.role === 'livreur' ? (\n                        <Briefcase className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                      ) : (\n                        <MapPin className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                      )}\n                      <p>\n                        {user?.role === 'livreur'\n                          ? 'Aucune pharmacie disponible pour postuler'\n                          : 'Aucune pharmacie trouv√©e'\n                        }\n                      </p>\n                      <p className=\"text-sm\">Veuillez r√©essayer plus tard</p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => refetchPharmacies()}\n                      disabled={pharmaciesLoading}\n                    >\n                      Actualiser\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"pharmacies\" />\n    </div>\n  );\n}","size_bytes":17530},"client/src/pages/pharmacy-profile.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { ArrowLeft, MapPin, Phone, Clock, Star, Edit3, Save, X, Navigation, LogOut, UserMinus, Users } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\n\n// Component for delivery personnel management\nconst DeliveryPersonnelTab = ({ pharmacyData, editMode }: { pharmacyData: any, editMode: boolean }) => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch delivery personnel for this pharmacy\n  const { data: deliveryPersonnel, isLoading: personnelLoading } = useQuery({\n    queryKey: ['/api/pharmacien/delivery-personnel'],\n    queryFn: async () => {\n      const response = await apiRequest('/api/pharmacien/delivery-personnel', 'GET');\n      if (!response.ok) {\n        throw new Error('Failed to fetch delivery personnel');\n      }\n      return response.json();\n    },\n    staleTime: 0, // Don't cache the data\n    refetchOnWindowFocus: true, // Refetch when window regains focus\n    refetchOnMount: true // Always refetch on component mount\n  });\n\n  // Remove delivery person mutation\n  const removeDeliveryPersonMutation = useMutation({\n    mutationFn: async (deliveryPersonId: string) => {\n      const response = await apiRequest(`/api/pharmacien/fire-delivery-person/${deliveryPersonId}`, 'POST');\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(errorData || 'Failed to remove delivery person');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Force immediate refresh of delivery personnel list\n      queryClient.invalidateQueries({ queryKey: ['/api/pharmacien/delivery-personnel'] });\n      queryClient.refetchQueries({ queryKey: ['/api/pharmacien/delivery-personnel'] });\n      \n      toast({\n        title: \"Livreur licenci√©\",\n        description: \"Le livreur a √©t√© retir√© de votre √©quipe avec succ√®s\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de licencier le livreur\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleRemoveDeliveryPerson = (deliveryPersonId: string, deliveryPersonName: string) => {\n    if (window.confirm(`√ätes-vous s√ªr de vouloir licencier ${deliveryPersonName} ? Cette action est irr√©versible.`)) {\n      removeDeliveryPersonMutation.mutate(deliveryPersonId);\n    }\n  };\n\n  if (personnelLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            <span className=\"ml-2 text-gray-600\">Chargement des livreurs...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          √âquipe de livraison\n        </CardTitle>\n        <CardDescription>\n          G√©rez votre √©quipe de livreurs\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {!deliveryPersonnel || deliveryPersonnel.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucun livreur</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Vous n'avez pas encore de livreurs dans votre √©quipe.\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              Les candidatures appara√Ætront dans l'onglet \"Candidatures\" de votre tableau de bord.\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {deliveryPersonnel.map((person: any) => (\n              <div key={person.id} className=\"flex items-center justify-between p-4 border rounded-lg bg-gray-50\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <span className=\"text-blue-600 font-semibold\">\n                      {person.firstName?.charAt(0)}{person.lastName?.charAt(0)}\n                    </span>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">\n                      {person.firstName} {person.lastName}\n                    </h4>\n                    <p className=\"text-sm text-gray-600\">{person.phone}</p>\n                    <p className=\"text-xs text-gray-500\">{person.address}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                    Actif\n                  </Badge>\n                  {!editMode && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveDeliveryPerson(person.id, `${person.firstName} ${person.lastName}`)}\n                      disabled={removeDeliveryPersonMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200\"\n                    >\n                      {removeDeliveryPersonMutation.isPending ? (\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-red-600\"></div>\n                      ) : (\n                        <>\n                          <UserMinus className=\"h-4 w-4 mr-1\" />\n                          Licencier\n                        </>\n                      )}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n        \n        <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">üí° Gestion des livreurs</h4>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>‚Ä¢ Les nouvelles candidatures apparaissent dans votre tableau de bord</li>\n            <li>‚Ä¢ Vous pouvez approuver ou rejeter les candidatures</li>\n            <li>‚Ä¢ Les livreurs licenci√©s peuvent postuler ailleurs</li>\n            <li>‚Ä¢ Seuls les livreurs actifs peuvent √™tre assign√©s aux livraisons</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function PharmacyProfile() {\n  const [location, navigate] = useLocation();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editMode, setEditMode] = useState(false);\n  const [editData, setEditData] = useState<any>({});\n  const [isDetectingLocation, setIsDetectingLocation] = useState(false);\n  const [currentAddress, setCurrentAddress] = useState<string>(\"\");\n\n  // G√©olocalisation pour auto-localiser la pharmacie\n  const { latitude, longitude, error: geoError, loading: geoLoading, refetch: refetchLocation } = useGeolocation();\n\n  // R√©cup√©rer les informations de la pharmacie associ√©e au pharmacien\n  // Note: Using PUT with empty body as workaround for Vite middleware intercepting GET requests\n  const { data: pharmacyData, isLoading } = useQuery({\n    queryKey: ['/api/pharmacies/my-pharmacy'],\n    queryFn: async () => {\n      const response = await apiRequest('/api/pharmacies/my-pharmacy', 'PUT', {});\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null; // No pharmacy found yet\n        }\n        throw new Error(`Failed to fetch pharmacy: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!user && user.role === 'pharmacien'\n  });\n\n  const updatePharmacyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log('Sending pharmacy update data:', data);\n      const response = await apiRequest('/api/pharmacies/my-pharmacy', 'PUT', data);\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Pharmacy update failed:', response.status, errorData);\n        throw new Error(`Failed to update pharmacy: ${response.status}`);\n      }\n\n      const result = await response.json();\n      console.log('Pharmacy update successful:', result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log('Pharmacy update mutation success:', data);\n\n      // Invalider les queries\n      queryClient.invalidateQueries({ queryKey: ['/api/pharmacies/my-pharmacy'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n\n      // Afficher le toast de succ√®s\n      toast({ \n        title: \"Profil mis √† jour\", \n        description: \"Les informations de votre pharmacie ont √©t√© sauvegard√©es.\" \n      });\n\n      // R√©initialiser l'√©tat d'√©dition\n      setEditMode(false);\n      setEditData({});\n      setCurrentAddress(\"\");\n    },\n    onError: (error) => {\n      console.error('Pharmacy update mutation error:', error);\n      toast({ \n        title: \"Erreur\", \n        description: \"Impossible de mettre √† jour le profil. Veuillez r√©essayer.\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Reverse geocoding pour obtenir l'adresse √† partir des coordonn√©es\n  useEffect(() => {\n    if (latitude && longitude && editMode && !updatePharmacyMutation.isPending) {\n      const getAddressFromCoords = async () => {\n        try {\n          const response = await fetch(`/api/location/reverse?lat=${latitude}&lng=${longitude}`);\n          if (response.ok) {\n            const addressData = await response.json();\n            setCurrentAddress(addressData.formatted_address || '');\n\n            // Mettre √† jour automatiquement l'adresse dans le formulaire d'√©dition\n            setEditData((prev: any) => ({\n              ...prev,\n              address: addressData.formatted_address || prev.address,\n              latitude: latitude,\n              longitude: longitude\n            }));\n          }\n        } catch (error) {\n          console.error(\"Erreur g√©olocalisation:\", error);\n        }\n      };\n\n      getAddressFromCoords();\n    }\n  }, [latitude, longitude, editMode, updatePharmacyMutation.isPending]);\n\n  const handleEdit = (e?: React.MouseEvent) => {\n    e?.preventDefault();\n    e?.stopPropagation();\n\n    try {\n      // Use setTimeout to prevent race conditions with DOM updates\n      setTimeout(() => {\n        const dataToEdit = pharmacyData || displayPharmacy;\n        \n        // V√©rification de s√©curit√© pour s'assurer que les donn√©es existent\n        if (!dataToEdit) {\n          console.error('Aucune donn√©e de pharmacie disponible pour l\\'√©dition');\n          toast({\n            title: \"Erreur\",\n            description: \"Impossible de charger les donn√©es de la pharmacie\",\n            variant: \"destructive\"\n          });\n          return;\n        }\n\n        // Cr√©er les donn√©es d'√©dition avec des valeurs par d√©faut s√©curis√©es\n        const safeEditData = {\n          name: dataToEdit.name || `Pharmacie ${user?.firstName} ${user?.lastName}`,\n          address: dataToEdit.address || user?.address || '',\n          phone: dataToEdit.phone || user?.phone || '',\n          deliveryTime: dataToEdit.deliveryTime || '30',\n          isOpen: dataToEdit.isOpen !== undefined ? dataToEdit.isOpen : true,\n          isEmergency24h: dataToEdit.isEmergency24h || false,\n          deliveryRadius: dataToEdit.deliveryRadius || 5,\n          minDeliveryFee: dataToEdit.minDeliveryFee || 1000,\n          latitude: dataToEdit.latitude || 5.2893,\n          longitude: dataToEdit.longitude || -3.9882,\n          openingHours: dataToEdit.openingHours || {\n            monday: { open: '08:00', close: '19:00' },\n            tuesday: { open: '08:00', close: '19:00' },\n            wednesday: { open: '08:00', close: '19:00' },\n            thursday: { open: '08:00', close: '19:00' },\n            friday: { open: '08:00', close: '19:00' },\n            saturday: { open: '08:00', close: '17:00' },\n            sunday: { open: '09:00', close: '15:00' }\n          }\n        };\n\n        console.log('Setting edit data:', safeEditData);\n        setEditData(safeEditData);\n        setEditMode(true);\n      }, 50); // Augment√© l√©g√®rement le d√©lai pour plus de s√©curit√©\n    } catch (error) {\n      console.error('Erreur lors de l\\'activation du mode √©dition:', error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'activer le mode √©dition\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleSave = (e?: React.MouseEvent) => {\n    e?.preventDefault();\n    e?.stopPropagation();\n\n    if (!updatePharmacyMutation.isPending) {\n      updatePharmacyMutation.mutate(editData);\n    }\n  };\n\n  const handleCancel = (e?: React.MouseEvent) => {\n    e?.preventDefault();\n    e?.stopPropagation();\n\n    try {\n      if (!updatePharmacyMutation.isPending) {\n        setTimeout(() => {\n          console.log('Cancelling edit mode');\n          setEditMode(false);\n          setEditData({});\n          setCurrentAddress(\"\");\n        }, 50);\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'annulation:', error);\n      // Forcer la sortie du mode √©dition m√™me en cas d'erreur\n      setEditMode(false);\n      setEditData({});\n      setCurrentAddress(\"\");\n    }\n  };\n\n  const handleDetectLocation = () => {\n    setIsDetectingLocation(true);\n    refetchLocation();\n    setTimeout(() => setIsDetectingLocation(false), 3000);\n  };\n\n  const updateOpeningHours = (day: string, field: 'open' | 'close', value: string) => {\n    setEditData({\n      ...editData,\n      openingHours: {\n        ...editData.openingHours,\n        [day]: {\n          ...editData.openingHours?.[day],\n          [field]: value\n        }\n      }\n    });\n  };\n\n  // V√©rifications de s√©curit√©\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // V√©rifier que l'utilisateur est authentifi√© et est un pharmacien\n  if (!user) {\n    navigate('/login');\n    return null;\n  }\n\n  if (user.role !== 'pharmacien') {\n    toast({\n      title: \"Acc√®s refus√©\",\n      description: \"Cette page est r√©serv√©e aux pharmaciens.\",\n      variant: \"destructive\"\n    });\n    navigate('/dashboard');\n    return null;\n  }\n\n  // Afficher les informations de la pharmacie ou cr√©er une pharmacie par d√©faut\n  const displayPharmacy = pharmacyData || {\n    name: `Pharmacie ${user?.firstName} ${user?.lastName}`,\n    address: user?.address || 'Abidjan, C√¥te d\\'Ivoire',\n    phone: user?.phone || '',\n    rating: 4.5,\n    reviewCount: 0,\n    deliveryTime: '30',\n    isOpen: true,\n    latitude: 5.2893,\n    longitude: -3.9882,\n    deliveryRadius: 5,\n    minDeliveryFee: 1000,\n    openingHours: {\n      monday: { open: '08:00', close: '19:00' },\n      tuesday: { open: '08:00', close: '19:00' },\n      wednesday: { open: '08:00', close: '19:00' },\n      thursday: { open: '08:00', close: '19:00' },\n      friday: { open: '08:00', close: '19:00' },\n      saturday: { open: '08:00', close: '17:00' },\n      sunday: { open: '09:00', close: '15:00' }\n    }\n  };\n\n  const days = [\n    { key: 'monday', label: 'Lundi' },\n    { key: 'tuesday', label: 'Mardi' },\n    { key: 'wednesday', label: 'Mercredi' },\n    { key: 'thursday', label: 'Jeudi' },\n    { key: 'friday', label: 'Vendredi' },\n    { key: 'saturday', label: 'Samedi' },\n    { key: 'sunday', label: 'Dimanche' }\n  ];\n\n  try {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pb-20\">\n        <div className=\"bg-white border-b sticky top-0 z-10\">\n          <div className=\"max-w-4xl mx-auto px-4 py-4\">\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => navigate('/dashboard-pharmacien')}\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n              <div className=\"flex-1\">\n                <h1 className=\"text-xl font-bold\">Profil de la Pharmacie</h1>\n                <p className=\"text-sm text-gray-600\">G√©rez les informations de votre √©tablissement</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={logout}\n                className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                D√©connexion\n              </Button>\n            </div>\n          </div>\n        </div>\n\n      <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n        {/* En-t√™te avec informations principales */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  {editMode ? (\n                    <Input\n                      value={editData.name || ''}\n                      onChange={(e) => setEditData({ ...editData, name: e.target.value })}\n                      className=\"text-xl font-bold\"\n                      placeholder=\"Nom de la pharmacie\"\n                    />\n                  ) : (\n                    displayPharmacy.name\n                  )}\n                  <Badge variant={displayPharmacy.isOpen ? 'default' : 'secondary'}>\n                    {displayPharmacy.isOpen ? 'Ouvert' : 'Ferm√©'}\n                  </Badge>\n                </CardTitle>\n                <CardDescription className=\"flex items-start gap-2 mt-2\">\n                  <MapPin className=\"h-4 w-4 mt-1 flex-shrink-0\" />\n                  {editMode ? (\n                    <div className=\"flex-1 space-y-2\">\n                      <Textarea\n                        value={editData.address || ''}\n                        onChange={(e) => setEditData({ ...editData, address: e.target.value })}\n                        placeholder=\"Adresse compl√®te\"\n                        rows={2}\n                        className=\"w-full\"\n                      />\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={handleDetectLocation}\n                          disabled={isDetectingLocation || geoLoading}\n                        >\n                          <Navigation className=\"h-4 w-4 mr-2\" />\n                          {isDetectingLocation || geoLoading ? 'Localisation...' : 'Ma position actuelle'}\n                        </Button>\n                        {currentAddress && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Position d√©tect√©e\n                          </Badge>\n                        )}\n                      </div>\n                      {geoError && (\n                        <p className=\"text-sm text-red-600\">Erreur de g√©olocalisation: {geoError}</p>\n                      )}\n                    </div>\n                  ) : (\n                    <span className=\"flex-1\">{displayPharmacy.address}</span>\n                  )}\n                </CardDescription>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {!editMode ? (\n                  <Button onClick={handleEdit} size=\"sm\">\n                    <Edit3 className=\"h-4 w-4 mr-2\" />\n                    Modifier\n                  </Button>\n                ) : (\n                  <div className=\"flex gap-2\">\n                    <Button onClick={handleSave} size=\"sm\" disabled={updatePharmacyMutation.isPending}>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Sauvegarder\n                    </Button>\n                    <Button onClick={handleCancel} variant=\"outline\" size=\"sm\">\n                      <X className=\"h-4 w-4 mr-2\" />\n                      Annuler\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4 text-gray-500\" />\n                {editMode ? (\n                  <Input\n                    value={editData.phone || ''}\n                    onChange={(e) => setEditData({ ...editData, phone: e.target.value })}\n                    placeholder=\"Num√©ro de t√©l√©phone\"\n                  />\n                ) : (\n                  <span>{displayPharmacy.phone}</span>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Star className=\"h-4 w-4 text-yellow-500\" />\n                <span>{displayPharmacy.rating}/5 ({displayPharmacy.reviewCount || 0} avis)</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-gray-500\" />\n                {editMode ? (\n                  <Input\n                    value={editData.deliveryTime || ''}\n                    onChange={(e) => setEditData({ ...editData, deliveryTime: e.target.value })}\n                    placeholder=\"Temps de livraison (min)\"\n                    type=\"number\"\n                  />\n                ) : (\n                  <span>Livraison en {displayPharmacy.deliveryTime} min</span>\n                )}\n              </div>\n            </div>\n\n            {/* Horaires d'aujourd'hui */}\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-blue-900\">Horaires d'aujourd'hui</span>\n                </div>\n                {editMode ? (\n                  <div className=\"flex items-center gap-2\">\n                    <Input\n                      type=\"time\"\n                      value={editData.openingHours?.monday?.open || displayPharmacy.openingHours?.monday?.open || '08:00'}\n                      onChange={(e) => updateOpeningHours('monday', 'open', e.target.value)}\n                      className=\"w-20 h-8 text-xs\"\n                    />\n                    <span className=\"text-xs text-blue-700\">√†</span>\n                    <Input\n                      type=\"time\"\n                      value={editData.openingHours?.monday?.close || displayPharmacy.openingHours?.monday?.close || '20:00'}\n                      onChange={(e) => updateOpeningHours('monday', 'close', e.target.value)}\n                      className=\"w-20 h-8 text-xs\"\n                    />\n                  </div>\n                ) : (\n                  <span className=\"text-sm text-blue-700 bg-white px-2 py-1 rounded\">\n                    {displayPharmacy.openingHours?.monday?.open || '08:00'} - {displayPharmacy.openingHours?.monday?.close || '20:00'}\n                  </span>\n                )}\n              </div>\n              {editMode && (\n                <p className=\"text-xs text-blue-600 mt-2\">\n                  üí° Modifiez les horaires complets dans l'onglet \"Horaires\"\n                </p>\n              )}\n            </div>\n\n            {editMode && (latitude && longitude) && (\n              <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <p className=\"text-sm text-green-800\">\n                  üìç Position GPS d√©tect√©e: {latitude.toFixed(6)}, {longitude.toFixed(6)}\n                </p>\n                <p className=\"text-xs text-green-700 mt-1\">\n                  Cette position aidera les patients √† mieux localiser votre pharmacie\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"horaires\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"horaires\">Horaires</TabsTrigger>\n            <TabsTrigger value=\"services\">Services</TabsTrigger>\n            <TabsTrigger value=\"livreurs\">Livreurs</TabsTrigger>\n            <TabsTrigger value=\"parametres\">Param√®tres</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"horaires\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Horaires d'ouverture</CardTitle>\n                <CardDescription>\n                  D√©finissez vos horaires pour chaque jour de la semaine\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {days.map((day) => (\n                  <div key={day.key} className=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0\">\n                    <Label className=\"w-24 font-medium\">{day.label}</Label>\n                    <div className=\"flex items-center gap-4\">\n                      {editMode ? (\n                        <>\n                          <Input\n                            type=\"time\"\n                            value={editData.openingHours?.[day.key]?.open || displayPharmacy.openingHours?.[day.key]?.open || '08:00'}\n                            onChange={(e) => updateOpeningHours(day.key, 'open', e.target.value)}\n                            className=\"w-32\"\n                          />\n                          <span className=\"text-gray-500\">√†</span>\n                          <Input\n                            type=\"time\"\n                            value={editData.openingHours?.[day.key]?.close || displayPharmacy.openingHours?.[day.key]?.close || '18:00'}\n                            onChange={(e) => updateOpeningHours(day.key, 'close', e.target.value)}\n                            className=\"w-32\"\n                          />\n                        </>\n                      ) : (\n                        <span className=\"text-sm text-gray-600 bg-gray-50 px-3 py-1 rounded-lg\">\n                          {displayPharmacy.openingHours?.[day.key]?.open || '08:00'} - {displayPharmacy.openingHours?.[day.key]?.close || '18:00'}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"services\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Services disponibles</CardTitle>\n                <CardDescription>\n                  Configurez les services propos√©s par votre pharmacie\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Livraison √† domicile</Label>\n                      <p className=\"text-sm text-gray-600\">Proposer la livraison de m√©dicaments</p>\n                    </div>\n                    <Switch checked={true} disabled={!editMode} />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Conseil pharmaceutique</Label>\n                      <p className=\"text-sm text-gray-600\">Service de conseil personnalis√©</p>\n                    </div>\n                    <Switch checked={true} disabled={!editMode} />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>De garde 24h/24</Label>\n                      <p className=\"text-sm text-gray-600\">Service d'urgence pharmaceutique</p>\n                    </div>\n                    <Switch \n                      checked={editMode ? editData.isEmergency24h : displayPharmacy.isEmergency24h}\n                      onCheckedChange={(checked) => editMode && setEditData({ ...editData, isEmergency24h: checked })}\n                      disabled={!editMode} \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"livreurs\" className=\"space-y-4\">\n            <DeliveryPersonnelTab pharmacyData={displayPharmacy} editMode={editMode} />\n          </TabsContent>\n\n          <TabsContent value=\"parametres\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Param√®tres de la pharmacie</CardTitle>\n                <CardDescription>\n                  G√©rez les param√®tres g√©n√©raux de votre √©tablissement\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Statut de la pharmacie</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <Switch \n                        checked={editMode ? editData.isOpen : displayPharmacy.isOpen}\n                        onCheckedChange={(checked) => editMode && setEditData({ ...editData, isOpen: checked })}\n                        disabled={!editMode}\n                      />\n                      <span className=\"text-sm\">\n                        {(editMode ? editData.isOpen : displayPharmacy.isOpen) ? 'Pharmacie ouverte' : 'Pharmacie ferm√©e'}\n                      </span>\n                    </div>\n                  </div>\n                  <Separator />\n                  <div>\n                    <Label>Zone de livraison (km)</Label>\n                    {editMode ? (\n                      <Input\n                        type=\"number\"\n                        value={editData.deliveryRadius || 5}\n                        onChange={(e) => setEditData({ ...editData, deliveryRadius: Number(e.target.value) })}\n                        className=\"mt-2 w-32\"\n                        min=\"1\"\n                        max=\"50\"\n                      />\n                    ) : (\n                      <p className=\"text-sm text-gray-600 mt-2\">{displayPharmacy.deliveryRadius || 5} km</p>\n                    )}\n                  </div>\n                  <Separator />\n                  <div>\n                    <Label>Frais de livraison minimum (FCFA)</Label>\n                    {editMode ? (\n                      <Input\n                        type=\"number\"\n                        value={editData.minDeliveryFee || 1000}\n                        onChange={(e) => setEditData({ ...editData, minDeliveryFee: Number(e.target.value) })}\n                        className=\"mt-2 w-40\"\n                        min=\"0\"\n                      />\n                    ) : (\n                      <p className=\"text-sm text-gray-600 mt-2\">{displayPharmacy.minDeliveryFee || 1000} FCFA</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n        </div>\n\n        <BottomNavigation currentPage=\"profile\" />\n      </div>\n    );\n  } catch (error) {\n    console.error('Erreur de rendu dans PharmacyProfile:', error);\n    \n    // Page d'erreur de secours\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md w-full text-center\">\n          <h2 className=\"text-xl font-bold text-red-600 mb-4\">Erreur de chargement</h2>\n          <p className=\"text-gray-600 mb-4\">\n            Une erreur s'est produite lors du chargement de la page du profil de pharmacie.\n          </p>\n          <div className=\"space-y-3\">\n            <Button \n              onClick={() => window.location.reload()} \n              className=\"w-full\"\n            >\n              Recharger la page\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => navigate('/dashboard-pharmacien')}\n              className=\"w-full\"\n            >\n              Retour au tableau de bord\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","size_bytes":33414},"client/src/pages/privacy-policy.tsx":{"content":"\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { ArrowLeft, Shield, Eye, Lock, Users, Phone, Mail } from \"lucide-react\";\n\nexport default function PrivacyPolicy() {\n  const [, setLocation] = useLocation();\n\n  const goBack = () => {\n    setLocation(\"/profile\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg pb-20\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\">\n            Politique de confidentialit√©\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6\">\n        {/* Introduction */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Shield className=\"w-6 h-6 text-pharma-green\" />\n              <CardTitle className=\"text-lg\">Votre vie priv√©e est importante</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-600 leading-relaxed\">\n              Chez Pharma Express CI, nous nous engageons √† prot√©ger vos donn√©es personnelles. \n              Cette politique explique comment nous collectons, utilisons et prot√©geons vos informations \n              lorsque vous utilisez notre application de livraison de m√©dicaments.\n            </p>\n            <div className=\"mt-4 p-3 bg-pharma-green/10 rounded-lg\">\n              <p className=\"text-sm text-pharma-green font-medium\">\n                Derni√®re mise √† jour : 15 ao√ªt 2025\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Collection */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Eye className=\"w-5 h-5 text-pharma-green\" />\n              <CardTitle className=\"text-base\">Informations que nous collectons</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Informations personnelles</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>‚Ä¢ Nom et pr√©nom</li>\n                <li>‚Ä¢ Num√©ro de t√©l√©phone</li>\n                <li>‚Ä¢ Adresse email (optionnelle)</li>\n                <li>‚Ä¢ Adresses de livraison</li>\n                <li>‚Ä¢ Photo de profil (optionnelle)</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Informations de localisation</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>‚Ä¢ Localisation GPS (avec votre permission)</li>\n                <li>‚Ä¢ Adresses de livraison sauvegard√©es</li>\n                <li>‚Ä¢ Historique des trajets (pour les livreurs)</li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Informations de commande</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>‚Ä¢ Photos d'ordonnances</li>\n                <li>‚Ä¢ Historique des achats</li>\n                <li>‚Ä¢ Pr√©f√©rences de paiement</li>\n                <li>‚Ä¢ √âvaluations et commentaires</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Usage */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Users className=\"w-5 h-5 text-pharma-green\" />\n              <CardTitle className=\"text-base\">Comment nous utilisons vos donn√©es</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Fourniture du service</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>‚Ä¢ Traitement de vos commandes</li>\n                  <li>‚Ä¢ G√©olocalisation des pharmacies</li>\n                  <li>‚Ä¢ Coordination des livraisons</li>\n                  <li>‚Ä¢ Support client personnalis√©</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Am√©lioration du service</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>‚Ä¢ Analyse des tendances d'utilisation</li>\n                  <li>‚Ä¢ Optimisation des trajets de livraison</li>\n                  <li>‚Ä¢ D√©veloppement de nouvelles fonctionnalit√©s</li>\n                  <li>‚Ä¢ Pr√©vention des fraudes</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Communication</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>‚Ä¢ Notifications sur le statut des commandes</li>\n                  <li>‚Ä¢ Alertes importantes de s√©curit√©</li>\n                  <li>‚Ä¢ Offres promotionnelles (avec consentement)</li>\n                  <li>‚Ä¢ Enqu√™tes de satisfaction</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Security */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Lock className=\"w-5 h-5 text-pharma-green\" />\n              <CardTitle className=\"text-base\">Protection de vos donn√©es</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Mesures techniques</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>‚Ä¢ Cryptage SSL/TLS pour toutes les transmissions</li>\n                  <li>‚Ä¢ Bases de donn√©es s√©curis√©es avec acc√®s limit√©</li>\n                  <li>‚Ä¢ Authentification √† deux facteurs pour le personnel</li>\n                  <li>‚Ä¢ Sauvegarde r√©guli√®re et s√©curis√©e des donn√©es</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Mesures organisationnelles</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>‚Ä¢ Formation du personnel sur la protection des donn√©es</li>\n                  <li>‚Ä¢ Acc√®s aux donn√©es sur principe du \"besoin de savoir\"</li>\n                  <li>‚Ä¢ Audits de s√©curit√© r√©guliers</li>\n                  <li>‚Ä¢ Proc√©dures de notification en cas d'incident</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Sharing */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-base\">Partage de donn√©es</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Nous ne vendons jamais vos donn√©es personnelles. Nous partageons uniquement les informations n√©cessaires avec :\n            </p>\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Pharmacies partenaires</h4>\n                <p className=\"text-sm text-gray-600\">Uniquement les informations n√©cessaires pour traiter vos commandes</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Livreurs agr√©√©s</h4>\n                <p className=\"text-sm text-gray-600\">Adresse de livraison et informations de contact pour la livraison</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Prestataires de service</h4>\n                <p className=\"text-sm text-gray-600\">Services de paiement et d'h√©bergement s√©curis√©s uniquement</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Rights */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-base\">Vos droits</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Acc√®s et rectification</h4>\n                <p className=\"text-sm text-gray-600\">Vous pouvez consulter et modifier vos donn√©es personnelles dans votre profil</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Suppression</h4>\n                <p className=\"text-sm text-gray-600\">Vous pouvez demander la suppression de votre compte et de vos donn√©es</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Portabilit√©</h4>\n                <p className=\"text-sm text-gray-600\">Vous pouvez demander une copie de vos donn√©es dans un format lisible</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-1\">Opposition</h4>\n                <p className=\"text-sm text-gray-600\">Vous pouvez vous opposer au traitement de vos donn√©es √† des fins marketing</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cookies */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-base\">Cookies et technologies similaires</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Nous utilisons des cookies et technologies similaires pour :\n            </p>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>‚Ä¢ Maintenir votre session connect√©e</li>\n              <li>‚Ä¢ M√©moriser vos pr√©f√©rences</li>\n              <li>‚Ä¢ Analyser l'utilisation de l'application</li>\n              <li>‚Ä¢ Personnaliser votre exp√©rience</li>\n            </ul>\n            <p className=\"text-sm text-gray-600 mt-3\">\n              Vous pouvez g√©rer vos pr√©f√©rences de cookies dans les param√®tres de votre navigateur.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Contact */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-base\">Nous contacter</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Pour toute question concernant cette politique ou vos donn√©es personnelles :\n            </p>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-4 h-4 text-pharma-green\" />\n                <span className=\"text-sm text-gray-900\">+225 07 67 15 01 56</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Mail className=\"w-4 h-4 text-pharma-green\" />\n                <span className=\"text-sm text-gray-900\">privacy@yahopharma.ci</span>\n              </div>\n            </div>\n            <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n              <p className=\"text-xs text-gray-500\">\n                Responsable de la protection des donn√©es :<br />\n                Pharma Express CI<br />\n                Abidjan, C√¥te d'Ivoire\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Updates */}\n        <Card className=\"shadow-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-base\">Modifications de cette politique</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600\">\n              Nous pouvons mettre √† jour cette politique de confidentialit√© occasionnellement. \n              Les modifications importantes seront communiqu√©es via l'application ou par email. \n              La date de derni√®re mise √† jour est indiqu√©e en haut de cette page.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"profile\" />\n    </div>\n  );\n}\n","size_bytes":12785},"client/src/pages/profile.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n  });\n\n  const { data: userStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/auth/user-stats'],\n    enabled: !!user,\n  });\n\n  const uploadImageMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('profileImage', file);\n      \n      const response = await fetch('/api/auth/upload-profile-image', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Erreur lors de l\\'upload de l\\'image');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Photo mise √† jour\",\n        description: \"Votre photo de profil a √©t√© mise √† jour avec succ√®s.\",\n      });\n      queryClient.setQueryData(['/api/auth/user'], updatedUser);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors de l'upload.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // V√©rifier le type de fichier\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Erreur\",\n          description: \"Veuillez s√©lectionner un fichier image valide.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // V√©rifier la taille (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"Erreur\",\n          description: \"L'image ne doit pas d√©passer 5MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      uploadImageMutation.mutate(file);\n    }\n  };\n\n  const goBack = () => {\n    setLocation(\"/home\");\n  };\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('/api/auth/logout', 'POST', {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"D√©connexion r√©ussie\",\n        description: \"√Ä bient√¥t!\",\n      });\n      queryClient.clear();\n      localStorage.clear();\n      window.location.href = '/login';\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors de la d√©connexion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-pharma-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 mx-auto border-4 border-pharma-green border-t-transparent rounded-full animate-spin mb-2\"></div>\n          <p className=\"text-gray-600\">Chargement du profil...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-pharma-bg pb-20\">\n      {/* Header */}\n      <header className=\"bg-white px-4 py-3 shadow-sm sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goBack}\n            className=\"w-10 h-10\"\n            data-testid=\"button-back\"\n          >\n            <svg className=\"w-5 h-5 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Button>\n          <h1 className=\"text-xl font-bold text-gray-900\" data-testid=\"text-page-title\">\n            Mon Profil\n          </h1>\n        </div>\n      </header>\n\n      {/* Profile Header */}\n      <div className=\"px-4 py-6\">\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"relative\">\n                <img \n                  src={user?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                  alt=\"Profile\" \n                  className=\"w-20 h-20 rounded-full object-cover border-4 border-gray-100 cursor-pointer\" \n                  data-testid=\"img-profile\"\n                  onClick={() => document.getElementById('profile-image-input')?.click()}\n                />\n                <div className=\"absolute bottom-0 right-0 w-6 h-6 bg-pharma-green rounded-full flex items-center justify-center border-2 border-white cursor-pointer\"\n                     onClick={() => document.getElementById('profile-image-input')?.click()}>\n                  <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <input\n                  id=\"profile-image-input\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  className=\"hidden\"\n                />\n                {uploadImageMutation.isPending && (\n                  <div className=\"absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  </div>\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-user-name\">\n                  {user ? `${user.firstName} ${user.lastName}` : 'Chargement...'}\n                </h2>\n                <p className=\"text-gray-600\" data-testid=\"text-user-phone\">\n                  {user?.phone || 'Chargement...'}\n                </p>\n                <p className=\"text-pharma-green text-sm font-medium\">\n                  Membre depuis {user?.createdAt ? new Date(user.createdAt).getFullYear() : '2023'}\n                </p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-pharma-green\"\n                data-testid=\"button-edit-profile\"\n                onClick={() => setLocation(\"/edit-profile\")}\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\" />\n                </svg>\n              </Button>\n            </div>\n            \n            <div className=\"flex justify-center\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold text-pharma-green\" data-testid=\"text-orders-count\">\n                  {statsLoading ? (\n                    <div className=\"w-8 h-8 mx-auto border-2 border-pharma-green border-t-transparent rounded-full animate-spin\"></div>\n                  ) : (\n                    userStats?.totalOrders || 0\n                  )}\n                </p>\n                <p className=\"text-gray-600 text-base font-medium\">Commandes effectu√©es</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Menu Options */}\n        <div className=\"space-y-4\">\n          <Card className=\"shadow-sm overflow-hidden\">\n            <div className=\"px-4 py-3 border-b border-gray-100\">\n              <h3 className=\"font-semibold text-gray-900\">Compte</h3>\n            </div>\n            \n            <button \n              className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" \n              data-testid=\"button-personal-info\"\n              onClick={() => setLocation(\"/edit-profile\")}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">Informations personnelles</span>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n            \n            <button \n              className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" \n              data-testid=\"button-delivery-addresses\"\n              onClick={() => setLocation(\"/delivery-address\")}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">Adresses de livraison</span>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n            \n            <button className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" data-testid=\"button-payment-methods\">\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z\" />\n                  <path fillRule=\"evenodd\" d=\"M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">M√©thodes de paiement</span>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n          </Card>\n\n          <Card className=\"shadow-sm overflow-hidden\">\n            <div className=\"px-4 py-3 border-b border-gray-100\">\n              <h3 className=\"font-semibold text-gray-900\">Pr√©f√©rences</h3>\n            </div>\n            \n            <button className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" data-testid=\"button-notifications\">\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">Notifications</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-gray-500 text-sm\">Activ√©es</span>\n                <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n            </button>\n            \n            <button className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" data-testid=\"button-language\">\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 011 1v1h3a1 1 0 110 2H9.578a18.87 18.87 0 01-1.724 4.78c.29.354.596.696.914 1.026a1 1 0 11-1.44 1.389c-.188-.196-.373-.396-.554-.6a19.098 19.098 0 01-3.107 3.567 1 1 0 01-1.334-1.49 17.087 17.087 0 003.13-3.733 18.992 18.992 0 01-1.487-2.494 1 1 0 111.79-.89c.234.47.489.928.764 1.372.417-.934.752-1.913.997-2.927H3a1 1 0 110-2h3V3a1 1 0 011-1zm6 6a1 1 0 01.894.553l2.991 5.982a.869.869 0 01.02.037l.99 1.98a1 1 0 11-1.79.895L15.383 16h-4.764l-.724 1.447a1 1 0 11-1.788-.894l.99-1.98.019-.038 2.99-5.982A1 1 0 0113 8zm-1.382 6h2.764L13 11.236 11.618 14z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">Langue</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-gray-500 text-sm\">Fran√ßais</span>\n                <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n            </button>\n          </Card>\n\n          <Card className=\"shadow-sm overflow-hidden\">\n            <div className=\"px-4 py-3 border-b border-gray-100\">\n              <h3 className=\"font-semibold text-gray-900\">Support</h3>\n            </div>\n            \n            <button \n              className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" \n              data-testid=\"button-help-center\"\n              onClick={() => setLocation(\"/help-center\")}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">Centre d'aide</span>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n            \n            <button \n              className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" \n              data-testid=\"button-contact-support\"\n              onClick={() => window.location.href = 'tel:+2250767150156'}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n                </svg>\n                <div className=\"text-left\">\n                  <span className=\"font-medium text-gray-900 block\">Contacter le support</span>\n                  <span className=\"text-sm text-gray-500\">+225 07 67 15 01 56</span>\n                </div>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n\n            <button \n              className=\"w-full px-4 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\" \n              data-testid=\"button-privacy-policy\"\n              onClick={() => setLocation(\"/privacy-policy\")}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <svg className=\"w-5 h-5 text-pharma-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 1L5 4v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V4l-5-3-8 0z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"font-medium text-gray-900\">Politique de confidentialit√©</span>\n              </div>\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n          </Card>\n\n          {/* Logout Button */}\n          <Button\n            onClick={handleLogout}\n            className=\"w-full bg-red-50 text-red-600 py-4 rounded-2xl font-semibold hover:bg-red-100 h-auto\"\n            data-testid=\"button-logout\"\n          >\n            <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z\" clipRule=\"evenodd\" />\n            </svg>\n            Se d√©connecter\n          </Button>\n        </div>\n      </div>\n\n      <BottomNavigation currentPage=\"profile\" />\n    </div>\n  );\n}\n","size_bytes":18832},"client/src/pages/register.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { registerSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\ntype UserRole = \"patient\" | \"pharmacien\" | \"livreur\";\n\nexport default function Register() {\n  const [selectedRole, setSelectedRole] = useState<UserRole | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      email: \"\", // Added email to defaultValues\n      address: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: selectedRole || \"patient\",\n      language: \"fr\",\n    },\n  });\n\n  // Mettre √† jour le r√¥le dans le formulaire quand selectedRole change\n  React.useEffect(() => {\n    if (selectedRole) {\n      form.setValue('role', selectedRole);\n    }\n  }, [selectedRole, form]);\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData | FormData) => {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        credentials: 'include',\n        body: data instanceof FormData ? data : JSON.stringify(data),\n        headers: data instanceof FormData ? {} : { 'Content-Type': 'application/json' }\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Registration failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: \"Inscription r√©ussie\",\n        description: `Bienvenue ${user.firstName} ${user.lastName}!`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n\n      // Redirection selon le r√¥le apr√®s inscription  \n      switch (user.role) {\n        case \"admin\":\n          window.location.href = '/supervisorlock';\n          break;\n        case \"pharmacien\":\n          // Les pharmaciens doivent √™tre valid√©s d'abord\n          if (user.verificationStatus === 'pending') {\n            window.location.href = '/pending-validation';\n          } else {\n            window.location.href = '/dashboard-pharmacien';\n          }\n          break;\n        case \"livreur\":\n          // Les livreurs doivent √™tre valid√©s d'abord\n          if (user.verificationStatus === 'pending') {\n            window.location.href = '/pending-validation';\n          } else {\n            window.location.href = '/dashboard-livreur';\n          }\n          break;\n        case \"patient\":\n        default:\n          window.location.href = '/dashboard-patient';\n          break;\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur d'inscription\",\n        description: error.message || \"Une erreur est survenue lors de l'inscription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterFormData) => {\n    setIsLoading(true);\n\n    // Create FormData for file upload\n    const formData = new FormData();\n\n    // Add all form fields including confirmPassword for validation\n    Object.keys(data).forEach(key => {\n      formData.append(key, (data as any)[key]);\n    });\n\n    // Add uploaded files\n    const idDocumentInput = document.querySelector('[data-testid=\"input-id-document\"]') as HTMLInputElement;\n    const professionalDocumentInput = document.querySelector('[data-testid=\"input-professional-document\"]') as HTMLInputElement;\n    const drivingLicenseInput = document.querySelector('[data-testid=\"input-driving-license\"]') as HTMLInputElement;\n\n    if (idDocumentInput?.files?.[0]) {\n      formData.append('idDocument', idDocumentInput.files[0]);\n    }\n\n    if (professionalDocumentInput?.files?.[0]) {\n      formData.append('professionalDocument', professionalDocumentInput.files[0]);\n    }\n\n    if (drivingLicenseInput?.files?.[0]) {\n      formData.append('drivingLicense', drivingLicenseInput.files[0]);\n    }\n\n    registerMutation.mutate(formData as any);\n    setIsLoading(false);\n  };\n\n  // Render role selection first\n  if (!selectedRole) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n              YahoPharma+\n            </CardTitle>\n            <CardDescription>\n              Choisissez votre profil pour continuer\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <p className=\"text-sm text-gray-600 mb-4\">S√©lectionnez votre type de compte :</p>\n            </div>\n\n            {/* Role Selection Cards */}\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full h-20 flex items-center justify-start space-x-4 hover:bg-blue-50 border-2 hover:border-blue-300\"\n                onClick={() => setSelectedRole(\"patient\")}\n                data-testid=\"button-select-patient\"\n              >\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                  üë•\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-semibold text-blue-600\">Patient</div>\n                  <div className=\"text-sm text-gray-500\">Commander vos m√©dicaments</div>\n                </div>\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"w-full h-20 flex items-center justify-start space-x-4 hover:bg-green-50 border-2 hover:border-green-300\"\n                onClick={() => setSelectedRole(\"pharmacien\")}\n                data-testid=\"button-select-pharmacien\"\n              >\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  üíä\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-semibold text-green-600\">Pharmacien</div>\n                  <div className=\"text-sm text-gray-500\">G√©rer votre pharmacie</div>\n                </div>\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"w-full h-20 flex items-center justify-start space-x-4 hover:bg-purple-50 border-2 hover:border-purple-300\"\n                onClick={() => setSelectedRole(\"livreur\")}\n                data-testid=\"button-select-livreur\"\n              >\n                <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                  üö¥\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-semibold text-purple-600\">Livreur</div>\n                  <div className=\"text-sm text-gray-500\">500 FCFA par livraison</div>\n                </div>\n              </Button>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                D√©j√† un compte ?{\" \"}\n                <Link\n                  href=\"/login\"\n                  className=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium\"\n                  data-testid=\"link-login\"\n                >\n                  Se connecter\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n            YahoPharma+\n          </CardTitle>\n          <CardDescription>\n            Inscription - {selectedRole === \"patient\" ? \"üë• Patient\" : selectedRole === \"pharmacien\" ? \"üíä Pharmacien\" : \"üö¥ Livreur\"}\n          </CardDescription>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setSelectedRole(null)}\n            className=\"mt-2\"\n            data-testid=\"button-back-to-role-selection\"\n          >\n            ‚Üê Changer de profil\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {/* Champ cach√© pour le r√¥le */}\n              <input type=\"hidden\" {...form.register(\"role\")} value={selectedRole} />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Pr√©nom</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Votre pr√©nom\"\n                          data-testid=\"input-firstname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Votre nom\"\n                          data-testid=\"input-lastname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Num√©ro de t√©l√©phone</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"+225 XX XX XX XX XX\"\n                        type=\"tel\"\n                        data-testid=\"input-phone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Adresse email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"votre.email@exemple.com\"\n                        type=\"email\"\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {selectedRole === \"pharmacien\" ? \"Adresse de la pharmacie\" :\n                       selectedRole === \"livreur\" ? \"Adresse de r√©sidence\" :\n                       \"Adresse de domicile\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder={\n                          selectedRole === \"pharmacien\" ? \"Adresse compl√®te de votre pharmacie\" :\n                          selectedRole === \"livreur\" ? \"Votre adresse de r√©sidence\" :\n                          \"Votre adresse compl√®te\"\n                        }\n                        data-testid=\"input-address\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Champ sp√©cial pour Pharmaciens et Livreurs : Pi√®ce d'identit√© */}\n              {(selectedRole === \"pharmacien\" || selectedRole === \"livreur\") && (\n                <div className=\"space-y-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center\">\n                      <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n                      </svg>\n                    </div>\n                    <p className=\"text-sm text-yellow-800 font-medium\">\n                      V√©rification d'identit√© requise\n                    </p>\n                  </div>\n                  <p className=\"text-xs text-yellow-700\">\n                    {selectedRole === \"pharmacien\"\n                      ? \"Joignez une copie de votre carte d'identit√© nationale et dipl√¥me de pharmacien. Un admin validera votre compte.\"\n                      : \"Joignez une copie de votre carte d'identit√© nationale et permis de conduire. Un admin validera votre compte.\"\n                    }\n                  </p>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Document d'identit√© *</label>\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*,.pdf\"\n                      data-testid=\"input-id-document\"\n                      className=\"cursor-pointer\"\n                    />\n                    <p className=\"text-xs text-gray-500\">Formats accept√©s: JPG, PNG, PDF (max 5MB)</p>\n                  </div>\n\n                  {selectedRole === \"pharmacien\" && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Dipl√¥me de pharmacien *</label>\n                      <Input\n                        type=\"file\"\n                        accept=\"image/*,.pdf\"\n                        data-testid=\"input-professional-document\"\n                        className=\"cursor-pointer\"\n                      />\n                      <p className=\"text-xs text-gray-500\">Dipl√¥me ou certification professionnelle</p>\n                    </div>\n                  )}\n\n                  {selectedRole === \"livreur\" && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Permis de conduire *</label>\n                      <Input\n                        type=\"file\"\n                        accept=\"image/*,.pdf\"\n                        data-testid=\"input-driving-license\"\n                        className=\"cursor-pointer\"\n                      />\n                      <p className=\"text-xs text-gray-500\">Permis de conduire valide</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"language\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Langue pr√©f√©r√©e</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value || \"fr\"}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-language\">\n                          <SelectValue placeholder=\"Choisir une langue\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"fr\">Fran√ßais</SelectItem>\n                        <SelectItem value=\"en\">English</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mot de passe</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Minimum 6 caract√®res\"\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirmer le mot de passe</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"R√©p√©tez votre mot de passe\"\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-register\"\n              >\n                {isLoading ? \"Inscription...\" :\n                 selectedRole === \"patient\" ? \"Cr√©er mon compte\" :\n                 `Soumettre pour validation`}\n              </Button>\n\n              {(selectedRole === \"pharmacien\" || selectedRole === \"livreur\") && (\n                <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"text-xs text-blue-700\">\n                    ‚è≥ Votre compte sera activ√© apr√®s validation par notre √©quipe (24-48h)\n                  </p>\n                </div>\n              )}\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              D√©j√† un compte ?{\" \"}\n              <Link\n                href=\"/login\"\n                className=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium\"\n                data-testid=\"link-login\"\n              >\n                Se connecter\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":19774},"client/src/pages/supervisorlock.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User } from \"@shared/schema\";\n\n// Component pour la gestion des commandes\nconst OrdersManagementModule = () => {\n  const { toast } = useToast();\n  const [selectedWeek, setSelectedWeek] = useState(new Date());\n\n  const { data: allOrders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/admin/orders\"],\n  });\n\n  const { data: weeklyStats } = useQuery({\n    queryKey: [\"/api/admin/weekly-stats\", selectedWeek],\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: (data: { orderId: string; status: string }) =>\n      apiRequest(`/api/admin/orders/${data.orderId}/status`, \"POST\", {\n        method: \"PATCH\",\n        body: JSON.stringify({ status: data.status }),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Statut mis √† jour\",\n        description: \"Le statut de la commande a √©t√© modifi√© avec succ√®s\",\n      });\n    },\n  });\n\n  if (ordersLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const validatedOrders = allOrders?.filter((order: any) => order.status === 'confirmed' || order.status === 'ready_for_delivery' || order.status === 'in_delivery' || order.status === 'delivered') || [];\n  const totalWeeklyRevenue = weeklyStats?.totalRevenue || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Statistiques hebdomadaires */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-green-600\">Revenus cette semaine</h3>\n              <p className=\"text-2xl font-bold\">{totalWeeklyRevenue.toLocaleString()} FCFA</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-blue-600\">Commandes valid√©es</h3>\n              <p className=\"text-2xl font-bold\">{validatedOrders.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-orange-600\">Commandes totales</h3>\n              <p className=\"text-2xl font-bold\">{allOrders?.length || 0}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Liste des commandes */}\n      <Card>\n        <CardHeader>\n          <CardTitle>üì¶ Toutes les Commandes</CardTitle>\n          <CardDescription>\n            Gestion centralis√©e de toutes les commandes de la plateforme\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {allOrders?.map((order: any) => (\n              <div key={order.id} className=\"border rounded-lg p-4 bg-white\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"font-semibold\">#{order.id.slice(-8)}</h3>\n                      <Badge variant={\n                        order.status === 'delivered' ? 'default' :\n                        order.status === 'confirmed' ? 'secondary' :\n                        order.status === 'pending' ? 'destructive' : 'outline'\n                      }>\n                        {order.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p><strong>Patient:</strong> {order.patient?.firstName} {order.patient?.lastName}</p>\n                        <p><strong>Pharmacie:</strong> {order.pharmacy?.name}</p>\n                      </div>\n                      <div>\n                        <p><strong>Montant:</strong> {order.totalAmount} FCFA</p>\n                        <p><strong>Date:</strong> {new Date(order.createdAt).toLocaleDateString('fr-FR')}</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-2\">\n                    <select\n                      value={order.status}\n                      onChange={(e) => updateOrderStatusMutation.mutate({\n                        orderId: order.id,\n                        status: e.target.value\n                      })}\n                      className=\"px-3 py-1 border rounded text-sm\"\n                    >\n                      <option value=\"pending\">En attente</option>\n                      <option value=\"confirmed\">Confirm√©e</option>\n                      <option value=\"ready_for_delivery\">Pr√™te livraison</option>\n                      <option value=\"in_delivery\">En livraison</option>\n                      <option value=\"delivered\">Livr√©e</option>\n                      <option value=\"cancelled\">Annul√©e</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Component pour la gestion des pharmacies\nconst PharmaciesManagementModule = () => {\n  const { toast } = useToast();\n\n  const { data: pharmacies, isLoading: pharmaciesLoading } = useQuery({\n    queryKey: [\"/api/admin/pharmacies\"],\n  });\n\n  const updatePharmacyStatusMutation = useMutation({\n    mutationFn: (data: { pharmacyId: string; isActive: boolean }) =>\n      apiRequest(`/api/admin/pharmacies/${data.pharmacyId}/status`, \"POST\", {\n        method: \"PATCH\",\n        body: JSON.stringify({ isActive: data.isActive }),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Statut mis √† jour\",\n        description: \"Le statut de la pharmacie a √©t√© modifi√© avec succ√®s\",\n      });\n    },\n  });\n\n  if (pharmaciesLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>üè• Gestion des Pharmacies</CardTitle>\n        <CardDescription>\n          Superviser et g√©rer toutes les pharmacies partenaires\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {pharmacies?.map((pharmacy: any) => (\n            <div key={pharmacy.id} className=\"border rounded-lg p-4 bg-white\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h3 className=\"font-semibold\">{pharmacy.name}</h3>\n                    <Badge variant={pharmacy.isOpen ? 'default' : 'secondary'}>\n                      {pharmacy.isOpen ? 'Ouverte' : 'Ferm√©e'}\n                    </Badge>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p><strong>Adresse:</strong> {pharmacy.address}</p>\n                      <p><strong>T√©l√©phone:</strong> {pharmacy.phone}</p>\n                    </div>\n                    <div>\n                      <p><strong>Note:</strong> ‚≠ê {pharmacy.rating}/5</p>\n                      <p><strong>Livraison:</strong> {pharmacy.deliveryTime} min</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-col space-y-2\">\n                  <Button\n                    size=\"sm\"\n                    variant={pharmacy.isOpen ? \"destructive\" : \"default\"}\n                    onClick={() => updatePharmacyStatusMutation.mutate({\n                      pharmacyId: pharmacy.id,\n                      isActive: !pharmacy.isOpen\n                    })}\n                  >\n                    {pharmacy.isOpen ? 'Suspendre' : 'Activer'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Component pour la gestion des utilisateurs\nconst UsersManagementModule = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const updateUserStatusMutation = useMutation({\n    mutationFn: (data: { userId: string; isActive: boolean }) =>\n      apiRequest(`/api/admin/users/${data.userId}/status`, \"PATCH\", {\n        isActive: data.isActive\n      }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Statut mis √† jour\",\n        description: `L'utilisateur a √©t√© ${variables.isActive ? 'r√©activ√©' : 'suspendu'} avec succ√®s`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le statut de l'utilisateur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (usersLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Group users by role for better organization\n  const usersByRole = users?.reduce((acc: any, user: any) => {\n    if (!acc[user.role]) acc[user.role] = [];\n    acc[user.role].push(user);\n    return acc;\n  }, {}) || {};\n\n  const roleColors = {\n    patient: 'bg-blue-100 text-blue-800',\n    pharmacien: 'bg-green-100 text-green-800',\n    livreur: 'bg-purple-100 text-purple-800'\n  };\n\n  const roleEmojis = {\n    patient: 'üë§',\n    pharmacien: 'üíä',\n    livreur: 'üö¥'\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>üë• Gestion des Utilisateurs</CardTitle>\n        <CardDescription>\n          Superviser tous les utilisateurs et g√©rer leurs statuts\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {Object.entries(usersByRole).map(([role, roleUsers]: [string, any]) => (\n            <div key={role} className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <div className={`px-3 py-1 rounded-full text-sm font-medium ${roleColors[role as keyof typeof roleColors]}`}>\n                  {roleEmojis[role as keyof typeof roleEmojis]} {role.charAt(0).toUpperCase() + role.slice(1)}s ({roleUsers.length})\n                </div>\n              </div>\n              <div className=\"grid gap-4\">\n                {roleUsers.map((user: any) => (\n                  <div key={user.id} className=\"border rounded-lg p-4 bg-white\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"font-semibold\">{user.firstName} {user.lastName}</h3>\n                          <Badge variant={user.isActive ? 'default' : 'destructive'}>\n                            {user.isActive ? 'Actif' : 'Suspendu'}\n                          </Badge>\n                          {user.verificationStatus === 'pending' && (\n                            <Badge variant=\"secondary\">En attente</Badge>\n                          )}\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <p><strong>T√©l√©phone:</strong> {user.phone}</p>\n                            <p><strong>Adresse:</strong> {user.address}</p>\n                          </div>\n                          <div>\n                            <p><strong>Membre depuis:</strong> {new Date(user.createdAt).toLocaleDateString('fr-FR')}</p>\n                            <p><strong>V√©rification:</strong> {user.verificationStatus}</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col space-y-2\">\n                        <Button\n                          size=\"sm\"\n                          variant={user.isActive ? \"destructive\" : \"default\"}\n                          onClick={() => updateUserStatusMutation.mutate({\n                            userId: user.id,\n                            isActive: !user.isActive\n                          })}\n                          disabled={updateUserStatusMutation.isPending}\n                        >\n                          {user.isActive ? 'Suspendre' : 'R√©activer'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n          \n          {!users || users.length === 0 && (\n            <div className=\"text-center py-8\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                üë•\n              </div>\n              <p className=\"text-gray-500\">Aucun utilisateur trouv√©</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Component pour la gestion des livreurs\nconst DeliveryPersonnelManagementModule = () => {\n  const { toast } = useToast();\n\n  const { data: deliveryPersonnel, isLoading: personnelLoading } = useQuery({\n    queryKey: [\"/api/admin/delivery-personnel\"],\n  });\n\n  const updateDeliveryPersonStatusMutation = useMutation({\n    mutationFn: (data: { deliveryPersonId: string; isActive: boolean }) =>\n      apiRequest(`/api/admin/delivery-personnel/${data.deliveryPersonId}/status`, \"PATCH\", {\n        isActive: data.isActive\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Statut mis √† jour\",\n        description: \"Le statut du livreur a √©t√© modifi√© avec succ√®s\",\n      });\n    },\n  });\n\n  if (personnelLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>üö¥ Gestion des Livreurs</CardTitle>\n        <CardDescription>\n          Superviser les livreurs et leurs performances\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {deliveryPersonnel?.map((person: any) => (\n            <div key={person.id} className=\"border rounded-lg p-4 bg-white\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h3 className=\"font-semibold\">{person.firstName} {person.lastName}</h3>\n                    <Badge variant={person.isActive ? 'default' : 'secondary'}>\n                      {person.isActive ? 'Actif' : 'Inactif'}\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {person.pharmacyName || 'Non assign√©'}\n                    </Badge>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p><strong>T√©l√©phone:</strong> {person.phone}</p>\n                      <p><strong>Adresse:</strong> {person.address}</p>\n                    </div>\n                    <div>\n                      <p><strong>Livraisons:</strong> {person.totalDeliveries || 0}</p>\n                      <p><strong>Note:</strong> ‚≠ê {person.rating || 5.0}/5</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-col space-y-2\">\n                  <Button\n                    size=\"sm\"\n                    variant={person.isActive ? \"destructive\" : \"default\"}\n                    onClick={() => updateDeliveryPersonStatusMutation.mutate({\n                      deliveryPersonId: person.id,\n                      isActive: !person.isActive\n                    })}\n                  >\n                    {person.isActive ? 'Suspendre' : 'Activer'}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function SupervisorLock() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // R√©cup√©rer les utilisateurs en attente de validation\n  const { data: pendingUsers, isLoading } = useQuery({\n    queryKey: [\"/api/admin/pending-users\"],\n  });\n\n  // R√©cup√©rer toutes les statistiques de l'application\n  const { data: appStats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  const validateUserMutation = useMutation({\n    mutationFn: (data: { userId: string; action: 'approve' | 'reject' }) =>\n      apiRequest(`/api/admin/validate-user`, \"POST\", data),\n    onSuccess: (data, variables) => {\n      toast({\n        title: variables.action === 'approve' ? \"Utilisateur approuv√©\" : \"Utilisateur rejet√©\",\n        description: variables.action === 'approve'\n          ? \"L'utilisateur peut maintenant acc√©der √† la plateforme\"\n          : \"L'utilisateur a √©t√© rejet√© et en sera inform√©\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de traiter cette demande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleValidation = async (userId: string, action: 'approve' | 'reject') => {\n    // Check if this is a delivery person with pharmacy application\n    const user = pendingUsers?.find(u => u.id === userId);\n    if (user?.role === 'livreur' && user.appliedPharmacyId) {\n      // Use the admin delivery application response endpoint\n      try {\n        const response = await apiRequest(`/api/admin/delivery-applications/${userId}/respond`, 'POST', {\n          action\n        });\n        if (!response.ok) {\n          throw new Error('Failed to respond to delivery application');\n        }\n        toast({\n          title: action === 'approve' ? 'Livreur approuv√©' : 'Candidature rejet√©e',\n          description: `La candidature a √©t√© ${action === 'approve' ? 'accept√©e' : 'rejet√©e'} avec succ√®s`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/pending-users'] });\n      } catch (error: any) {\n        toast({\n          title: 'Erreur',\n          description: error.message || 'Impossible de traiter la candidature',\n          variant: 'destructive'\n        });\n      }\n    } else {\n      // Use the regular user validation for other roles\n      validateUserMutation.mutate({ userId, action });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Chargement des donn√©es administrateur...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">üîê SupervisorLock - Administration</h1>\n          <p className=\"text-gray-600\">Gestion et supervision de la plateforme YahoPharma+</p>\n        </div>\n\n        <Tabs defaultValue=\"validation\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"validation\" data-testid=\"tab-validation\">\n              Validation\n              {pendingUsers?.length > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2\">{pendingUsers.length}</Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">Utilisateurs</TabsTrigger>\n            <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Commandes</TabsTrigger>\n            <TabsTrigger value=\"pharmacies\" data-testid=\"tab-pharmacies\">Pharmacies</TabsTrigger>\n            <TabsTrigger value=\"deliveries\" data-testid=\"tab-deliveries\">Livreurs</TabsTrigger>\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Tableau de Bord</TabsTrigger>\n          </TabsList>\n\n          {/* Gestion des commandes */}\n          <TabsContent value=\"orders\">\n            <OrdersManagementModule />\n          </TabsContent>\n\n          {/* Gestion des utilisateurs */}\n          <TabsContent value=\"users\">\n            <UsersManagementModule />\n          </TabsContent>\n\n          {/* Validation des comptes en attente */}\n          <TabsContent value=\"validation\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>üë§</span>\n                  <span>Comptes en attente de validation</span>\n                </CardTitle>\n                <CardDescription>\n                  Validez les pi√®ces d'identit√© des Pharmaciens et Livreurs\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {!pendingUsers || pendingUsers.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      ‚úÖ\n                    </div>\n                    <p className=\"text-gray-500\">Aucun compte en attente de validation</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {pendingUsers.map((user: User) => (\n                      <div\n                        key={user.id}\n                        className=\"border rounded-lg p-4 bg-white\"\n                        data-testid={`user-pending-${user.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-3\">\n                              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                                user.role === \"pharmacien\" ? \"bg-green-100\" : \"bg-purple-100\"\n                              }`}>\n                                {user.role === \"pharmacien\" ? \"üíä\" : \"üö¥\"}\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-lg\">\n                                  {user.firstName} {user.lastName}\n                                </h3>\n                                <p className=\"text-sm text-gray-600\">\n                                  {user.role === \"pharmacien\" ? \"Pharmacien\" : \"Livreur\"} ‚Ä¢ {user.phone}\n                                </p>\n                              </div>\n                              <Badge variant=\"secondary\">En attente</Badge>\n                            </div>\n\n                            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                              <div>\n                                <p className=\"text-sm font-medium text-gray-700\">Adresse</p>\n                                <p className=\"text-sm text-gray-600\">{user.address}</p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-gray-700\">Date d'inscription</p>\n                                <p className=\"text-sm text-gray-600\">\n                                  {new Date(user.createdAt!).toLocaleDateString(\"fr-FR\")}\n                                </p>\n                              </div>\n                            </div>\n\n                            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n                              <p className=\"text-sm font-medium text-yellow-800 mb-2\">\n                                üìã Documents √† v√©rifier :\n                              </p>\n                              <div className=\"text-sm text-yellow-700 space-y-2\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span>‚Ä¢ Carte d'identit√© nationale</span>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-xs\"\n                                    onClick={() => {\n                                      // Afficher le vrai document upload√©\n                                      const modal = document.createElement('div');\n                                      modal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50';\n                                      modal.style.cursor = 'pointer';\n                                      modal.innerHTML = `\n                                        <div class=\"relative max-w-4xl max-h-full p-4\">\n                                          <div class=\"bg-white rounded-lg p-6 text-center max-h-[90vh] overflow-y-auto\">\n                                            <div class=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                                              üìÑ\n                                            </div>\n                                            <h3 class=\"text-lg font-semibold text-gray-900 mb-2\">\n                                              Carte d'identit√© - ${user.firstName} ${user.lastName}\n                                            </h3>\n                                            <p class=\"text-gray-600 mb-4\">\n                                              Document d'identit√© fourni lors de l'inscription\n                                            </p>\n                                            <div class=\"bg-gray-50 border rounded-lg p-4 mb-4\">\n                                              ${user.idDocumentUrl ?\n                                                `<img src=\"${user.idDocumentUrl}\" alt=\"Document d'identit√©\" class=\"max-w-full h-auto rounded border\"/>` :\n                                                '<p class=\"text-gray-500\">Aucun document d\\'identit√© fourni</p>'\n                                              }\n                                            </div>\n                                            <button class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n                                              Fermer\n                                            </button>\n                                          </div>\n                                        </div>\n                                      `;\n\n                                      modal.addEventListener('click', () => {\n                                        document.body.removeChild(modal);\n                                      });\n\n                                      document.body.appendChild(modal);\n                                    }}\n                                  >\n                                    Voir document\n                                  </Button>\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>‚Ä¢ {user.role === 'pharmacien' ? 'Dipl√¥me de pharmacien' : 'Permis de conduire'}</span>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-xs ml-2\"\n                                    onClick={() => {\n                                      // Afficher le document professionnel/permis\n                                      const modal = document.createElement('div');\n                                      modal.className = 'fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50';\n                                      modal.style.cursor = 'pointer';\n                                      const documentUrl = user.role === 'pharmacien' ? user.professionalDocumentUrl : user.drivingLicenseUrl;\n                                      const documentTitle = user.role === 'pharmacien' ? 'Dipl√¥me de pharmacien' : 'Permis de conduire';\n\n                                      modal.innerHTML = `\n                                        <div class=\"relative max-w-4xl max-h-full p-4\">\n                                          <div class=\"bg-white rounded-lg p-6 text-center max-h-[90vh] overflow-y-auto\">\n                                            <div class=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                                              ${user.role === 'pharmacien' ? 'üéì' : 'üöó'}\n                                            </div>\n                                            <h3 class=\"text-lg font-semibold text-gray-900 mb-2\">\n                                              ${documentTitle} - ${user.firstName} ${user.lastName}\n                                            </h3>\n                                            <p class=\"text-gray-600 mb-4\">\n                                              Document professionnel fourni lors de l'inscription\n                                            </p>\n                                            <div class=\"bg-gray-50 border rounded-lg p-4 mb-4\">\n                                              ${documentUrl ?\n                                                `<img src=\"${documentUrl}\" alt=\"${documentTitle}\" class=\"max-w-full h-auto rounded border\"/>` :\n                                                `<p class=\"text-gray-500\">Aucun ${documentTitle.toLowerCase()} fourni</p>`\n                                              }\n                                            </div>\n                                            <button class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n                                              Fermer\n                                            </button>\n                                          </div>\n                                        </div>\n                                      `;\n\n                                      modal.addEventListener('click', () => {\n                                        document.body.removeChild(modal);\n                                      });\n\n                                      document.body.appendChild(modal);\n                                    }}\n                                  >\n                                    Voir\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"flex flex-col space-y-2 ml-4\">\n                            <Button\n                              onClick={() => handleValidation(user.id, 'approve')}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              disabled={validateUserMutation.isPending}\n                              data-testid={`button-approve-${user.id}`}\n                            >\n                              ‚úÖ Approuver\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              onClick={() => handleValidation(user.id, 'reject')}\n                              disabled={validateUserMutation.isPending}\n                              data-testid={`button-reject-${user.id}`}\n                            >\n                              ‚ùå Rejeter\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Gestion des pharmacies */}\n          <TabsContent value=\"pharmacies\">\n            <PharmaciesManagementModule />\n          </TabsContent>\n\n          {/* Gestion des livreurs */}\n          <TabsContent value=\"deliveries\">\n            <DeliveryPersonnelManagementModule />\n          </TabsContent>\n\n          {/* Tableau de bord global */}\n          <TabsContent value=\"dashboard\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Patients</p>\n                      <p className=\"text-2xl font-bold text-blue-600\">\n                        {appStats?.patients || 0}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                      üë•\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Pharmaciens</p>\n                      <p className=\"text-2xl font-bold text-green-600\">\n                        {appStats?.pharmaciens || 0}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                      üíä\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Livreurs</p>\n                      <p className=\"text-2xl font-bold text-purple-600\">\n                        {appStats?.livreurs || 0}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                      üö¥\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Commandes</p>\n                      <p className=\"text-2xl font-bold text-orange-600\">\n                        {appStats?.orders || 0}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                      üì¶\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>üìä Tableau de Bord Complet</CardTitle>\n                <CardDescription>\n                  Vue d'ensemble de toutes les activit√©s de la plateforme\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"p-4 bg-blue-50 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-900 mb-2\">S√©curit√© & RGPD</h4>\n                      <ul className=\"text-sm text-blue-700 space-y-1\">\n                        <li>‚úÖ Donn√©es crypt√©es</li>\n                        <li>‚úÖ Ordonnances s√©curis√©es</li>\n                        <li>‚úÖ Conformit√© RGPD M√©dical CI</li>\n                      </ul>\n                    </div>\n                    <div className=\"p-4 bg-green-50 rounded-lg\">\n                      <h4 className=\"font-semibold text-green-900 mb-2\">Supervision Commandes</h4>\n                      <ul className=\"text-sm text-green-700 space-y-1\">\n                        <li>üìã Ordonnances en attente: {appStats?.pendingOrders || 0}</li>\n                        <li>üöö Livraisons en cours: {appStats?.activeDeliveries || 0}</li>\n                        <li>‚úÖ Livraisons termin√©es: {appStats?.completedDeliveries || 0}</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":37976},"client/src/pages/suspended.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nexport default function Suspended() {\n  const { user, logout } = useAuth();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    // Si l'utilisateur n'est pas connect√©, rediriger vers login\n    if (!user) {\n      navigate(\"/login\");\n      return;\n    }\n\n    // Si l'utilisateur est actif, rediriger vers le dashboard appropri√©\n    if (user.isActive) {\n      switch (user.role) {\n        case \"admin\":\n          navigate(\"/dashboard-admin\");\n          break;\n        case \"pharmacien\":\n          navigate(\"/dashboard-pharmacien\");\n          break;\n        case \"livreur\":\n          navigate(\"/dashboard-livreur\");\n          break;\n        case \"patient\":\n          navigate(\"/dashboard-patient\");\n          break;\n        default:\n          navigate(\"/\");\n          break;\n      }\n    }\n  }, [user, navigate]);\n\n  const handleLogout = async () => {\n    await logout();\n    navigate(\"/login\");\n  };\n\n  const handleContactSupport = () => {\n    // Ouvrir un lien mailto ou rediriger vers une page de contact\n    window.location.href = \"mailto:support@yahoopharma.ci?subject=Compte Suspendu - Demande de R√©activation&body=Bonjour,%0A%0AJe vous contacte concernant la suspension de mon compte.%0A%0ANom: \" + \n      encodeURIComponent(`${user?.firstName} ${user?.lastName}`) + \n      \"%0AT√©l√©phone: \" + encodeURIComponent(user?.phone || '') + \n      \"%0A%0AMerci de bien vouloir examiner ma situation.%0A%0ACordialement\";\n  };\n\n  if (!user || user.isActive) {\n    return null; // L'useEffect va rediriger\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8 text-center\">\n          {/* Ic√¥ne de suspension */}\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <span className=\"text-3xl\">üö´</span>\n          </div>\n\n          {/* Titre principal */}\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Compte Suspendu\n          </h1>\n\n          {/* Message d'explication */}\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n            <p className=\"text-red-800 text-sm font-medium mb-2\">\n              Votre compte a √©t√© temporairement suspendu\n            </p>\n            <p className=\"text-red-700 text-sm\">\n              Votre acc√®s √† la plateforme YahoPharma+ a √©t√© suspendu par l'administration. \n              Cette mesure peut √™tre due √† une violation des conditions d'utilisation ou √† des probl√®mes de s√©curit√©.\n            </p>\n          </div>\n\n          {/* Informations du compte */}\n          <div className=\"bg-gray-50 rounded-lg p-4 mb-6 text-left\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Informations du compte :</h3>\n            <div className=\"space-y-1 text-sm text-gray-600\">\n              <p><strong>Nom :</strong> {user.firstName} {user.lastName}</p>\n              <p><strong>T√©l√©phone :</strong> {user.phone}</p>\n              <p><strong>R√¥le :</strong> {\n                user.role === 'pharmacien' ? 'Pharmacien' :\n                user.role === 'livreur' ? 'Livreur' :\n                user.role === 'patient' ? 'Patient' : user.role\n              }</p>\n              <p><strong>Statut :</strong> <span className=\"text-red-600 font-medium\">Suspendu</span></p>\n            </div>\n          </div>\n\n          {/* Actions pour l'utilisateur */}\n          <div className=\"space-y-3\">\n            <Button \n              onClick={handleContactSupport}\n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n            >\n              üìß Contacter le Support\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              onClick={handleLogout}\n              className=\"w-full\"\n            >\n              üö™ Se D√©connecter\n            </Button>\n          </div>\n\n          {/* Message d'aide */}\n          <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <p className=\"text-blue-800 text-xs\">\n              <strong>Besoin d'aide ?</strong><br />\n              Contactez notre √©quipe support √† <strong>support@yahoopharma.ci</strong> \n              ou appelez le <strong>+225 27 20 30 40 50</strong> pour plus d'informations \n              sur la r√©activation de votre compte.\n            </p>\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <p className=\"text-xs text-gray-500\">\n              YahoPharma+ ¬© 2025 - Tous droits r√©serv√©s\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4960},"client/src/utils/audioGenerator.ts":{"content":"// G√©n√©rateur de sons pour les notifications Pharma Express CI\n// Utilise Web Audio API pour cr√©er des sons synth√©tiques\n\ninterface SoundConfig {\n  frequencies: number[];\n  durations: number[];\n  type: OscillatorType;\n  volume: number;\n  envelope?: {\n    attack: number;\n    decay: number;\n    sustain: number;\n    release: number;\n  };\n}\n\n// Configuration des sons par statut de commande\nexport const SOUND_CONFIGS: Record<string, SoundConfig> = {\n  pending: {\n    frequencies: [440, 330],\n    durations: [0.1, 0.1],\n    type: 'sine',\n    volume: 0.3,\n    envelope: { attack: 0.05, decay: 0.1, sustain: 0.7, release: 0.2 }\n  },\n  confirmed: {\n    frequencies: [523, 659, 784], // Do, Mi, Sol\n    durations: [0.15, 0.15, 0.3],\n    type: 'triangle',\n    volume: 0.5,\n    envelope: { attack: 0.02, decay: 0.1, sustain: 0.8, release: 0.3 }\n  },\n  preparing: {\n    frequencies: [440, 440, 440],\n    durations: [0.1, 0.05, 0.1],\n    type: 'square',\n    volume: 0.4,\n    envelope: { attack: 0.01, decay: 0.05, sustain: 0.6, release: 0.15 }\n  },\n  ready_for_delivery: {\n    frequencies: [659, 784, 988], // Mi, Sol, Si\n    durations: [0.2, 0.2, 0.4],\n    type: 'sawtooth',\n    volume: 0.6,\n    envelope: { attack: 0.03, decay: 0.1, sustain: 0.7, release: 0.4 }\n  },\n  in_transit: {\n    frequencies: [784, 659, 523, 659, 784], // Sol-Mi-Do-Mi-Sol\n    durations: [0.1, 0.1, 0.1, 0.1, 0.3],\n    type: 'triangle',\n    volume: 0.7,\n    envelope: { attack: 0.01, decay: 0.05, sustain: 0.9, release: 0.2 }\n  },\n  in_delivery: {\n    frequencies: [1047, 1175, 1319, 1047], // Do-R√©-Mi-Do octave\n    durations: [0.15, 0.1, 0.15, 0.4],\n    type: 'sine',\n    volume: 0.8,\n    envelope: { attack: 0.01, decay: 0.02, sustain: 0.95, release: 0.5 }\n  },\n  delivered: {\n    frequencies: [523, 659, 784, 1047, 784, 659, 523], // Gamme ascendante-descendante\n    durations: [0.1, 0.1, 0.1, 0.2, 0.1, 0.1, 0.3],\n    type: 'triangle',\n    volume: 0.6,\n    envelope: { attack: 0.02, decay: 0.1, sustain: 0.8, release: 0.6 }\n  },\n  cancelled: {\n    frequencies: [392, 330, 277], // Sol-Mi-Do# descendant\n    durations: [0.2, 0.2, 0.4],\n    type: 'sawtooth',\n    volume: 0.4,\n    envelope: { attack: 0.05, decay: 0.2, sustain: 0.5, release: 0.8 }\n  }\n};\n\nclass AudioNotificationGenerator {\n  private audioContext: AudioContext | null = null;\n  private isInitialized = false;\n\n  constructor() {\n    this.initializeAudioContext();\n  }\n\n  private initializeAudioContext() {\n    try {\n      // @ts-ignore - Support pour diff√©rents navigateurs\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      this.audioContext = new AudioContext();\n      this.isInitialized = true;\n      console.log('üîä Audio Context initialis√©');\n    } catch (error) {\n      console.error('‚ùå Impossible d\\'initialiser Audio Context:', error);\n    }\n  }\n\n  private async ensureAudioContext() {\n    if (!this.audioContext || !this.isInitialized) {\n      this.initializeAudioContext();\n      return;\n    }\n\n    // Reprendre le contexte audio si suspendu (requis par les navigateurs modernes)\n    if (this.audioContext.state === 'suspended') {\n      try {\n        await this.audioContext.resume();\n        console.log('‚ñ∂Ô∏è Audio Context repris');\n      } catch (error) {\n        console.error('‚ùå Erreur reprise Audio Context:', error);\n      }\n    }\n  }\n\n  // Jouer un son de notification bas√© sur le statut\n  public async playNotificationSound(status: string): Promise<void> {\n    if (!this.audioContext || !this.isInitialized) {\n      console.warn('‚ö†Ô∏è Audio Context non disponible');\n      return;\n    }\n\n    try {\n      await this.ensureAudioContext();\n\n      // Utiliser toujours le son \"confirmed\" comme demand√©\n      const config = SOUND_CONFIGS['confirmed'];\n      if (!config) {\n        console.warn(`‚ö†Ô∏è Configuration audio non trouv√©e pour le statut: confirmed`);\n        return;\n      }\n\n      await this.generateAndPlaySound(config);\n      console.log(`üîä Son \"confirm√©\" jou√© pour statut: ${status}`);\n    } catch (error) {\n      console.error('‚ùå Erreur lecture son:', error);\n    }\n  }\n\n  private async generateAndPlaySound(config: SoundConfig): Promise<void> {\n    if (!this.audioContext) return;\n\n    const { frequencies, durations, type, volume, envelope } = config;\n    let currentTime = this.audioContext.currentTime;\n\n    for (let i = 0; i < frequencies.length; i++) {\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n\n      // Configuration de l'oscillateur\n      oscillator.type = type;\n      oscillator.frequency.setValueAtTime(frequencies[i], currentTime);\n\n      // Configuration de l'enveloppe ADSR\n      if (envelope) {\n        const { attack, decay, sustain, release } = envelope;\n        const sustainLevel = volume * sustain;\n\n        gainNode.gain.setValueAtTime(0, currentTime);\n        gainNode.gain.linearRampToValueAtTime(volume, currentTime + attack);\n        gainNode.gain.linearRampToValueAtTime(sustainLevel, currentTime + attack + decay);\n        gainNode.gain.setValueAtTime(sustainLevel, currentTime + durations[i] - release);\n        gainNode.gain.linearRampToValueAtTime(0, currentTime + durations[i]);\n      } else {\n        gainNode.gain.setValueAtTime(volume, currentTime);\n        gainNode.gain.linearRampToValueAtTime(0, currentTime + durations[i]);\n      }\n\n      // Connexion des n≈ìuds\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      // D√©marrage et arr√™t\n      oscillator.start(currentTime);\n      oscillator.stop(currentTime + durations[i]);\n\n      currentTime += durations[i] + 0.02; // Petite pause entre les notes\n    }\n  }\n\n  // Tester un son sp√©cifique\n  public async testSound(status: string): Promise<void> {\n    console.log(`üß™ Test du son pour: ${status}`);\n    await this.playNotificationSound(status);\n  }\n\n  // Tester tous les sons\n  public async testAllSounds(): Promise<void> {\n    console.log('üß™ Test de tous les sons...');\n    const statuses = Object.keys(SOUND_CONFIGS);\n\n    for (let i = 0; i < statuses.length; i++) {\n      const status = statuses[i];\n      console.log(`‚ñ∂Ô∏è Test: ${status}`);\n      await this.playNotificationSound(status);\n\n      // Attendre entre chaque son\n      if (i < statuses.length - 1) {\n        await new Promise(resolve => setTimeout(resolve, 1500));\n      }\n    }\n  }\n\n  // Jouer un son personnalis√©\n  public async playCustomSound(frequency: number, duration: number, type: OscillatorType = 'sine', volume: number = 0.5): Promise<void> {\n    if (!this.audioContext || !this.isInitialized) return;\n\n    await this.ensureAudioContext();\n\n    const oscillator = this.audioContext.createOscillator();\n    const gainNode = this.audioContext.createGain();\n\n    oscillator.type = type;\n    oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n\n    gainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\n    gainNode.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.audioContext.destination);\n\n    oscillator.start();\n    oscillator.stop(this.audioContext.currentTime + duration);\n  }\n}\n\n// Instance globale du g√©n√©rateur audio\nexport const audioGenerator = new AudioNotificationGenerator();\n\n// Hook pour les composants React\nexport function useAudioNotifications() {\n  const playSound = async (status: string) => {\n    try {\n      await audioGenerator.playNotificationSound(status);\n    } catch (error) {\n      console.error('Erreur lecture son:', error);\n    }\n  };\n\n  const testSound = async (status: string) => {\n    try {\n      await audioGenerator.testSound(status);\n    } catch (error) {\n      console.error('Erreur test son:', error);\n    }\n  };\n\n  const testAllSounds = async () => {\n    try {\n      await audioGenerator.testAllSounds();\n    } catch (error) {\n      console.error('Erreur test tous les sons:', error);\n    }\n  };\n\n  return {\n    playSound,\n    testSound,\n    testAllSounds\n  };\n}","size_bytes":8055},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }","size_bytes":1138},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/cleanup-service.ts":{"content":"import { createStorage } from \"./storage-factory\";\n\nexport class CleanupService {\n  private intervalId: NodeJS.Timeout | null = null;\n  private readonly storage = createStorage();\n\n  // Intervalle de nettoyage: toutes les heures (3600000 ms)\n  private readonly CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 heure\n\n  start(): void {\n    if (this.intervalId) {\n      console.log('‚ö†Ô∏è Service de nettoyage d√©j√† d√©marr√©');\n      return;\n    }\n\n    console.log('üöÄ D√©marrage du service de nettoyage automatique des commandes');\n    \n    // Ex√©cuter imm√©diatement au d√©marrage puis toutes les heures\n    this.performCleanup();\n    \n    this.intervalId = setInterval(() => {\n      this.performCleanup();\n    }, this.CLEANUP_INTERVAL);\n\n    console.log(`‚è∞ Service de nettoyage programm√© toutes les ${this.CLEANUP_INTERVAL / (60 * 1000)} minutes`);\n  }\n\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      console.log('üõë Service de nettoyage arr√™t√©');\n    }\n  }\n\n  private async performCleanup(): Promise<void> {\n    try {\n      console.log('üßπ Ex√©cution du nettoyage automatique...');\n      const deletedCount = await this.storage.cleanupOldOrders();\n      \n      if (deletedCount > 0) {\n        console.log(`‚úÖ Nettoyage termin√©: ${deletedCount} commandes supprim√©es`);\n      } else {\n        console.log('‚úÖ Nettoyage termin√©: aucune commande √† supprimer');\n      }\n    } catch (error) {\n      console.error('‚ùå Erreur lors du nettoyage automatique:', error);\n    }\n  }\n\n  // M√©thode pour forcer un nettoyage manuel (utile pour les tests)\n  async forceCleanup(): Promise<number> {\n    console.log('üßπ Nettoyage manuel forc√©...');\n    return await this.storage.cleanupOldOrders();\n  }\n}\n\n// Instance singleton du service\nexport const cleanupService = new CleanupService();","size_bytes":1860},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Mail, Loader2 } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport emailjs from '@emailjs/browser';\n\nexport default function ForgotPassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n\n  const requestResetMutation = useMutation({\n    mutationFn: async (email: string) => {\n      console.log(\"üîÑ G√©n√©ration du code pour:\", email);\n      \n      try {\n        // Step 1: Generate code on server\n        const data = await apiRequest(\"/api/auth/request-reset\", \"POST\", { email });\n        console.log(\"‚úÖ Code g√©n√©r√©:\", data);\n        console.log(\"üîç Code √† envoyer:\", data.code);\n        \n        // Step 2: Initialize EmailJS and send email (client-side)\n        console.log(\"üìß Initialisation EmailJS...\");\n        \n        // Initialize EmailJS with public key\n        emailjs.init(import.meta.env.VITE_EMAILJS_PUBLIC_KEY || 'your_public_key');\n        \n        console.log(\"üìß Envoi email via EmailJS...\");\n        await emailjs.send(\n          import.meta.env.VITE_EMAILJS_SERVICE_ID || 'service_1',\n          import.meta.env.VITE_EMAILJS_TEMPLATE_ID || 'template_1',\n          {\n            passcode: data.code,\n            email: email,\n            to_email: email,\n            to_name: \"Utilisateur\"\n          }\n        );\n        \n        console.log(\"‚úÖ Email envoy√© avec succ√®s\");\n        return data;\n      } catch (error) {\n        console.error(\"‚ùå Erreur:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      console.log(\"‚úÖ Processus complet r√©ussi\");\n      toast({\n        title: \"Code envoy√© !\",\n        description: \"V√©rifiez votre bo√Æte mail pour le code de r√©cup√©ration.\",\n      });\n      setLocation(`/verify-reset-code?email=${encodeURIComponent(email)}`);\n    },\n    onError: (error: any) => {\n      console.error(\"‚ùå Erreur compl√®te:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'envoyer le code de r√©cup√©ration\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) {\n      toast({\n        variant: \"destructive\",\n        title: \"Email requis\",\n        description: \"Veuillez entrer votre adresse email\",\n      });\n      return;\n    }\n    requestResetMutation.mutate(email);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n            <CardTitle className=\"text-2xl font-bold text-green-800\">\n              Mot de passe oubli√©\n            </CardTitle>\n          </div>\n          <CardDescription>\n            Entrez votre email pour recevoir un code de r√©cup√©ration\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Adresse email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"votre.email@exemple.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-green-600 hover:bg-green-700\"\n              disabled={requestResetMutation.isPending}\n              data-testid=\"button-send-code\"\n            >\n              {requestResetMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Envoi en cours...\n                </>\n              ) : (\n                \"Envoyer le code\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-4 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Vous vous souvenez de votre mot de passe ?{\" \"}\n              <Link href=\"/login\" className=\"text-green-600 hover:text-green-700 font-medium\">\n                Se connecter\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5255},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Lock, Eye, EyeOff, Loader2 } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n\n  // Extract email and code from URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const emailParam = urlParams.get(\"email\");\n    const codeParam = urlParams.get(\"code\");\n    \n    if (emailParam && codeParam) {\n      setEmail(decodeURIComponent(emailParam));\n      setCode(decodeURIComponent(codeParam));\n    } else {\n      // Redirect back to forgot password if missing parameters\n      setLocation(\"/forgot-password\");\n    }\n  }, [setLocation]);\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: (data: { email: string; code: string; password: string }) => \n      apiRequest(\"/api/auth/reset-password\", \"POST\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Mot de passe r√©initialis√© !\",\n        description: \"Votre mot de passe a √©t√© mis √† jour avec succ√®s. Vous pouvez maintenant vous connecter.\",\n      });\n      setLocation(\"/login\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible de r√©initialiser le mot de passe\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (password.length < 6) {\n      toast({\n        variant: \"destructive\",\n        title: \"Mot de passe trop court\",\n        description: \"Le mot de passe doit contenir au moins 6 caract√®res\",\n      });\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Mots de passe diff√©rents\",\n        description: \"Les mots de passe ne correspondent pas\",\n      });\n      return;\n    }\n\n    resetPasswordMutation.mutate({ email, code, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/verify-reset-code\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n            <CardTitle className=\"text-2xl font-bold text-green-800\">\n              Nouveau mot de passe\n            </CardTitle>\n          </div>\n          <CardDescription>\n            Choisissez un nouveau mot de passe s√©curis√© pour votre compte\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Nouveau mot de passe</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Minimum 6 caract√®res\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10 pr-10\"\n                  required\n                  minLength={6}\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirmer le mot de passe</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Retapez le mot de passe\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className=\"pl-10 pr-10\"\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  data-testid=\"button-toggle-confirm-password\"\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Password strength indicator */}\n            {password && (\n              <div className=\"space-y-1\">\n                <div className=\"flex gap-1\">\n                  <div className={`h-1 w-1/4 rounded ${password.length >= 6 ? 'bg-green-500' : 'bg-gray-200'}`} />\n                  <div className={`h-1 w-1/4 rounded ${password.length >= 8 ? 'bg-green-500' : 'bg-gray-200'}`} />\n                  <div className={`h-1 w-1/4 rounded ${/[A-Z]/.test(password) ? 'bg-green-500' : 'bg-gray-200'}`} />\n                  <div className={`h-1 w-1/4 rounded ${/[0-9]/.test(password) ? 'bg-green-500' : 'bg-gray-200'}`} />\n                </div>\n                <p className=\"text-xs text-gray-500\">\n                  Force du mot de passe: {password.length >= 8 && /[A-Z]/.test(password) && /[0-9]/.test(password) ? 'Forte' : \n                    password.length >= 6 ? 'Moyenne' : 'Faible'}\n                </p>\n              </div>\n            )}\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-green-600 hover:bg-green-700\"\n              disabled={resetPasswordMutation.isPending || password.length < 6 || password !== confirmPassword}\n              data-testid=\"button-reset-password\"\n            >\n              {resetPasswordMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  R√©initialisation...\n                </>\n              ) : (\n                \"R√©initialiser le mot de passe\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-4 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              <Link href=\"/login\" className=\"text-green-600 hover:text-green-700 font-medium\">\n                Retour √† la connexion\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8172},"client/src/pages/verify-reset-code.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Shield, Loader2 } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function VerifyResetCode() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [code, setCode] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  // Extract email from URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const emailParam = urlParams.get(\"email\");\n    if (emailParam) {\n      setEmail(decodeURIComponent(emailParam));\n    } else {\n      // Redirect back to forgot password if no email\n      setLocation(\"/forgot-password\");\n    }\n  }, [setLocation]);\n\n  const verifyCodeMutation = useMutation({\n    mutationFn: (data: { email: string; code: string }) => \n      apiRequest(\"/api/auth/verify-reset-code\", \"POST\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Code v√©rifi√© !\",\n        description: \"Vous pouvez maintenant cr√©er un nouveau mot de passe.\",\n      });\n      setLocation(`/reset-password?email=${encodeURIComponent(email)}&code=${encodeURIComponent(code)}`);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Code incorrect\",\n        description: error.message || \"Le code saisi est incorrect ou a expir√©\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!code || code.length !== 6) {\n      toast({\n        variant: \"destructive\",\n        title: \"Code invalide\",\n        description: \"Veuillez entrer un code √† 6 chiffres\",\n      });\n      return;\n    }\n    verifyCodeMutation.mutate({ email, code });\n  };\n\n  const formatCode = (value: string) => {\n    // Only allow digits and limit to 6 characters\n    return value.replace(/\\D/g, '').slice(0, 6);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/forgot-password\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n            <CardTitle className=\"text-2xl font-bold text-green-800\">\n              V√©rification du code\n            </CardTitle>\n          </div>\n          <CardDescription>\n            Entrez le code √† 6 chiffres envoy√© √† {email && (\n              <span className=\"font-medium text-green-600\">{email}</span>\n            )}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"code\">Code de v√©rification</Label>\n              <div className=\"relative\">\n                <Shield className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"code\"\n                  type=\"text\"\n                  placeholder=\"123456\"\n                  value={code}\n                  onChange={(e) => setCode(formatCode(e.target.value))}\n                  className=\"pl-10 text-center text-2xl font-mono tracking-widest\"\n                  maxLength={6}\n                  required\n                  data-testid=\"input-code\"\n                />\n              </div>\n              <p className=\"text-xs text-gray-500 text-center\">\n                Code valable pendant 15 minutes\n              </p>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-green-600 hover:bg-green-700\"\n              disabled={verifyCodeMutation.isPending || code.length !== 6}\n              data-testid=\"button-verify-code\"\n            >\n              {verifyCodeMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  V√©rification...\n                </>\n              ) : (\n                \"V√©rifier le code\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center space-y-2\">\n            <p className=\"text-sm text-gray-600\">\n              Vous n'avez pas re√ßu le code ?{\" \"}\n              <Link href=\"/forgot-password\" className=\"text-green-600 hover:text-green-700 font-medium\">\n                Renvoyer un code\n              </Link>\n            </p>\n            <p className=\"text-sm text-gray-600\">\n              <Link href=\"/login\" className=\"text-green-600 hover:text-green-700 font-medium\">\n                Retour √† la connexion\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5203}},"version":1}