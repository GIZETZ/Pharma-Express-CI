#!/usr/bin/env node

/**
 * Script de configuration automatique de la base de donn√©es PostgreSQL
 * Recr√©e automatiquement le sch√©ma et les donn√©es de base si n√©cessaire
 */

import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';

const execAsync = promisify(exec);

const LOG_PREFIX = 'üóÑÔ∏è [DB-Setup]';

// Configuration de la base de donn√©es par d√©faut
const DB_CONFIG = {
  name: 'pharma_express_ci',
  description: 'Base de donn√©es principale pour Pharma Express CI',
  version: '1.0.0',
  lastUpdate: new Date().toISOString()
};

/**
 * V√©rifie si la variable DATABASE_URL est configur√©e
 */
function checkDatabaseUrl() {
  const dbUrl = process.env.DATABASE_URL;
  if (!dbUrl) {
    console.error(`${LOG_PREFIX} ‚ùå Variable DATABASE_URL manquante`);
    console.error(`${LOG_PREFIX} üí° Configurez DATABASE_URL dans les secrets Replit`);
    process.exit(1);
  }
  console.log(`${LOG_PREFIX} ‚úÖ DATABASE_URL configur√©e`);
  return dbUrl;
}

/**
 * Ex√©cute les migrations Drizzle pour cr√©er/mettre √† jour le sch√©ma
 */
async function runMigrations() {
  try {
    console.log(`${LOG_PREFIX} üìã Ex√©cution des migrations Drizzle...`);
    
    // Utilise drizzle-kit pour pousser le sch√©ma vers la base de donn√©es
    const { stdout, stderr } = await execAsync('npx drizzle-kit push');
    
    if (stderr && !stderr.includes('Warning')) {
      console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Avertissements migrations:`, stderr);
    }
    
    console.log(`${LOG_PREFIX} ‚úÖ Migrations ex√©cut√©es avec succ√®s`);
    console.log(stdout);
    
    return true;
  } catch (error) {
    console.error(`${LOG_PREFIX} ‚ùå Erreur lors des migrations:`, error.message);
    
    // Si les migrations √©chouent, essaie de cr√©er les tables manuellement
    console.log(`${LOG_PREFIX} üîÑ Tentative de cr√©ation manuelle des tables...`);
    return await createTablesManually();
  }
}

/**
 * Cr√©e les tables manuellement si les migrations Drizzle √©chouent
 */
async function createTablesManually() {
  try {
    // Import du module db pour ex√©cuter du SQL brut si n√©cessaire
    const { db } = await import('../server/db.js');
    
    console.log(`${LOG_PREFIX} ‚úÖ Connexion √† la base de donn√©es √©tablie`);
    
    // Les tables seront cr√©√©es automatiquement par Drizzle ORM lors de la premi√®re utilisation
    // Si n√©cessaire, on peut ajouter ici du SQL brut pour forcer la cr√©ation
    
    return true;
  } catch (error) {
    console.error(`${LOG_PREFIX} ‚ùå Impossible de cr√©er les tables:`, error.message);
    return false;
  }
}

/**
 * V√©rifie si la base de donn√©es contient des donn√©es
 */
async function checkExistingData() {
  try {
    const { db } = await import('../server/db.js');
    const { users } = await import('../shared/schema.js');
    
    // V√©rifie s'il y a des utilisateurs dans la base
    const userCount = await db.select().from(users);
    
    console.log(`${LOG_PREFIX} üìä ${userCount.length} utilisateurs trouv√©s dans la base`);
    
    return userCount.length > 0;
  } catch (error) {
    console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Impossible de v√©rifier les donn√©es existantes:`, error.message);
    return false;
  }
}

/**
 * Initialise les donn√©es de base (admin, pharmacies de test, etc.)
 */
async function seedDatabase() {
  try {
    console.log(`${LOG_PREFIX} üå± Initialisation des donn√©es de base...`);
    
    // Import de la classe PostgresStorage qui contient la logique de seed
    const { PostgresStorage } = await import('../server/postgres-storage.js');
    
    // Cr√©er une instance et d√©clencher le seed
    const storage = new PostgresStorage();
    
    // Attendre un peu pour que le seed se termine
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log(`${LOG_PREFIX} ‚úÖ Donn√©es de base initialis√©es`);
    return true;
  } catch (error) {
    console.error(`${LOG_PREFIX} ‚ùå Erreur lors du seed:`, error.message);
    return false;
  }
}

/**
 * Sauvegarde la configuration actuelle
 */
async function saveConfiguration() {
  try {
    const configPath = path.join(process.cwd(), '.database-config.json');
    
    const config = {
      ...DB_CONFIG,
      setupDate: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development',
      databaseUrl: process.env.DATABASE_URL ? 'configured' : 'missing'
    };
    
    await fs.writeFile(configPath, JSON.stringify(config, null, 2));
    console.log(`${LOG_PREFIX} üíæ Configuration sauvegard√©e dans .database-config.json`);
  } catch (error) {
    console.warn(`${LOG_PREFIX} ‚ö†Ô∏è Impossible de sauvegarder la configuration:`, error.message);
  }
}

/**
 * Fonction principale d'installation de la base de donn√©es
 */
async function setupDatabase() {
  console.log(`${LOG_PREFIX} üöÄ D√©but de la configuration automatique de la base de donn√©es`);
  console.log(`${LOG_PREFIX} üìÖ ${new Date().toLocaleString('fr-FR')}`);
  
  try {
    // 1. V√©rifier DATABASE_URL
    checkDatabaseUrl();
    
    // 2. Ex√©cuter les migrations
    const migrationsOk = await runMigrations();
    if (!migrationsOk) {
      throw new Error('√âchec des migrations');
    }
    
    // 3. V√©rifier les donn√©es existantes
    const hasData = await checkExistingData();
    
    // 4. Initialiser les donn√©es si n√©cessaire
    if (!hasData) {
      console.log(`${LOG_PREFIX} üìù Base de donn√©es vide, initialisation des donn√©es...`);
      await seedDatabase();
    } else {
      console.log(`${LOG_PREFIX} ‚úÖ Donn√©es existantes d√©tect√©es, pas de seed n√©cessaire`);
    }
    
    // 5. Sauvegarder la configuration
    await saveConfiguration();
    
    console.log(`${LOG_PREFIX} üéâ Configuration de la base de donn√©es termin√©e avec succ√®s !`);
    console.log(`${LOG_PREFIX} üí° Votre base de donn√©es est maintenant pr√™te et sauvegard√©e`);
    
  } catch (error) {
    console.error(`${LOG_PREFIX} üí• Erreur fatale lors de la configuration:`, error.message);
    console.error(`${LOG_PREFIX} üîß V√©rifiez votre variable DATABASE_URL et r√©essayez`);
    process.exit(1);
  }
}

// Ex√©cution du script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  setupDatabase();
}

export { setupDatabase, checkDatabaseUrl, runMigrations, seedDatabase };